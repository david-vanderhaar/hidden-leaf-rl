{"version":3,"sources":["nystrum/Screen/constants.js","helper.js","nystrum/engine.js","nystrum/constants.js","nystrum/game.js","nystrum/UI/Button.js","nystrum/UI/Information.js","nystrum/UI/Equipment.js","nystrum/UI/Inventory.js","nystrum/UI/Keymap.js","nystrum/actions.js","nystrum/entites.js","nystrum/items.js","nystrum/keymaps.js","nystrum/statusEffects.js","nystrum/Characters/Gaara.js","nystrum/Screen/Level.js","nystrum/Screen/Title.js","nystrum/Nystrum.js","original/lib/helper.js","original/lib/entity.js","original/components/index.js","original/Original.js","App.js","serviceWorker.js","index.js"],"names":["SCREENS","TITLE","LEVEL","delay","timeDelayed","Promise","resolve","setTimeout","getRandomInArray","array","Math","floor","random","length","coordsToString","coords","x","y","calculatePath","game","targetPos","currentPos","topology","map","isPassable","type","astar","ROT","AStar","path","compute","push","slice","calculatePathWithRange","range","getRandomPos","keys","Object","key","split","coordinates","parseInt","text","getDestructableEntities","entites","filter","entity","hasOwnProperty","getGranularity","radius","pow","Engine","statusEffects","actors","currentActor","isRunning","this","actor","gainEnergy","speed","hasEnoughEnergy","action","getAction","result","perform","draw","Helper","processDelay","success","alternative","acting","timePassed","energyCost","processStatusEffects","process","keymap","visibleKeymap","updateReact","newEffect","allowDuplicates","effect","id","name","console","log","onStart","onStop","actorId","lifespan","timeToLive","forEach","timeSinceLastStep","stepInterval","onStep","removeDeadStatusEffects","splice","max","CrankEngine","TILE_KEY","background","character","passable","animation","foreground","DIRECTIONS","N","S","E","W","EQUIPMENT_TYPES","HEAD","TORSO","BACK","HAND","FEET","EQUIPMENT_LAYOUTS","human","item","CLONE_PATTERNS","verticalLine","x_offset","y_offset","positions","taken","smallSquare","square","bigSquare","circle","centerX","centerY","r","n","list","i","round","cos","PI","sin","table","ALPHABET","Game","engine","display","width","fontSize","bg","tileKey","Constant","pos","tile","entities","ac","digger","Arena","freeCells","create","value","min","currentFrame","ceil","bind","randomlyPlaceActorsOnMap","targetTile","hasImpassableEntity","document","getElementById","appendChild","getContainer","parts","renderer","color","isPlaced","placeActorOnMap","placeActorsOnMap","removeActorFromMap","presserRef","show","createLevel","current","focus","handleKeyPress","event","code","start","Button","props","onClick","className","children","Information","data","index","label","React","Component","Equipment","equipment","slot","Inventory","inventory","Keymap","entries","Base","energy","AddStatusEffect","args","addStatusEffect","Say","message","EquipItemFromContainer","equipmentType","itemInSlot","getItemInSlot","addToContainer","unequip","removeFromContainer","equip","UnequipItem","DropItem","PickupItem","it","DestroySelf","destroy","CloneSelf","cloneArgs","clone","cloneDeep","uuid","arg","attribute","addActorAsNext","CursorMove","cursorCanOccupyPosition","e","PlaceActor","canOccupyPosition","PlaceItems","targetPositions","Move","move","Action","Shove","direction","shove","Attack","entityTypes","includes","attack","ThrowProjectile","move_result","shift","ThrowProjectileGas","Entity","Attacking","superclass","attackDamage","concat","additional","targets","target","canAttack","damage","getAttackDamage","decreaseDurability","Acting","actions","Rendering","newPos","Playing","nextAction","Chasing","targetEntity","Destructable","durability","removeStatusEffectByActorId","UI_Actor","pipe","initiatedBy","active","Wall","MovingWall","createPath","Bandit","Player","charge","chargeMax","signHistory","sign","container","itemType","items","slotName","find","foundSlot","DestructiveProjectile","DestructiveCloudProjectileV2","owner_id","isClone","cloneCount","clonePattern","offset","cloneDeepWith","referencePos","addActor","isInitialized","child","destroyChild","initialize","TYPE","createProjectileCloud","throwDirection","structureType","createProjectile","structure","position","targetPosition","sandTomb","createProjectileSingularity","sandShuriken","movingSandWall","fireball","addAlphabeticallyToKeymap","obj","alphabetAllowed","letter","moveCursor","newX","newY","setNextAction","throwKunaiCloud","cursor","removeActor","cloud","Item","keymapCursorToThrowItem","w","activate","d","s","a","t","kunai","contains","throwKunai","closeInventory","currentUiActor","visibleInventory","closeEquipment","visibleEquipment","walk","pickupRandom","activateThrowCursor","addActorAsPrevious","setActorToPrevious","activateInventory","ui","Escape","keymapEquipFromInventory","activateEquipment","keymapEquipment","activateDrop","keymapDropFromInventory","ENGINE","createSandWall","sandWall","directionString","activateSandWall","previousKeymap","goToPreviousKeymap","keymapSandWall","triggerSandPulse","activateSandPulse","keymapSandPulse","keymapSandTomb","k","triggerSandTomb","l","cloneKeymap","sandClone","activateSandTomb","j","durabilityBuff","StatusEffect","sandSkin","h","o","q","g","p","Array","fill","Gaara","Level","state","createRef","newGameState","setState","setActiveScreen","ref","onKeyDown","tabIndex","Title","style","height","backgroundColor","class","Nystrum","activeScreen","titleScreen","levelScreen","getActiveScreen","transitionName","transitionAppear","transitionEnter","transitionLeave","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","DRAW","components","getImpassableEntities","impasse","createEntity","world","sendEvent","eventType","parameters","component","self","MAKE_PASSABLE","MAKE_IMPASSABLE","body","MOVE","canOccupy","destructible","DECREASE_DURABILITY","INCREASE_DURABILITY","DESTROY","PREPARE_RENDER","scheduler","Simple","canAct","naruto","reciever","responded","RECIEVE","sender","Components","box","box2","box3","throwable","THROW","nextPos","nextTile","impassable_and_destructable_entities","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.89c6414f.chunk.js","sourcesContent":["export const SCREENS = {\n  TITLE: 0,\n  LEVEL: 1,\n}","import * as ROT from 'rot-js';\n\nexport const delay = (timeDelayed = 100) => {\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport const getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const calculatePath = (game, targetPos, currentPos, topology = 4) => {\n  let map = game.map\n  let isPassable = function (x, y) {\n    if (map[x + \",\" + y]) {\n      return (map[x + \",\" + y].type === 'GROUND');\n    } else {\n      return false\n    }\n  }\n  let astar = new ROT.Path.AStar(targetPos.x, targetPos.y, isPassable, { topology });\n  let path = [];\n  astar.compute(currentPos.x, currentPos.y, function (x, y) {\n    path.push({ x, y })\n  });\n\n  return path.slice(1);\n}\n\nexport const calculatePathWithRange = (game, targetPos, currentPos, topology, range) => {\n  let path = calculatePath(game, targetPos, currentPos, topology);\n  return path.slice(0, range + 1);\n}\n\nexport const getRandomPos = (map) => {\n  let keys = Object.keys(map);\n  let key = getRandomInArray(keys).split(',');\n  let pos = { x: parseInt(key[0]), y: parseInt(key[1])}\n  return {coordinates: pos, text: key}\n}\n\nexport const getDestructableEntities = (entites) => {\n  return entites.filter((entity) => entity.hasOwnProperty('durability'));\n}\n\nconst getGranularity = (radius) => {\n  let result = (2 / 3) * (Math.pow(radius, 3) - (9 * Math.pow(radius, 2)) + (32 * radius) - 18)\n  return result\n}\n\nexport const getPointsOnCircumference = (centerX = 0, centerY = 0, r = 3) => {\n  const n = getGranularity(r);\n  let list = [];\n  for (let i = 0; i < n; i++) {\n    let x = Math.round(centerX + (Math.cos(2 * Math.PI / n * i) * r))\n    let y = Math.round(centerY + (Math.sin(2 * Math.PI / n * i) * r))\n    list.push({ x, y });\n  }\n  console.table(list);\n  return list\n}\n","import * as Helper from '../helper';\n\nexport class Engine {\n  constructor({\n    statusEffects = [],\n    actors = [],\n    currentActor = 0,\n    isRunning = false,\n    game = null,\n  }) {\n    this.statusEffects = statusEffects;\n    this.actors = actors;\n    this.currentActor = currentActor;\n    this.isRunning = isRunning;\n    this.game = game;\n  }\n\n  async processV1 () { // a turn-based system using speed and round-robin\n    let actor = this.actors[this.currentActor]\n    actor.gainEnergy(actor.speed);\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      while (true) {\n        let result = action.perform();\n        this.game.draw();\n        await Helper.delay(action.processDelay);\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    return true\n  }\n\n  async process() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      let timePassed = 0;\n      if (actor.hasEnoughEnergy()) {\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        timePassed += action.energyCost;\n        while (true) {\n          let result = await action.perform();\n          this.game.draw();\n          await Helper.delay(action.processDelay);\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n        this.processStatusEffects(timePassed);\n      } else {\n        actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    return true\n  }\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.process();\n\n    }\n    let actor = this.actors[this.currentActor]\n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    await this.game.updateReact(this.game);\n  }\n  \n  stop() {\n    this.isRunning = false;\n  }\n\n  addStatusEffect(newEffect) {\n    if (!newEffect.allowDuplicates) {\n      if (this.statusEffects.filter((effect) => (\n        effect.actor.id === newEffect.actor.id &&\n        effect.name === newEffect.name\n      )).length > 0) {\n        console.log(`${newEffect.name} cannot be applied twice to ${newEffect.actor.name}`);\n        return false;\n      };\n    }\n    newEffect.onStart();\n    this.statusEffects.push(newEffect)\n    return true;\n  }\n\n  removeStatusEffectById (id) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.id !== id) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n  \n  removeStatusEffectByActorId (actorId) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.actor.id !== actorId) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n\n  removeDeadStatusEffects() {\n    this.statusEffects = this.statusEffects.filter((effect) =>{\n      if (effect.lifespan >= 0 && effect.timeToLive <= 0) {\n        effect.onStop();\n        return false;\n      }\n      return true;\n    });\n  }\n\n  processStatusEffects (timePassed) {\n    this.statusEffects.forEach((effect) => {\n      effect.timeSinceLastStep += timePassed;\n      effect.timeToLive -= timePassed;\n      if (effect.timeSinceLastStep >= effect.stepInterval) {\n        effect.onStep();\n        effect.timeSinceLastStep = 0;\n      } \n    });\n    this.removeDeadStatusEffects();\n  }\n\n  addActor (entity) {\n    this.actors.push(entity);\n  }\n\n  addActorAsPrevious (entity) {\n    this.actors.splice(this.currentActor, 0, entity);\n  }\n\n  addActorAsNext (entity) {\n    this.actors.splice(this.currentActor + 1, 0, entity);\n  }\n\n  setActorToPrevious (entity) {\n    this.currentActor = Math.max(this.currentActor - 1, 0);\n  }\n\n  setActorToNext (entity) {\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n  }\n\n}\n\n\nexport class CrankEngine extends Engine {\n  async process() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (actor.hasEnoughEnergy()) {\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        while (true) {\n          await Helper.delay(action.processDelay);\n          let result = await action.perform();\n          this.game.draw();\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n      } else {\n        // actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    // this.currentActor = (this.currentActor + 1) % this.actors.length;\n    this.currentActor += 1;\n    if (this.currentActor + 1 >= this.actors.length) {\n      this.currentActor = 0;\n      this.actors.forEach((actor) => actor.gainEnergy(actor.speed));\n      return false;\n    }\n    return true\n  }\n}","import * as Helper from '../helper'\n\nexport const ENERGY_THRESHOLD = 100;\n\nexport const TILE_KEY = {\n  'GROUND': {\n    background: '#424242',\n    character: '',\n    passable: true,\n  },\n  'WATER': {\n    animation: [\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#8aa', character: '▒', passable: false, },\n      { background: '#424242', foreground: '#8aa', character: '▓', passable: false, },\n    ],\n    background: '#9dc3d3',\n    character: '░',\n    passable: false,\n  },\n  'WIN': {\n    background: 'white',\n    foreground: 'black',\n    character: 'W',\n    passable: true,\n  }\n}\n\nexport const HAND_SIGNS = {\n  Power: {\n    type: 'Power',\n    name: 'Rin',\n    description: 'Strength of mind, body, spirit',\n  },\n  Energy: {\n    type: 'Energy',\n    name: 'Pyo',\n    description: 'energy direction',\n  },\n  Harmony: {\n    type: 'Harmony',\n    name: 'To',\n    description: 'one- ness with the universe or self',\n  },\n  Healing: {\n    type: 'Healing',\n    name: 'Sha',\n    description: 'of self and others',\n  },\n  Intuition: {\n    type: 'Intuition',\n    name: 'Kai',\n    description: 'premonition of danger, feeling others intent',\n  },\n  Awareness: {\n    type: 'Awareness',\n    name: 'Jin',\n    description: 'feeling thoughts of others, perhaps hiding your own',\n  },\n  Dimension: {\n    type: 'Dimension',\n    name: 'Retsu',\n    description: 'control of time and space',\n  },\n  Creation: {\n    type: 'Creation',\n    name: 'Zai',\n    description: 'understanding nature',\n  },\n  Absolute: {\n    type: 'Absolute',\n    name: 'Zen',\n    description: 'enlightenment',\n  }, \n}\n\nexport const DIRECTIONS = {\n  N: [0, -1],\n  S: [0, 1],\n  E: [1, 0],\n  W: [-1, 0],\n}\n\nexport const getDirectionKey = (direction) => {\n  let directionString = `${direction}`;\n  let keys = Object.keys(DIRECTIONS);\n  let result = false\n  keys.forEach((key) => {\n    if (`${DIRECTIONS[key]}` === directionString) {\n      result = key\n    }\n  })\n  return result\n}\n\nexport const EQUIPMENT_TYPES = {\n  HEAD: 'HEAD',\n  TORSO: 'TORSO',\n  BACK: 'BACK',\n  HAND: 'HAND',\n  FEET: 'FEET',\n}\n\nexport const EQUIPMENT_LAYOUTS = {\n  human: () => {\n    return [\n      {type: EQUIPMENT_TYPES.HEAD, name: 'head', item: null},\n      {type: EQUIPMENT_TYPES.TORSO, name: 'torso', item: null},\n      {type: EQUIPMENT_TYPES.BACK, name: 'back', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'left_hand', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'right_hand', item: null},\n      {type: EQUIPMENT_TYPES.FEET, name: 'feet', item: null},\n    ]\n  }\n}\n\nexport const CLONE_PATTERNS = {\n  verticalLine: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n    ]\n  },\n  smallSquare: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n    ]\n  },\n  square: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n    ]\n  },\n  bigSquare: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 2, y: 2, taken: false, },\n      { x: 2, y: 0, taken: false, },\n      { x: 2, y: -2, taken: false, },\n      { x: 0, y: -2, taken: false, },\n      { x: -2, y: -2, taken: false, },\n      { x: -2, y: 0, taken: false, },\n      { x: -2, y: 2, taken: false, },\n    ],\n  },\n  circle: {\n    x_offset: 0,\n    y_offset: 0,\n    positions: Helper.getPointsOnCircumference(0, 0, 2)\n  },\n}\n\nexport const ALPHABET = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];","import React from 'react';\nimport * as ROT from 'rot-js';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\n\nexport class Game {\n  constructor({\n    engine = null,\n    map = {},\n    display = new ROT.Display({ \n      // forceSquareRatio: true,\n      width: 90,\n      // height: 100,\n      fontSize: 24, \n      bg: '#424242' \n    }),\n    tileKey = Constant.TILE_KEY,\n  }) {\n    this.engine = engine;\n    this.map = map;\n    this.display = display;\n    this.tileKey = tileKey;\n  }\n\n  randomlyPlaceActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      let pos = Helper.getRandomPos(this.map).coordinates\n      let tile = this.map[Helper.coordsToString(pos)]\n      actor.pos = {...pos}\n      tile.entities.push(actor);\n    })\n  }\n\n  placeActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      let tile = this.map[Helper.coordsToString(actor.pos)]\n      if (tile) {\n        tile.entities.push(actor);\n      } else {\n        console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      }\n    })\n  }\n\n  placeActorOnMap(actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (tile) {\n      tile.entities.push(actor);\n      return true\n    } else {\n      console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      return false\n    }\n  }\n\n  removeActorFromMap (actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    this.map[Helper.coordsToString(actor.pos)].entities = tile.entities.filter((ac) => ac.id !== actor.id);\n  }\n\n  createLevel () {\n    let digger = new ROT.Map.Arena();\n    let freeCells = [];\n    let digCallback = function (x, y, value) {\n      if (value) { return; }\n      let key = x + \",\" + y;\n      let type = 'GROUND';\n      let currentFrame = 0;\n\n      if (Constant.TILE_KEY[type].animation) {\n        currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n      }\n\n      this.map[key] = {\n        type,\n        currentFrame,\n        entities: [],\n      };\n      freeCells.push(key);\n    }\n    digger.create(digCallback.bind(this));\n    this.map[`10,10`] = {\n      type: 'WIN',\n      entities:[],\n    }\n    this.randomlyPlaceActorsOnMap()\n  }\n\n  canOccupyPosition (pos, entity = {passable: false}) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      let hasImpassableEntity = targetTile.entities.filter((entity) => !entity.passable).length > 0;\n      if (!hasImpassableEntity || entity.passable) {\n        let tile = this.map[Helper.coordsToString(pos)];\n        if (this.tileKey[tile.type].passable) {\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  cursorCanOccupyPosition(pos) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  show () {\n    let d = document.getElementById('display')\n    d.appendChild(this.display.getContainer())\n  }\n\n  draw () {\n    for (let key in this.map) {\n      let parts = key.split(\",\");\n      let x = parseInt(parts[0]);\n      let y = parseInt(parts[1]);\n      let tile = this.map[key];\n      let { character, foreground, background } = this.tileKey[tile.type]\n\n      // Proto code to handle tile animations\n      // let tileRenderer = this.tileKey[tile.type]\n      // if (tileRenderer.animation) {\n      //   let frame = tileRenderer.animation[tile.currentFrame];\n        \n      //   character = frame.character;\n      //   foreground = frame.foreground;\n      //   background = frame.background;\n      //   tile.currentFrame = (tile.currentFrame + 1) % tileRenderer.animation.length;\n      // }\n\n      if (tile.entities.length > 0) {\n        let entity = tile.entities[tile.entities.length - 1]\n        character = entity.renderer.character\n        foreground = entity.renderer.color\n        if (entity.renderer.background) {\n          background = entity.renderer.background\n        }\n      }\n      this.display.draw(x, y, character, foreground, background);\n    }\n  }\n\n  addActor (actor, engine = this.engine) {\n    let isPlaced = this.placeActorOnMap(actor); // replace with placeActorOnMap\n    if (!isPlaced) { return false }\n    engine.actors.push(actor);\n    this.draw();\n    return true\n  }\n\n  placeAndDrawActor (actor) {\n    this.placeActorsOnMap(); // replace with placeActorOnMap\n    this.draw();\n  }\n\n  removeActor (actor) {\n    this.engine.actors = this.engine.actors.filter((ac) => ac.id !== actor.id);\n    // this.engine.currentActor = this.engine.actors.length - 1; // should remove need for this line\n    // this.engine.currentActor = (this.engine.currentActor) % this.engine.actors.length;\n    // this.engine.currentActor = (this.engine.currentActor + 1) % this.engine.actors.length;\n    this.removeActorFromMap(actor);\n    console.log('remove actor');\n    this.draw();\n  }\n\n  initialize (presserRef) {\n    this.engine.game = this;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this;\n    });\n    this.show();\n    this.createLevel();\n    this.draw();\n    presserRef.current.focus();\n  }\n}\n\n/************************** UI ********************************/\nexport const handleKeyPress = (event, engine) => {\n  if (!engine.isRunning) {\n    let actor = engine.actors[engine.currentActor];\n    let keymap = actor.keymap;\n    let code = event.key;\n    if (!(code in keymap)) { return; }\n    keymap[code]['activate']();\n    engine.start()\n  }\n  return;\n}\n\nexport const DisplayElement = (presserRef, handleKeyPress, engine) => {\n  return (\n    <div\n      id='display'\n      ref={presserRef}\n      onKeyDown={(event) => handleKeyPress(event, engine)}\n      tabIndex='0'\n    />\n  )\n}\n/************************** UI ********************************/\n","import React from 'react';\n\nfunction Button(props) {\n  return (\n    <button\n      onClick={props.onClick}\n      className='btn grey darken-3'\n    >\n      {props.children}  \n    </button>\n  )\n}\n\nexport default Button;\n","import React from 'react';\nimport Button from './Button';\n\nclass Information extends React.Component {\n  render() {\n    return (\n      <div className=\"Information UI\">\n        <div className='flow-text'>Information</div>\n        {\n          this.props.data && (\n            this.props.data.map((item, index) => {\n              return (\n                <Button key={index} onClick={() => null}>\n                  {`${item.label}: ${item.value}`}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Information;","import React from 'react';\nimport Button from './Button';\n\nclass Equipment extends React.Component {\n  render() {\n    return (\n      <div className=\"Equipment UI\">\n        <div className='flow-text'>Equipment</div>\n        {\n          this.props.equipment && (\n            this.props.equipment.map((slot, index) => {\n              return (\n                <Button key={index} onClick={() => null}>\n                  {slot.name} {slot.item ? slot.item.renderer.character : ''}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Equipment;","import React from 'react';\nimport Button from './Button';\n\nclass Inventory extends React.Component {\n  render() {\n    return (\n      <div className=\"Inventory UI\">\n        <div className='flow-text'>Inventory</div>\n        {\n          this.props.inventory && (\n            this.props.inventory.map((item, index) => {\n              return (\n                <Button key={index} onClick={() => null}>\n                  {index} {item.name} {item.renderer.character}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Inventory;","import React from 'react';\nimport Button from './Button';\n\nclass Keymap extends React.Component {\n  render() {\n    return (  \n      <div className=\"Keymap UI\">\n        <div className='flow-text'>Keymap</div>\n        {\n          \n          this.props.keymap && (\n            Object.entries(this.props.keymap).map(([key, value], index) => {\n              return (\n                <Button key={index} onClick={() => null}>\n                  {key} {value.label}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Keymap;","import * as Helper from '../helper';\nimport * as Action from './actions';\nimport * as Constant from './constants';\nimport { cloneDeep } from 'lodash';\nimport uuid from 'uuid/v1';\n\nexport class Base {\n  constructor({game, actor, energyCost = 100, processDelay = 50}) {\n    this.actor = actor\n    this.game = game\n    this.energyCost = energyCost\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    console.log(`${this.actor.name} performs`)\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n}\n\nexport class AddStatusEffect extends Base {\n  constructor({ effect, processDelay = 0, ...args }) {\n    super({ ...args });\n    this.effect = effect\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = this.game.engine.addStatusEffect(this.effect);\n    if (success) this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Say extends Base {\n  constructor({ message, processDelay = 50, ...args}) {\n    super({...args});\n    this.message = message\n    this.processDelay = processDelay\n  }\n  perform() {\n    console.log(`${this.actor.name} says ${this.message}`);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SayManyThings extends Base {\n  constructor({ messages, processDelay = 50, ...args}) {\n    super({...args});\n    this.messages = messages\n    this.processDelay = processDelay\n  }\n  perform() {\n    let message = this.messages.shift();\n    if (message) {\n      console.log(`${this.actor.name} says ${message}`);\n      this.actor.energy -= this.energyCost;\n    }\n    if (this.messages.length) {\n      this.actor.setNextAction(this);\n    }\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class EquipItemFromContainer extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.actor.addToContainer(itemInSlot);\n        this.actor.unequip(itemInSlot);\n      }\n      this.actor.removeFromContainer(this.item);\n      this.actor.equip(this.item.equipmentType, this.item);\n      console.log(`${this.actor.name} equips ${this.item.name}.`);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class EquipItemFromTile extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(itemInSlot);\n      }\n\n      let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n      this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n      \n      this.actor.equip(this.item);\n      console.log(`${this.actor.name} equips ${this.item.name}.`);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class UnequipItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    console.log(`${this.actor.name} puts ${this.item.name} away.`);\n    this.actor.unequip(this.item);\n    this.actor.addToContainer(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DropItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    console.log(`${this.actor.name} drops ${this.item.name}.`);\n    this.actor.removeFromContainer(this.item);\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class PickupItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    console.log(`${this.actor.name} picks up ${this.item.name}.`);\n    this.actor.addToContainer(this.item);\n    let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DestroySelf extends Base {\n  constructor({processDelay = 0, ...args}) {\n    super({...args});\n    this.processDelay = processDelay\n  }\n  perform() {\n    // console.log(`${this.actor.name} is self-destructing`);\n    this.actor.energy -= this.energyCost;\n    this.actor.destroy();\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class CloneSelf extends Base {\n  constructor({cloneArgs = [], ...args}) {\n    super({...args});\n    this.cloneArgs = cloneArgs;\n  }\n\n  perform() {\n    let success = false;\n    this.actor.energy -= this.energyCost;\n    console.log(`${this.actor.name} is cloning itself`);\n    let clone = cloneDeep(this.actor);\n    clone.game = this.actor.game;\n    clone.id = uuid();\n    this.cloneArgs.forEach((arg) => {\n      console.log(arg);\n      \n      clone[arg.attribute] = arg.value\n    });\n    if (this.game.placeActorOnMap(clone)) {\n      this.game.engine.addActorAsNext(clone);\n      this.game.draw();\n      success = true;\n    };\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Charge extends Base {\n  constructor({chargeAmount, ...args}) {\n    super({...args});\n    this.chargeAmount = chargeAmount;\n  }\n  perform() {\n    console.log(`${this.actor.name} is charging up!`);\n    this.actor.energy -= this.energyCost;\n    this.actor.increaseCharge(this.chargeAmount);\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class Release extends Base {\n  constructor({ chargeCost, ...args }) {\n    super({ ...args });\n    this.chargeCost = chargeCost;\n  }\n  perform() {\n    let success = false;\n    if (this.actor.charge >= this.chargeCost) {\n      console.log(`${this.actor.name} is releasing ${this.chargeCost} volts!`);\n      this.actor.energy -= this.energyCost;\n      this.actor.decreaseCharge(this.chargeCost);\n      success = true;\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Sign extends Base {\n  constructor({ sign, ...args }) {\n    super({ ...args });\n    this.sign = sign;\n  }\n  perform() {\n    console.log(`${this.actor.name} threw a ${this.sign.name} sign.`);\n    this.actor.addSign(this.sign);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SignRelease extends Base {\n  constructor({requiredSequence = [], ...args}) {\n    super({...args});\n    this.requiredSequence = requiredSequence;\n  }\n\n  requiredSequenceIsFulfilled () {\n    let signHistory = this.actor.signHistory.concat();\n    let relevantHistory = signHistory.slice(\n      Math.max(signHistory.length - this.requiredSequence.length, 0)\n    )\n    let result = JSON.stringify(relevantHistory) === JSON.stringify(this.requiredSequence);\n    return result\n  }\n\n  perform() {\n    let success = false;\n    if (this.requiredSequenceIsFulfilled()) {\n      console.log(\n        `${this.actor.name} is releasing the power of ${this.requiredSequence.map(\n          (sign) => sign.type\n        ).join(' and ')}!`\n      );\n      this.actor.energy -= this.energyCost;\n      success = true;\n      this.actor.clearSigns();\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class CursorMove extends Base {\n  constructor({ targetPos, processDelay = 0, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    if (this.game.cursorCanOccupyPosition(this.targetPos)) {\n      let tile = this.game.map[Helper.coordsToString(this.actor.pos)]\n      this.game.map[Helper.coordsToString(this.actor.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.actor.id) }\n      this.actor.pos = this.targetPos\n      this.game.map[Helper.coordsToString(this.targetPos)].entities.push(this.actor);\n      success = true;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceActor extends Base {\n  constructor({ targetPos, entity, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.entity = entity\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (this.game.canOccupyPosition(this.targetPos, this.entity)) {\n      this.entity.pos = this.targetPos;\n      // this.game.engine.actors.push(this.entity);\n      this.game.engine.addActorAsNext(this.entity);\n      success = true;\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItem extends Base {\n  constructor({ targetPos, entity, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.entity = entity\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (this.game.canOccupyPosition(this.targetPos, this.entity)) {\n      this.entity.pos = this.targetPos;\n      success = this.game.placeActorOnMap(this.entity)\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItems extends PlaceItem {\n  constructor({targetPositions = [], ...args}) {\n    super({...args});\n    this.targetPositions = targetPositions\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    console.log('actor ', this.actor.pos);\n    this.targetPositions.forEach((targetPos) => {\n      console.log('target ', targetPos);\n      \n      if (this.game.canOccupyPosition(targetPos, this.entity)) {\n        let clone = cloneDeep(this.entity);\n        clone.game = this.game;\n        clone.id = uuid();\n        clone.pos = targetPos;\n        let placementSuccess = this.game.placeActorOnMap(clone);\n        if (placementSuccess) success = true;\n      }\n    });\n\n    if (success) this.actor.energy -= this.energyCost;\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Move extends Base {\n  constructor({ targetPos, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class MoveMultiple extends Base {\n  constructor({ direction, stepCount, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.move(targetPos)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Shove extends Base {\n  constructor({ targetPos, direction, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos\n    this.direction = direction\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.shove(this.targetPos, this.direction)\n    \n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Tackle extends MoveMultiple {\n  constructor({ direction, stepCount, additionalAttackDamage = 0, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.additionalAttackDamage = additionalAttackDamage;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.shove(targetPos, this.direction)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      success = true;\n    } else {\n      success = true;\n      this.actor.attack(targetPos, this.additionalAttackDamage);\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Attack extends Base {\n  constructor({ targetPos, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) { \n      return { \n        success: true, \n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      } \n    }\n    \n    success = this.actor.attack(this.targetPos);\n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class MultiTargetAttack extends Base {\n  constructor({ targetPositions, processDelay = 25, ...args }) {\n    super({ ...args });\n    this.targetPositions = targetPositions\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    if (!this.actor.entityTypes.includes('ATTACKING')) {\n      return {\n        success: true,\n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      }\n    }\n    this.targetPositions.forEach((targetPos) => {\n      let attackSuccess = this.actor.attack(targetPos);\n      if (attackSuccess) success = true;\n    })\n\n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ThrowProjectile extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    }\n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      let attackSuccess = this.actor.attack(this.targetPos);\n      if (attackSuccess) {\n        alternative = new Action.DestroySelf({\n          game: this.game,\n          actor: this.actor,\n          energyCost: Constant.ENERGY_THRESHOLD,\n          processDelay: 0,\n        });\n      }\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class ThrowProjectileGas extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n    this.processDelay = 0\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    } \n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      this.actor.attack(this.targetPos)\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class CrankEngine extends Base {\n  constructor({ engine, ...args }) {\n    super({ ...args });\n    this.engine = engine;\n  }\n  async perform() {\n    let success = true;\n    let alternative = null;\n\n    console.log(`${this.actor.name} is cranking its engine.`);\n    try {\n      await this.engine.start();\n      this.actor.energy -= this.energyCost;\n    } catch (error) {\n      console.log('CrankEngine');\n      console.log(error);\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n      });\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n","import uuid from 'uuid/v1';\nimport pipe from 'lodash/fp/pipe';\nimport * as Helper from '../helper';\nimport * as Constant from './constants';\nimport * as Action from './actions';\nimport * as Engine from './engine';\nimport { cloneDeep, cloneDeepWith } from 'lodash';\nimport { access } from 'fs';\n\nexport class Entity {\n  constructor({ game = null, passable = false}) {\n    let id = uuid();\n    this.entityTypes = ['Entity']\n    this.id = id;\n    this.game = game;\n    this.passable = passable;\n  }\n}\n\nconst Parent = superclass => class extends superclass {\n  constructor({ children = [], engine = new Engine.CrankEngine({}), ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('PARENT');\n    this.children = children;\n    this.engine = engine;\n    this.isInitialized = false;\n  }\n\n  destroyChild(child) {\n    child.energy = 0;\n    let tile = this.game.map[Helper.coordsToString(child.pos)];\n    this.game.map[Helper.coordsToString(child.pos)].entities = tile.entities.filter((e) => e.id !== child.id);\n    this.engine.actors = this.engine.actors.filter((e) => e.id !== child.id);\n    this.game.draw()\n  }\n\n  canAttack (entity) {\n    const childIds = this.children.map((child) => child.id); \n    return !childIds.includes(entity.id)\n  }\n  \n  initialize() {\n    this.isInitialized = true;\n    this.engine.game = this.game;\n    this.engine.actors = this.children;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this.game;\n      actor.destroy = () => {this.destroyChild(actor)};\n      actor.canAttack = this.canAttack.bind(this);\n      // actor.canAttack = (entity) => {this.canAttack(entity)};\n      this.game.placeActorOnMap(actor)\n      this.engine.addActor(actor);\n      this.game.draw();\n    });\n  }\n\n  getAction(game) {\n    // crank engine one turn\n    if (!this.isInitialized) {\n      this.initialize()\n    }\n\n    let result = new Action.CrankEngine({\n      game,\n      actor: this,\n      engine: this.engine,\n      energyCost: Constant.ENERGY_THRESHOLD,\n      processDelay: 10\n    });\n\n    return result;\n  }\n\n}\n\nconst UI = superclass => class extends superclass {\n  constructor({ initiatedBy = null, ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('UI');\n    this.initiatedBy = initiatedBy;\n    this.active = true;\n  }\n\n  hasEnoughEnergy() {\n    return this.active;\n  }\n}\n\nexport const Attacking = superclass => class extends superclass {\n  constructor({attackDamage = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('ATTACKING')\n    this.attackDamage = attackDamage;\n  }\n\n  getAttackDamage (additional = 0) {\n    return this.attackDamage + additional;\n  }\n\n  canAttack (entity) {\n    return true;\n  }\n\n  attack (targetPos, additional = 0) {\n    let success = false;\n    let tile = this.game.map[Helper.coordsToString(targetPos)]\n    if (!tile) { return success }\n    let targets = Helper.getDestructableEntities(tile.entities);\n    if (targets.length > 0) {\n      let target = targets[0];\n      if (this.canAttack(target)) {\n        let damage = this.getAttackDamage(additional);\n        if (this.entityTypes.includes('EQUIPING')) {\n          this.equipment.forEach((slot) => {\n            if (slot.item) {\n              if (slot.item.entityTypes.includes('ATTACKING')) {\n                damage += slot.item.getAttackDamage();\n              }\n            }\n          });\n        }\n        console.log(`${this.name} does ${damage} to ${target.name}`);\n        target.decreaseDurability(damage);\n        success = true;\n      }\n    }\n\n    return success;\n  }\n}\n\nexport const Equipable = superclass => class extends superclass {\n  constructor({name = 'nameless', equipmentType = Constant.EQUIPMENT_TYPES.HAND, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('EQUIPABLE')\n    this.name = name;\n    this.equipmentType = equipmentType;\n  }\n}\n\nconst Acting = superclass => class extends superclass {\n  constructor({name, actions = [], speed = 100, energy = 0, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('ACTING')\n    this.name = name;\n    this.actions = actions;\n    this.speed = speed;\n    this.energy = speed;\n  }\n\n  getAction() {\n    let action = Helper.getRandomInArray(this.actions)\n    if (action) { return action }\n  }\n\n  gainEnergy(value = this.speed) {\n    this.energy += value;\n  }\n\n  hasEnoughEnergy() {\n    return this.energy > 0;\n  }\n}\n\nconst Rendering = superclass => class extends superclass {\n  constructor({pos = {x: 0, y: 0}, renderer, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('RENDERING')\n    this.pos = pos;\n    this.renderer = {...renderer};\n  }\n\n  getPosition () {\n    return this.pos;\n  }\n\n  move (targetPos) {\n    let success = false;\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      let tile = this.game.map[Helper.coordsToString(this.pos)]\n      this.game.map[Helper.coordsToString(this.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.id) }\n      this.pos = targetPos\n      this.game.map[Helper.coordsToString(targetPos)].entities.push(this);\n      success = true;\n    }\n    return success;\n  }\n\n  shove (targetPos, direction) {\n    let success = false;\n    let targetTile = this.game.map[Helper.coordsToString(targetPos)];\n    if (targetTile) {\n      targetTile.entities.map((entity) => { \n        if (!entity.passable) {\n          let newX = entity.pos.x + direction[0];\n          let newY = entity.pos.y + direction[1];\n          let newPos = { x: newX, y: newY };\n          entity.move(newPos);\n        }\n      });\n    }\n    success = this.move(targetPos);\n    return success;\n  }\n}\n\nconst Containing = superclass => class extends superclass {\n  constructor({container = [], ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CONTAINING')\n    this.container = container;\n  }\n\n  contains (itemType) {\n    let container = this.container;\n    let items = container.filter((item) => item.name === itemType);\n    return items.length > 0 ? items[0] : false;\n  }\n\n  addToContainer (item) {\n    this.container.push(item);\n  }\n  \n  removeFromContainer (item) {\n    this.container = this.container.filter((it) => it.id !== item.id);\n  }\n}\n\nconst Equiping = superclass => class extends superclass {\n  constructor({equipment = Constant.EQUIPMENT_LAYOUTS.human(), ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('EQUIPING')\n    this.equipment = equipment;\n  }\n\n  getItemInSlot (slotName) {\n    let openSlots = this.equipment.filter((slot) => {\n      return (slot.item === null && slot.type === slotName)\n    })\n    if (openSlots.length > 0) { return false; }\n    let slot = this.equipment.find((slot) => slot.type === slotName);\n    if (!slot) { return false; }\n    if (!slot.item) { return false; }\n    return slot.item;\n  }\n\n  equip (slotName, item) {\n    let foundSlot = false;\n    this.equipment = this.equipment.map((slot) => {\n      if (!foundSlot && slot.type === slotName && slot.item === null) {\n        slot.item = item;\n        foundSlot = true;\n      }\n      return slot;\n    })\n  }\n  \n  unequip(item) {\n    this.equipment = this.equipment.map((slot) => {\n      if (slot.item) {\n        if (slot.item.id === item.id) {\n          slot.item = null;\n        }\n      }\n      return slot;\n    })\n  }\n}\n\nconst Charging = superclass => class extends superclass {\n  constructor({charge = 10, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHARGING')\n    this.charge = charge;\n    this.chargeMax = charge;\n  }\n\n  decreaseCharge(value) {\n    this.charge = Math.max(0, this.charge - value);\n  }\n  \n  increaseCharge(value) {\n    this.charge = Math.min(this.chargeMax, this.charge + value);\n  }\n}\n\nconst Signing = superclass => class extends superclass {\n  constructor({...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('SIGNING')\n    this.signHistory = [];\n  }\n\n  addSign(sign) {\n    if (this.signHistory.length >= 4) {\n      this.signHistory.shift();\n    }\n    this.signHistory.push(sign);\n  }\n  \n  clearSigns() {\n    this.signHistory = [];\n  }\n}\n\nconst Playing = superclass => class extends superclass {\n  constructor({keymap = {}, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PLAYING')\n    this.nextAction = null;\n    this.keymap = keymap;\n  }\n\n    setNextAction(action) {\n      this.nextAction = action;\n    }\n\n    getAction() {\n      let action = this.nextAction;\n      this.nextAction = null;\n      return action;\n    }\n}\n\nconst Projecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      this.path.shift();\n    }\n    return result;\n  }\n}\n\n\n\nconst DestructiveProjecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectile({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst GaseousDestructiveProjecting = superclass => class extends superclass {\n  constructor({owner_id = null, path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS_DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n    this.owner_id = owner_id;\n  }\n\n  canAttack (entity) {\n    let success = super.canAttack();\n    if (success) {\n      success = this.owner_id === null || (entity.owner_id !== this.owner_id);\n    }\n    return success\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectileGas({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst Gaseous = superclass => class extends superclass {\n  constructor({\n    isClone = false,\n    cloneCount = 0,\n    clonePattern = Constant.CLONE_PATTERNS.square,\n    ...args\n  }) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS')\n    this.isClone = isClone;\n    this.cloneCount = cloneCount;\n    this.clonePattern = cloneDeep(clonePattern);\n  }\n\n  getAction (game) {\n    let offset = this.clonePattern.positions.find((pos) => !pos.taken);\n    if (!this.isClone && offset) {\n      offset.taken = true\n      let clone = cloneDeepWith(this, (value, key) => {\n        switch (key) {\n          case 'id':\n          case 'game':\n          case 'engine':\n          case 'clones':\n            return null\n            break;\n          default:\n            return undefined\n            break;\n        }\n      });\n      clone.game = game;\n      clone.id = uuid();\n      if (this.hasOwnProperty('pos')) {\n        let referencePos = this.pos\n        clone.pos = {\n          x: referencePos.x + offset.x,\n          y: referencePos.y + offset.y\n        }\n      }\n      if (clone.hasOwnProperty('path')) {\n        clone.path = clone.path.map((pos) => {\n          return {\n            x: pos.x + offset.x,\n            y: pos.y + offset.y\n          }\n        })\n      }\n      clone.isClone = true\n      this.cloneCount += 1\n      game.placeActorOnMap(clone)\n      game.engine.addActor(clone);\n      game.draw();\n    }\n\n    let result = super.getAction(game);\n    return result;\n  }\n}\n\nconst Chasing = superclass => class extends superclass {\n  constructor({targetEntity = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHASING')\n    this.targetEntity = targetEntity;\n  }\n\n  getAction(game) {\n    let path = Helper.calculatePath(game, this.targetEntity.pos, this.pos);\n    let targetPos = path.length > 0 ? path[0] : this.pos;\n\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    return result;\n  }\n}\n\nconst Pushing = superclass => class extends superclass {\n  constructor({ path = false, targetPos = null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('PUSHING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath(game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let direction = [\n      targetPos.x - this.pos.x ,\n      targetPos.y - this.pos.y ,\n    ]\n    if (direction[0] === 0 && direction[1] === 0) {\n      return new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    let result = new Action.Shove({\n      targetPos,\n      direction,\n      game,\n      actor: this,\n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    this.path.shift();\n\n    return result;\n  }\n}\n\nconst Destructable = superclass => class extends superclass {\n  constructor({durability = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DESTRUCTABLE')\n    this.durability = durability;\n  }\n\n  decreaseDurability (value) {\n    this.durability -= value\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n\n  increaseDurability (value) {\n    this.durability += value\n  }\n\n  destroy () {\n    this.energy = 0;\n    let tile = this.game.map[Helper.coordsToString(this.pos)];\n    this.game.map[Helper.coordsToString(this.pos)].entities = tile.entities.filter((e) => e.id !== this.id);\n    this.game.engine.actors = this.game.engine.actors.filter((e) => e.id !== this.id);\n    this.game.engine.removeStatusEffectByActorId(this.id);\n    this.game.draw()\n  }\n}\n\nexport const UI_Actor = pipe(\n  Acting, \n  Rendering, \n  Playing, \n  UI\n)(Entity);\n\nexport const Actor = pipe(\n  Acting, \n  Rendering\n)(Entity);\n\nexport const Wall = pipe(\n  Rendering,\n  Destructable,\n)(Entity);\n\nexport const MovingWall = pipe(\n  Acting,\n  Rendering,\n  Pushing,\n  Destructable,\n)(Entity);\n\nexport const Chaser = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable\n)(Entity);\n\nexport const Bandit = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable,\n  Attacking,\n)(Entity);\n\nexport const Player = pipe(\n  Acting, \n  Rendering, \n  Destructable, \n  Charging, \n  Signing, \n  Containing, \n  Equiping, \n  Attacking, \n  Playing\n)(Entity);\n\nexport const Weapon = pipe(\n  Rendering, \n  Equipable, \n  Attacking\n)(Entity);\n\nexport const DestructiveProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  DestructiveProjecting, \n  Destructable\n)(Entity);\n\nexport const DestructiveCloudProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  GaseousDestructiveProjecting, \n  Destructable, \n  Gaseous\n)(Entity);\n\nexport const DestructiveCloudProjectileV2 = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);","import * as Entity from './entites';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\n\nexport const TYPE = {\n  KUNAI: 'Kunai',\n  SWORD: 'Sword',\n  BARRIER: 'Barrier',\n}\n\nconst createProjectileCloud = ({ \n  engine, \n  actor, \n  targetPos, \n  throwDirection,\n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: actor.pos.x + slot.x + (throwDirection.x * structure.x_offset),\n      y: actor.pos.y + slot.y + (throwDirection.y * structure.y_offset)\n    }\n    \n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileSingularity = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + slot.x + structure.x_offset,\n      y: targetPos.y + slot.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x,\n      y: targetPos.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileBurst = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + structure.x_offset,\n      y: targetPos.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nexport const sandTomb = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileSingularity({\n  engine,\n  actor,\n  targetPos,\n  speed: 100,\n  structureType: 'circle',\n  createProjectile: sandShuriken,\n})\n\nexport const sandBurst = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileBurst({\n  engine,\n  actor,\n  targetPos,\n  speed: 500,\n  structureType: 'circle',\n  createProjectile: sandShuriken,\n})\n\nexport const sandWallPulse = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'smallSquare',\n  createProjectile: movingSandWall,\n})\n\nexport const kunaiCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: kunai,\n})\n\nexport const fireballCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: fireball,\n})\n\nexport const kunai = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '🗡️',\n    color: 'white',\n    background: '',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const movingSandWall = (engine, pos, targetPos) => new Entity.MovingWall({\n  game: engine.game,\n  passable: false,\n  pos: { x: pos.x, y: pos.y },\n  targetPos,\n  renderer: {\n    // character: '>',\n    character: ']',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  // name: TYPE.KUNAI,\n  name: TYPE.BARRIER,\n  durability: 3,\n})\n\nexport const sandShuriken = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireball = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '🔥',\n    color: 'wheat',\n    background: 'tomato',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireballGas = (engine, actor, targetPos) => {\n  return new Entity.DestructiveCloudProjectile({\n    game: engine.game,\n    owner_id: actor ? actor.id : null,\n    targetPos,\n    passable: true,\n    pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n    renderer: {\n      // character: '@',\n      character: '🔥',\n      color: 'wheat',\n      background: 'tomato',\n    },\n    name: TYPE.KUNAI,\n    speed: 100,\n    range: 10,\n    clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n    // clonePattern: Constant.CLONE_PATTERNS.square,\n  })\n}\n\nexport const waterball = (engine, actor, targetPos) => new Entity.DestructiveCloudProjectile({\n  game: engine.game,\n  owner_id: actor ? actor.id : null,\n  targetPos,\n  passable: true,\n  pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n  renderer: {\n    // character: '~',\n    character: '🌊',\n    color: 'silver',\n    background: 'lightslategrey',\n  },\n  name: TYPE.KUNAI,\n  speed: 800,\n  range: 10,\n  clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n  // clonePattern: Constant.CLONE_PATTERNS.square,\n})\n\nexport const sword = (engine) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: '',\n  },\n})\n\nexport const test = (engine, pos) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  pos,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: 'lightsteelblue',\n  },\n})","import * as Constant from './constants';\nimport * as Action from './actions';\nimport * as Helper from '../helper';\nimport * as Entity from './entites';\nimport * as Item from './items';\n\n/******************** Helper ********************/\nconst addAlphabeticallyToKeymap = (keymap, obj) => {\n  let alphabetAllowed = Constant.ALPHABET.filter((letter) => {\n    return !Object.keys(keymap).includes(letter);\n  });\n  keymap[alphabetAllowed[0]] = obj;\n}\n\n/******************** UI ********************/\nexport const moveCursor = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Action.CursorMove({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}\n\nconst throwKunai = (engine, actor) => {\n  let cursor = engine.actors[engine.currentActor];\n  cursor.active = false;\n  let throwDirection = {\n    x: Math.sign(cursor.pos.x - actor.pos.x),\n    y: Math.sign(cursor.pos.y - actor.pos.y),\n  }\n  engine.game.removeActor(cursor);\n  let kunai = actor.contains(Item.TYPE.KUNAI);\n  if (kunai) {\n    kunai.game = engine.game;\n    kunai.pos = { \n      x: actor.pos.x + throwDirection.x,  \n      y: actor.pos.y + throwDirection.y,  \n    };\n    kunai.targetPos = { ...cursor.pos };\n    actor.removeFromContainer(kunai);\n    engine.actors.push(kunai);\n    kunai.createPath(engine.game);\n    engine.game.placeActorsOnMap();\n    engine.game.draw();\n    actor.setNextAction(\n      new Action.Say({\n        message: `I'll get you with this kunai!`,\n        game: engine.game,\n        actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    )\n  } else {\n    console.log('I have no kunais left');\n  }\n}\n\nconst throwKunaiCloud = (engine, actor) => {\n  let cursor = engine.actors[engine.currentActor];\n  cursor.active = false;\n  let throwDirection = {\n    x: Math.sign(cursor.pos.x - actor.pos.x),\n    y: Math.sign(cursor.pos.y - actor.pos.y),\n  }\n  engine.game.removeActor(cursor);\n  let cloud = Item.fireballCloud({\n  // let cloud = Item.kunaiCloud({\n    engine, \n    actor, \n    targetPos: {...cursor.pos},\n    throwDirection,\n  });\n  if (cloud) {\n    cloud.pos = { \n      x: actor.pos.x + throwDirection.x,  \n      y: actor.pos.y + throwDirection.y,  \n    };\n    engine.actors.push(cloud);\n    actor.setNextAction(\n      new Action.Say({\n        message: `I'll get you with these kunai!`,\n        game: engine.game,\n        actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    )\n  } else {\n    console.log('I have no kunais left');\n  }\n}\n\nexport const keymapCursorToThrowItem = (engine, initiatedBy) => {\n  return {\n    w: {\n      activate: () => moveCursor(Constant.DIRECTIONS.N, engine),\n      label: 'move',\n    },\n    d: {\n      activate: () => moveCursor(Constant.DIRECTIONS.E, engine),\n      label: 'move',\n    },\n    s: {\n      activate: () => moveCursor(Constant.DIRECTIONS.S, engine),\n      label: 'move',\n    },\n    a: {\n      activate: () => moveCursor(Constant.DIRECTIONS.W, engine),\n      label: 'move',\n    },\n    t: {\n      activate: () => throwKunaiCloud(engine, initiatedBy),\n      label: 'Throw Cloud',\n    },\n    y: {\n      activate: () => throwKunai(engine, initiatedBy),\n      label: 'Throw Kunai',\n    },\n  };\n}\n\nconst closeInventory = (engine) => {\n  let currentUiActor = engine.actors[engine.currentActor];\n  engine.game.removeActor(currentUiActor);\n  engine.game.visibleInventory = null;\n}\n\nconst closeEquipment = (engine) => {\n  let currentUiActor = engine.actors[engine.currentActor];\n  engine.game.removeActor(currentUiActor);\n  engine.game.visibleEquipment = null;\n}\n\nexport const keymapEquipment = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      activate: () => closeEquipment(engine),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.equipment.filter((slot) => slot.item).map((slot) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to unequip ${slot.item.name}`);\n      initiatedBy.setNextAction(new Action.UnequipItem({\n        item: slot.item,\n        game: engine.game,\n        actor: initiatedBy,\n      }))\n      closeEquipment(engine);\n    }\n    obj['label'] = `Unequip ${slot.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const keymapEquipFromInventory = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n    // e: {\n      activate: () => closeInventory(engine),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.container.map((item, index) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to equip ${item.name}`);\n      initiatedBy.setNextAction(new Action.EquipItemFromContainer({\n        item,\n        game: engine.game,\n        actor: initiatedBy,\n      }))\n      closeInventory(engine);\n    }\n    obj['label'] = `Equip ${item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const keymapDropFromInventory = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n    // g: {\n      activate: () => closeInventory(engine),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.container.map((item, index) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to drop ${item.name}`);\n      initiatedBy.setNextAction(new Action.DropItem({\n        item,\n        game: engine.game,\n        actor: initiatedBy,\n        energyCost: Constant.ENERGY_THRESHOLD\n      }));\n      closeInventory(engine);\n    }\n    obj['label'] = `Drop ${item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\n/******************** PLAYER ********************/\n\nexport const walk = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Action.Move({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}\n\nexport const push = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Action.Shove({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    direction,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}\n\nexport const tackle = (direction, stepCount, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Action.MoveMultiple({\n    direction,\n    stepCount,\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}\n\nexport const sign = (sign, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Action.Sign({\n    sign,\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}\n\nexport const signRelease = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Action.SignRelease({\n    requiredSequence: [\n      Constant.HAND_SIGNS.Power,\n      Constant.HAND_SIGNS.Healing,\n    ],\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}\n\nexport const charge = (engine, chargeAmount) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Action.Charge({\n    chargeAmount,\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}\n\nexport const release = (engine, chargeCost) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Action.Release({\n    chargeCost,\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}\n\nexport const pickupRandom = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let entities = engine.game.map[Helper.coordsToString(actor.pos)].entities.filter((e) => e.id !== actor.id);\n  if (entities.length > 0) {\n    actor.setNextAction(new Action.PickupItem({\n      item: Helper.getRandomInArray(entities),\n      game: engine.game,\n      actor,\n      energyCost: Constant.ENERGY_THRESHOLD\n    }))\n  } else {\n    console.log('nothing to pickup.');\n  }\n}\n\nexport const die = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.destroy();\n}\n\nexport const cloneSelf = (engine, cloneOverrides = []) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Action.CloneSelf({\n    game: engine.game,\n    actor,\n    cloneArgs: cloneOverrides,\n  }))\n}\n\nexport const addActor = (game) => {\n  let targetEntity = game.engine.actors[game.engine.currentActor]\n  let pos = Helper.getRandomPos(game.map).coordinates\n\n  let actor = new Entity.Bandit({\n    targetEntity,\n    pos,\n    renderer: {\n      character: Helper.getRandomInArray(['◉', '⛨']),\n      color: 'white',\n      background: '',\n    },\n    name: 'Ross',\n    game,\n    actions: [],\n    durability: Helper.getRandomInArray([1, 2, 4, 8]),\n    speed: 100,\n  })\n  game.placeActorOnMap(actor)\n  game.engine.addActor(actor);\n  game.draw();\n}\n\nexport const activateThrowCursor = (engine) => {\n  let game = engine.game;\n  let currentActor = engine.actors[game.engine.currentActor]\n  let pos = currentActor.pos;\n\n  let cursor = new Entity.UI_Actor({\n    initiatedBy: currentActor,\n    pos,\n    renderer: {\n      character: '█',\n      color: 'white',\n      background: '',\n    },\n    name: 'Cursor',\n    game,\n    keymap: keymapCursorToThrowItem(engine, currentActor),\n  })\n  engine.addActorAsPrevious(cursor);\n  engine.setActorToPrevious(cursor);\n  engine.game.placeActorOnMap(cursor)\n  engine.game.draw()\n}\n\nexport const activateInventory = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleInventory = currentActor.container; \n\n  let ui = new Entity.UI_Actor({\n    initiatedBy: currentActor,\n    pos: {...currentActor.pos},\n    renderer: {\n      character: 'I',\n      color: 'white',\n      background: '',\n    },\n    name: 'Inventory',\n    game: engine.game,\n    // keymap: keymapEquipFromInventory(engine, currentActor),\n  })\n  engine.addActorAsPrevious(ui);\n  engine.setActorToPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapEquipFromInventory(engine, currentActor);\n}\n\nexport const activateEquipment = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleEquipment = currentActor.equipment; \n\n  let ui = new Entity.UI_Actor({\n    initiatedBy: currentActor,\n    pos: {...currentActor.pos},\n    renderer: {\n      character: 'E',\n      color: 'white',\n      background: '',\n    },\n    name: 'Equipment',\n    game: engine.game,\n  })\n  engine.addActorAsPrevious(ui);\n  engine.setActorToPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapEquipment(engine, currentActor);\n}\n\nexport const activateDrop = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleInventory = currentActor.container; \n\n  let ui = new Entity.UI_Actor({\n    initiatedBy: currentActor,\n    pos: {...currentActor.pos},\n    renderer: {\n      character: 'D',\n      color: 'white',\n      background: '',\n    },\n    name: 'Drop',\n    game: engine.game,\n  })\n  engine.addActorAsPrevious(ui);\n  engine.setActorToPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapDropFromInventory(engine, currentActor);\n}\n\nexport const player = (engine) => {\n  return {\n    w: {\n      activate: () => walk(Constant.DIRECTIONS.N, engine),\n      label: 'walk',\n    },\n    d: {\n      activate: () => walk(Constant.DIRECTIONS.E, engine),\n      label: 'walk',\n    },\n    s: {\n      activate: () => walk(Constant.DIRECTIONS.S, engine),\n      label: 'walk',\n    },\n    a: {\n      activate: () => walk(Constant.DIRECTIONS.W, engine),\n      label: 'walk',\n    },\n    i: {\n      activate: () => activateInventory(engine),\n      label: 'Open Inventory',\n    },\n    q: {\n      activate: () => activateEquipment(engine),\n      label: 'Open Equipment',\n    },\n    k: {\n      activate: () => cloneSelf(engine),\n      label: 'Clone Self',\n    },\n    g: {\n      activate: () => activateDrop(engine),\n      label: 'Drop Item',\n    },\n    p: {\n      activate: () => pickupRandom(engine),\n      label: 'Pickup',\n    },\n    t: {\n      activate: () => activateThrowCursor(engine),\n      label: 'Throw',\n    },\n    y: {\n      activate: () => addActor(engine.game),\n      label: 'Add NPC',\n    },\n    c: {\n      activate: () => charge(engine, 1),\n      label: 'Charge',\n    },\n    '1': {\n      activate: () => sign(Constant.HAND_SIGNS.Power, engine),\n      label: 'Sign - Power',\n    },\n    '2': {\n      activate: () => sign(Constant.HAND_SIGNS.Healing, engine),\n      label: 'Sign - Healing',\n    },\n    '3': {\n      activate: () => sign(Constant.HAND_SIGNS.Absolute, engine),\n      label: 'Sign - Absolution',\n    },\n    '4': {\n      activate: () => {\n        let actor = engine.actors[engine.currentActor];\n        actor.setNextAction(new Action.SayManyThings({\n          game: engine.game,\n          actor,\n          messages: ['I say one thing.', 'then another.'],\n        }))\n      },\n      label: 'Talk',\n    },\n    r: {\n      activate: () => signRelease(engine),\n      label: 'Release',\n    },\n  };\n}\n","export class Base {\n  constructor({ \n    game, \n    actor, \n    name = 'Effect', \n    lifespan = 100,\n    stepInterval = 100,\n    allowDuplicates = true,\n    onStart = () => null,\n    onStep = () => null,\n    onStop = () => null,\n  }) {\n    this.game = game\n    this.actor = actor\n    this.name = name\n    this.lifespan = lifespan\n    this.timeToLive = lifespan\n    this.stepInterval = stepInterval\n    this.allowDuplicates = allowDuplicates\n    this.timeSinceLastStep = 0;\n    this.onStart = onStart\n    this.onStep = onStep\n    this.onStop = onStop\n  }\n}","// import deps\nimport * as Keymap from '../keymaps';\nimport * as Item from '../items';\nimport * as Entity from '../entites';\nimport * as Constant from '../constants';\nimport * as Action from '../actions';\nimport * as StatusEffect from '../statusEffects';\nimport { cloneDeep } from 'lodash';\n\n// create class\nexport default function (engine) {\n  // ------------ SAND WALL ----------------------\n  const createSandWall = (engine, pos) => new Entity.Wall({\n    game: engine.game,\n    passable: false,\n    pos: { x: pos.x, y: pos.y },\n    renderer: {\n      // character: '>',\n      character: '✦️',\n      color: '#A89078',\n      background: '#D8C0A8',\n    },\n    name: Item.TYPE.BARRIER,\n    durability: 3,\n  })\n\n  const sandWall = (direction, engine) => {\n    let actor = engine.actors[engine.currentActor];\n    let targetPositions = [];\n    let directionKey = Constant.getDirectionKey(direction);\n    switch (directionKey) {\n      case 'N':\n        targetPositions = targetPositions.concat([\n          {\n            x: actor.pos.x - 1,\n            y: actor.pos.y - 1,\n          },\n          {\n            x: actor.pos.x,\n            y: actor.pos.y - 1,\n          },\n          {\n            x: actor.pos.x + 1,\n            y: actor.pos.y - 1,\n          },\n        ]);\n        break;\n      case 'S':\n        targetPositions = targetPositions.concat([\n          {\n            x: actor.pos.x - 1,\n            y: actor.pos.y + 1,\n          },\n          {\n            x: actor.pos.x,\n            y: actor.pos.y + 1,\n          },\n          {\n            x: actor.pos.x + 1,\n            y: actor.pos.y + 1,\n          },\n        ]);\n        break;\n      case 'E':\n        targetPositions = targetPositions.concat([\n          {\n            x: actor.pos.x + 1,\n            y: actor.pos.y - 1,\n          },\n          {\n            x: actor.pos.x + 1,\n            y: actor.pos.y,\n          },\n          {\n            x: actor.pos.x + 1,\n            y: actor.pos.y + 1,\n          },\n        ]);\n        break;\n      case 'W':\n        targetPositions = targetPositions.concat([\n          {\n            x: actor.pos.x - 1,\n            y: actor.pos.y - 1,\n          },\n          {\n            x: actor.pos.x - 1,\n            y: actor.pos.y,\n          },\n          {\n            x: actor.pos.x - 1,\n            y: actor.pos.y + 1,\n          },\n        ]);\n        break;\n      default:\n        break;\n    }\n    actor.setNextAction(new Action.PlaceItems({\n      targetPositions,\n      entity: createSandWall(engine, { ...actor.pos }),\n      game: engine.game,\n      actor,\n      energyCost: Constant.ENERGY_THRESHOLD\n    }))\n  }\n\n  const keymapSandWall = (engine, initiatedBy, previousKeymap) => {\n    const goToPreviousKeymap = () => initiatedBy.keymap = previousKeymap;\n    return {\n      Escape: {\n        activate: goToPreviousKeymap,\n        label: 'Close',\n      },\n      w: {\n        activate: () => {\n          sandWall(Constant.DIRECTIONS.N, engine);\n          goToPreviousKeymap();\n        },\n        label: 'activate N',\n      },\n      d: {\n        activate: () => {\n          sandWall(Constant.DIRECTIONS.E, engine);\n          goToPreviousKeymap();\n        },\n        label: 'activate E',\n      },\n      s: {\n        activate: () => {\n          sandWall(Constant.DIRECTIONS.S, engine);\n          goToPreviousKeymap();\n        },\n        label: 'activate S',\n      },\n      a: {\n        activate: () => {\n          sandWall(Constant.DIRECTIONS.W, engine);\n          goToPreviousKeymap();\n        },\n        label: 'activate W',\n      },\n    };\n  }\n  \n  const activateSandWall = (engine) => {\n    let currentActor = engine.actors[engine.currentActor]\n    currentActor.keymap = keymapSandWall(engine, currentActor, { ...currentActor.keymap });\n  }\n\n  // ------------ SAND PULSE ----------------------\n  const triggerSandPulse = (direction, actor, engine) => {\n    let cloud = Item.sandWallPulse({\n      engine,\n      actor,\n      throwDirection: {\n        x: direction[0],\n        y: direction[1],\n      },\n      targetPos: { \n        x: actor.pos.x + (direction[0] * 10),\n        y: actor.pos.y + (direction[1] * 10),\n      },\n    });\n    \n    if (cloud) {\n      actor.setNextAction(\n        new Action.PlaceActor({\n          targetPos: {\n            x: actor.pos.x + direction[0],\n            y: actor.pos.y + direction[1],\n          },\n          entity: cloud,\n          game: engine.game,\n          actor,\n          energyCost: Constant.ENERGY_THRESHOLD\n        })\n      )\n    }\n  }\n\n  const keymapSandPulse = (engine, initiatedBy, previousKeymap) => {\n    const goToPreviousKeymap = () => initiatedBy.keymap = previousKeymap;\n    return {\n      Escape: {\n        activate: goToPreviousKeymap,\n        label: 'Close',\n      },\n      w: {\n        activate: () => {\n          triggerSandPulse(Constant.DIRECTIONS.N, initiatedBy, engine);\n          goToPreviousKeymap();\n        },\n        label: 'activate N',\n      },\n      d: {\n        activate: () => {\n          triggerSandPulse(Constant.DIRECTIONS.E, initiatedBy, engine);\n          goToPreviousKeymap();\n        },\n        label: 'activate E',\n      },\n      s: {\n        activate: () => {\n          triggerSandPulse(Constant.DIRECTIONS.S, initiatedBy, engine);\n          goToPreviousKeymap();\n        },\n        label: 'activate S',\n      },\n      a: {\n        activate: () => {\n          triggerSandPulse(Constant.DIRECTIONS.W, initiatedBy, engine);\n          goToPreviousKeymap();\n        },\n        label: 'activate W',\n      },\n    };\n  }\n\n  const activateSandPulse = (engine) => {\n    let currentActor = engine.actors[engine.currentActor]\n    currentActor.keymap = keymapSandPulse(engine, currentActor, { ...currentActor.keymap });\n  }\n\n  // ------------ SAND TOMB ----------------------\n  const triggerSandTomb = (engine, actor) => {\n    let cursor = engine.actors[engine.currentActor];\n    // let cloud = Item.sandBurst({\n    let cloud = Item.sandTomb({\n      engine,\n      actor,\n      targetPos: { ...cursor.pos },\n    });\n    if (cloud) {\n      actor.setNextAction(\n        new Action.PlaceActor({\n          targetPos: {...cursor.pos},\n          entity: cloud,\n          game: engine.game,\n          actor,\n          energyCost: Constant.ENERGY_THRESHOLD\n        })\n      )\n    }\n  }\n\n  const keymapSandTomb = (engine, initiatedBy, previousKeymap) => {\n    const goToPreviousKeymap = () => {\n      let cursor = engine.actors[engine.currentActor];\n      cursor.active = false;\n      engine.game.removeActor(cursor);\n    };\n    return {\n      Escape: {\n        activate: goToPreviousKeymap,\n        label: 'Close',\n      },\n      w: {\n        activate: () => Keymap.moveCursor(Constant.DIRECTIONS.N, engine),\n        label: 'move',\n      },\n      d: {\n        activate: () => Keymap.moveCursor(Constant.DIRECTIONS.E, engine),\n        label: 'move',\n      },\n      s: {\n        activate: () => Keymap.moveCursor(Constant.DIRECTIONS.S, engine),\n        label: 'move',\n      },\n      a: {\n        activate: () => Keymap.moveCursor(Constant.DIRECTIONS.W, engine),\n        label: 'move',\n      },\n      k: {\n        activate: () => {\n          triggerSandTomb(engine, initiatedBy);\n          goToPreviousKeymap();\n        },\n        label: 'activate'\n      },\n    };\n  }\n\n  const activateSandTomb = (engine) => {\n    let currentActor = engine.actors[engine.currentActor]\n    let game = engine.game;\n    let pos = currentActor.pos;\n\n    let cursor = new Entity.UI_Actor({\n      initiatedBy: currentActor,\n      pos,\n      renderer: {\n        character: '█',\n        color: 'white',\n        background: '',\n      },\n      name: 'Cursor',\n      game,\n      keymap: keymapSandTomb(engine, currentActor, { ...currentActor.keymap }),\n    })\n    engine.addActorAsPrevious(cursor);\n    engine.setActorToPrevious(cursor);\n    game.placeActorOnMap(cursor)\n    game.draw()\n  }\n\n  // ------------ SAND SKIN ----------------------\n\n  const sandSkin = (engine, durabilityBuff = 1) => {\n    let currentActor = engine.actors[engine.currentActor];\n    let effect = new StatusEffect.Base({\n      game: engine.game,\n      actor: currentActor,\n      name: 'Sand Skin',\n      lifespan: 1000,\n      stepInterval: 100,\n      allowDuplicates: false,\n      onStart: () => {\n        currentActor.durability += durabilityBuff;\n        console.log(`${currentActor.name} was enveloped in hardened sand.`);\n        currentActor.renderer.background = '#A89078'\n      },\n      onStop: () => {\n        currentActor.durability = Math.max(1, currentActor.durability - durabilityBuff);\n        console.log(`${currentActor.name}'s hardened sand skin fell away.`);\n        currentActor.renderer.background = '#603030';\n      },\n    });\n    currentActor.setNextAction(new Action.AddStatusEffect({\n      effect,\n      actor: currentActor,\n      game: engine.game,\n    }));\n  }\n\n  // ------------ SAND CLONE ----------------------\n  const sandClone = (engine) => {\n    let actor = engine.actors[engine.currentActor];\n    let cloneKeymap = cloneDeep(actor.keymap);\n    delete cloneKeymap['j'];\n    delete cloneKeymap['k'];\n    delete cloneKeymap['l'];\n    let cloneArgs = [\n      {\n        attribute: 'renderer',\n        value: { ...actor.renderer, background: '#A89078' }\n      },\n      {\n        attribute: 'keymap',\n        value: cloneKeymap\n      }\n    ];\n    actor.setNextAction(new Action.CloneSelf({\n      game: engine.game,\n      actor,\n      cloneArgs,\n    }))\n  }\n\n  // define keymap\n  const keymap = (engine) => {\n    return {\n      w: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.N, engine),\n        label: 'walk',\n      },\n      d: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.E, engine),\n        label: 'walk',\n      },\n      s: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.S, engine),\n        label: 'walk',\n      },\n      a: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.W, engine),\n        label: 'walk',\n      },\n      l: {\n        activate: () => sandClone(engine),\n        label: 'Sand Clone',\n      },\n      k: {\n        activate: () => activateSandTomb(engine),\n        label: 'Sand Tomb',\n      },\n      j: {\n        activate: () => sandSkin(engine, 10),\n        label: 'Sand Skin',\n      },\n      h: {\n        activate: () => activateSandWall(engine),\n        label: 'Sand Wall',\n      },\n      o: {\n        activate: () => activateSandPulse(engine),\n        label: 'Sand Pulse',\n      },\n      i: {\n        activate: () => Keymap.activateInventory(engine),\n        label: 'Open Inventory',\n      },\n      q: {\n        activate: () => Keymap.activateEquipment(engine),\n        label: 'Open Equipment',\n      },\n      g: {\n        activate: () => Keymap.activateDrop(engine),\n        label: 'Drop Item',\n      },\n      p: {\n        activate: () => Keymap.pickupRandom(engine),\n        label: 'Pickup',\n      },\n      t: {\n        activate: () => Keymap.activateThrowCursor(engine),\n        label: 'Throw',\n      },\n      // DEV KEYS\n      y: {\n        activate: () => Keymap.addActor(engine.game),\n        label: 'Add NPC',\n      },\n    };\n  }\n\n\n  let actor = new Entity.Player({\n    pos: { x: 23, y: 7 },\n    renderer: {\n      character: 'G',\n      color: '#F0D8C0',\n      background: '#603030',\n    },\n    name: 'Gaara',\n    actions: [],\n    speed: 200,\n    durability: 1,\n    keymap: keymap(engine),\n  })\n\n  actor.container = [\n    ...Array(10).fill('').map(() => Item.sandShuriken(engine, { ...actor.pos })),\n    // ...Array(10).fill('').map(() => Item.fireballGas(engine, actor)),\n    // ...Array(10).fill('').map(() => Item.movingSandWall(engine, { ...actor.pos })),\n  ]\n\n  return actor;\n}\n// export instance","import React from 'react';\nimport { SCREENS } from './constants';\nimport * as Engine from '../engine';\nimport * as Game from '../game';\nimport Information from '../UI/Information';\nimport Equipment from '../UI/Equipment';\nimport Inventory from '../UI/Inventory';\nimport KeymapUI from '../UI/Keymap';\nimport RockLee from '../Characters/RockLee';\nimport NarutoUzumaki from '../Characters/NarutoUzumaki';\nimport Gaara from '../Characters/Gaara';\n\nlet ENGINE = new Engine.Engine({});\n\n// let actor = NarutoUzumaki(ENGINE);\n// let actor = RockLee(ENGINE);\nlet actor = Gaara(ENGINE);\nENGINE.actors.push(actor)\n\nlet game = new Game.Game({ engine: ENGINE })\n\nclass Level extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      game: game,\n    };\n    this.presserRef = React.createRef();\n  }\n\n  async componentDidMount() {\n    game.initialize(this.presserRef)\n    game.updateReact = (newGameState) => { this.setState({game: newGameState}) }\n    ENGINE.start()\n  }\n\n  render() {\n    let currentActor = this.state.game.engine.actors[this.state.game.engine.currentActor];\n    let data = [\n      {\n        label: 'Engine: Current Actor Index',\n        value: this.state.game.engine.currentActor,\n      },\n      {\n        label: 'Current Actor',\n        value: currentActor.name,\n      },\n      {\n        label: 'Current Actor: Speed / Energy',\n        value: `${currentActor.speed} / ${currentActor.energy}`,\n      },\n    ];\n\n    return (\n      <div className=\"Level\">\n        <div className='flow-text'>Chunin Exams</div>\n        <button className='btn' onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}>Quit</button>\n        <div className='row'>\n          <Information data={data} />\n          <Equipment equipment={this.state.game.visibleEquipment} />\n          <Inventory inventory={this.state.game.visibleInventory} />\n          <KeymapUI keymap={this.state.game.visibleKeymap} />\n          {Game.DisplayElement(this.presserRef, Game.handleKeyPress, ENGINE)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Level;\n","import React from 'react';\nimport { SCREENS } from './constants';\n\nclass Title extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"Title\">\n        <div\n          style={{\n            width: '100vw',\n            height: '100vh',\n            backgroundColor: '#e2e2e2',\n          }}\n        >\n          <div class='flow-text'>Hidden Leaf RL</div>\n          <button class='btn' onClick={() => this.props.setActiveScreen(SCREENS.LEVEL)}>Play</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Title;","import React from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport { SCREENS } from './Screen/constants';\nimport Level from './Screen/Level';\nimport Title from './Screen/Title';\n\nclass Nystrum extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      activeScreen: SCREENS.LEVEL,\n    };\n  }\n\n  setActiveScreen (activeScreen) {\n    this.setState({activeScreen})\n  }\n\n  getActiveScreen () {\n    const titleScreen = <Title \n      key={SCREENS.TITLE} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n    />\n    const levelScreen = <Level \n      key={SCREENS.LEVEL} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n    />\n\n    switch (this.state.activeScreen) {\n      case SCREENS.TITLE:\n        return titleScreen\n      case SCREENS.LEVEL:\n        return levelScreen\n      default:\n        return titleScreen\n    }\n  }\n\n  render() {\n    const activeScreen = this.getActiveScreen();\n    return (\n      <div className=\"Nystrum\">\n        <ReactCSSTransitionGroup\n          transitionName=\"fade\"\n          transitionAppear={true}\n          transitionEnter={true}\n          transitionLeave={true}\n          transitionAppearTimeout={500}\n          transitionEnterTimeout={500}\n          transitionLeaveTimeout={300}\n        >\n          { activeScreen }\n        </ReactCSSTransitionGroup>\n      </div>\n    );\n  }\n}\n\nexport default Nystrum;\n","import * as ROT from 'rot-js';\n\nexport const TILE_KEY = () => {\n  return {\n    'GROUND': {\n      background: '#974',\n      foreground: '#aaa',\n      character: '.',\n      passable: true,\n    }\n  }\n}\n\n// RENDERING\n\nexport const DRAW = (map, display) => {\n  for (let key in map) {\n    let parts = key.split(\",\");\n    let x = parseInt(parts[0]);\n    let y = parseInt(parts[1]);\n    let tile = map[key];\n    let { character, foreground, background } = TILE_KEY()[tile.type]\n    if (tile.entities.length > 0) {\n      let entity = tile.entities[tile.entities.length - 1]\n      character = entity.components.renderer.character\n      foreground = entity.components.renderer.color\n      if (entity.components.renderer.background) {\n        background = entity.components.renderer.background\n      }\n    }\n    display.draw(x, y, character, foreground, background);\n  }\n}\n\n// END RENDERING\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const getImpassableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('impasse') && !e.components.impasse.passable)\n}\n\nexport const getDestructableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('destructible'))\n}\n\nexport const delay = (timeDelayed = 100) => {\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const exampleEngine = () => {\n  let scheduler = new ROT.Scheduler.Simple();\n  let engine = new ROT.Engine(scheduler);\n  let output = [];\n  /* sample actor: pauses the execution when dead */\n  let actor = {\n    lives: 3,\n    act: function () {\n      let done = null;\n      let promise = {\n        then: function (cb) { done = cb; }\n      }\n\n      output.push(\".\");\n      // SHOW(output.join(\"\"));\n      console.log(output.join(\"\"));\n\n      this.lives--;\n\n      /* if alive, wait for 500ms for next turn */\n      if (this.lives) {\n        setTimeout(function () { done(); }, 500);\n      }\n\n      return promise;\n    }\n  }\n  scheduler.add(actor, true);\n  engine.start();\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}","import * as Helper from '../lib/helper';\n\nexport const createEntity = (id = null, name = 'Empty', components = {}, world) => {\n  let entity = {\n    id,\n    name,\n    components,\n    world,\n    sendEvent: (target, eventType, parameters) => sendEvent(target, eventType, parameters, world),\n  };\n  return entity\n}\n\nexport const sendEvent = async (target = null, eventType = null, parameters = null, world = null) => {\n  let success = false;\n  for (let key in target.components) {\n    let component = target.components[key]\n    if (component.hasOwnProperty(eventType)) {\n      console.log('SUCCESSFUL EVENT: ', eventType)\n      success = true\n      if (eventType !== 'PREPARE_RENDER') {\n        await Helper.delay();\n      }\n      component[eventType]({ ...parameters, self: target, component: component });\n      Helper.DRAW(world.map, world.display)\n    }\n  }\n  if (!success) {\n    console.log('FAILED EVENT')\n  }\n};","import * as Helper from '../lib/helper';\n\nexport const receiver = (pos) => {\n  return {\n    responded: false,\n    RECIEVE: (parameters) => {\n      let { self, component, message } = parameters\n      console.log(message, pos.x, pos.y)\n      if (!component.responded) {\n        component.responded = true\n        self.sendEvent(parameters.sender, 'hello', 'RECIEVE', { message: 'copy', sender: self })\n      }\n    }\n  }\n}\n\nexport const impasse = (passable = false) => {\n  return {\n    passable,\n    MAKE_PASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = true;\n    },\n    MAKE_IMPASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = false;\n    }\n  }\n}\n\nexport const body = (world, pos = { x: 0, y: 0 }) => {\n  if (world) {\n    return {\n      pos,\n      MOVE: (parameters) => {\n        let { self, component, currentPos, targetPos } = parameters\n        if (world.canOccupy(world.map, targetPos)) {\n          component.pos = targetPos\n          let tile = world.map[Helper.coordsToString(currentPos)]\n          world.map[Helper.coordsToString(currentPos)] = {...tile, entities: []}\n          self.sendEvent(self, 'PREPARE_RENDER')\n          // Helper.DRAW(world.map, world.display)\n        } else {\n          console.log('can\\'t move there')\n        }\n      }\n    }\n  }\n  console.log('No world to occupy');\n  return {}\n}\n\nexport const destructible = (world, durability = 1) => {\n  return {\n    durability,\n    DECREASE_DURABILITY: (parameters) => {\n      let { self, component, value } = parameters;\n      component.durability -= value\n      if (component.durability <= 0) {\n        self.sendEvent(self, 'DESTROY')\n      }\n    },\n    INCREASE_DURABILITY: (parameters) => {\n      let { component, value } = parameters;\n      component.durability += value\n    },\n    DESTROY: (parameters) => {\n      let { self, component, value } = parameters;\n      let tile = world.map[Helper.coordsToString(self.components.body.pos)];\n      world.map[Helper.coordsToString(self.components.body.pos)].entities = tile.entities.filter((e) => e.id !== self.id);\n      // self.sendEvent(self, 'PREPARE_RENDER')\n      // Helper.DRAW(world.map, world.display)\n    }\n  }\n}\n\nexport const attack = (damage = 1) => {\n  return {\n    damage,\n  }\n}\n\nexport const throwable = (world) => {\n  return {\n    THROW: (parameters) => {\n      let { self, component, direction } = parameters;\n      // if next tile is passable\n        // send move action to self\n        // send throw action to self\n      // else\n        // send decrease_durability to entity next in tile\n        // send decrease_durability to self\n      let currentPos = self.components.body.pos;\n      let nextPos = { x: currentPos.x + direction.x, y: currentPos.y + direction.y }\n      let nextTile = world.map[Helper.coordsToString(nextPos)];\n      if (world.canOccupy(world.map, nextPos)) { // change to check for target entity\n        self.sendEvent(\n          self, 'MOVE', {\n            currentPos: currentPos,\n            targetPos: nextPos\n          }\n        )\n        self.sendEvent(self, 'THROW', {direction});\n      } else {\n        if (world.map.hasOwnProperty(Helper.coordsToString(nextPos))) {\n          let impassable_and_destructable_entities = Helper.getDestructableEntities(Helper.getImpassableEntities(nextTile.entities))\n          if (impassable_and_destructable_entities.length > 0) {\n            self.sendEvent(impassable_and_destructable_entities[0], 'DECREASE_DURABILITY', { value: 1 });\n          }\n        }\n        self.sendEvent(self, 'DECREASE_DURABILITY', { value: 1 });\n      }\n    },\n  }\n}\n\nexport const renderer = (world, character = '', color = 'white', background = false) => {\n  return {\n    character,\n    color,\n    background,\n    PREPARE_RENDER: (parameters) => {\n      let { self } = parameters\n      if (self.components.hasOwnProperty('body')) {\n        world.map[Helper.coordsToString(self.components.body.pos)].entities.push(self)\n      }\n    }\n  }\n}","import React from 'react';\nimport '../App.css';\nimport * as ROT from 'rot-js';\nimport * as Entity from './lib/entity'\nimport * as Helper from './lib/helper'\nimport * as Components from './components/index'\n\nconst SHOW = (canvas) => {\n  let d = document.getElementById('display')\n  d.appendChild(canvas)\n}\n\nconst CREATE_LEVEL = (world) => {\n  let digger = new ROT.Map.Arena();\n  let freeCells = [];\n  let digCallback = function (x, y, value) {\n    if (value) { return; }\n    let key = x + \",\" + y;\n    world.map[key] = {\n      type: 'GROUND',\n      entities: [],\n    };\n    freeCells.push(key);\n  }\n  digger.create(digCallback.bind(this));\n}\n\nlet scheduler = new ROT.Scheduler.Simple()\nlet engine = new ROT.Engine(scheduler)\n\nlet world = {\n  canAct: true,\n  scheduler,\n  engine,\n  map: {},\n  display: new ROT.Display({ fontSize: 24, bg: '#099' }),\n  canOccupy: (map, pos) => {\n    if (map.hasOwnProperty(Helper.coordsToString(pos))) {\n      let tile = map[Helper.coordsToString(pos)];\n      if (Helper.TILE_KEY()[tile.type].passable && Helper.getImpassableEntities(tile.entities).length === 0) {\n        return true\n      }\n    } else {\n      return false\n    }\n  },\n}\n\nlet naruto = {\n  ...Entity.createEntity(1, 'Naruto', {\n    reciever: Components.receiver({ x: 10, y: 30 }),\n    body: Components.body(world, { x: 19, y: 21 }),\n    renderer: Components.renderer(world, 'N', 'orange', 'black'),\n  },\n    world,\n  ),\n}\n\nlet box = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 21 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box2 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 19 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box3 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 17 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet kunai = {\n  ...Entity.createEntity(3, 'Kunai', {\n    body: Components.body(world, { x: 20, y: 21 }),\n    renderer: Components.renderer(world, '<>', 'black'),\n    destructible: Components.destructible(world),\n    attack: Components.attack(),\n    throwable: Components.throwable(world),\n  },\n    world,\n  )\n}\n\nclass Original extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.presserRef = React.createRef();\n  }\n\n  handleKeyPress = (event, world, entity) => {\n    let keymap = {\n      w: 0,\n      d: 1,\n      s: 2,\n      a: 3,\n    };\n\n    let code = event.key;\n    let dir = ROT.DIRS[4][keymap[code]];\n    if (code === 't') {\n      kunai.sendEvent(kunai, 'MOVE', {\n        currentPos: kunai.components.body.pos,\n        targetPos: {\n          x: entity.components.body.pos.x + 1,\n          y: entity.components.body.pos.y,\n        },\n      })\n      return kunai.sendEvent(kunai, 'THROW', { direction: { x: 1, y: 0 } })\n    }\n    if (!(code in keymap)) { return; }\n    let newX = entity.components.body.pos.x + dir[0];\n    let newY = entity.components.body.pos.y + dir[1];\n\n    entity.sendEvent(\n      entity, 'MOVE', {\n        currentPos: entity.components.body.pos,\n        targetPos: {\n          x: newX,\n          y: newY\n        }\n      }\n    )\n\n    return;\n    // return Helper.DRAW(world.map, world.display)\n\n  }\n\n  componentDidMount() {\n    ROT.RNG.setSeed(7);\n    SHOW(world.display.getContainer());\n    CREATE_LEVEL(world);\n    naruto.sendEvent(naruto, 'PREPARE_RENDER')\n    // kunai.sendEvent(kunai, 'PREPARE_RENDER')\n    box.sendEvent(box, 'PREPARE_RENDER')\n    box2.sendEvent(box2, 'PREPARE_RENDER')\n    box3.sendEvent(box3, 'PREPARE_RENDER')\n    Helper.DRAW(world.map, world.display)\n    this.presserRef.current.focus();\n  }\n\n  render() {\n    return (\n      <div className=\"App\" ref={this.presserRef} onKeyDown={(event) => this.handleKeyPress(event, world, naruto)} tabIndex='0'>\n        <div id='display'></div>\n      </div>\n    );\n  }\n}\n\nexport default Original;\n","import React from 'react';\nimport './App.css';\nimport Nystrum from './nystrum/Nystrum';\nimport Original from './original/Original';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <Nystrum />\n        {/* <Original /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}