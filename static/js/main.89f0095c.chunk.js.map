{"version":3,"sources":["nystrum/Screen/constants.js","helper.js","nystrum/engine.js","nystrum/constants.js","nystrum/Entities/helper.js","nystrum/actions.js","nystrum/entites.js","nystrum/Keymap/KeyActions/addActor.js","nystrum/game.js","nystrum/UI/Button.js","nystrum/UI/Information.js","nystrum/UI/Equipment.js","nystrum/UI/Inventory.js","nystrum/UI/Keymap.js","nystrum/items.js","nystrum/Keymap/helper.js","nystrum/Keymap/KeyActions/activateDropItem.js","nystrum/Keymap/KeyActions/activateEquipment.js","nystrum/Keymap/KeyActions/activateInventory.js","nystrum/Keymap/KeyActions/moveCursor.js","nystrum/Keymap/KeyActions/activateThrow.js","nystrum/Keymap/KeyActions/walk.js","nystrum/Keymap/KeyActions/pickupRandom.js","nystrum/Keymap/KeyActions/activateFlyingLotus.js","nystrum/statusEffects.js","nystrum/Keymap/KeyActions/drunkenFist.js","nystrum/Characters/Gaara.js","nystrum/Screen/Level.js","nystrum/Characters/RockLee.js","nystrum/Keymap/KeyActions/removeWeights.js","nystrum/Keymap/KeyActions/leafWhirlwind.js","nystrum/Keymap/KeyActions/openInnerGate.js","nystrum/Screen/Title.js","nystrum/Nystrum.js","original/lib/helper.js","original/lib/entity.js","original/components/index.js","original/Original.js","App.js","serviceWorker.js","index.js"],"names":["SCREENS","TITLE","LEVEL","delay","timeDelayed","Promise","resolve","setTimeout","getRandomInArray","array","Math","floor","random","length","coordsToString","coords","x","y","calculatePath","game","targetPos","currentPos","topology","map","isPassable","type","astar","ROT","AStar","path","compute","push","slice","calculatePathWithRange","range","getRandomPos","keys","Object","key","split","coordinates","parseInt","text","getDestructableEntities","entites","filter","entity","hasOwnProperty","getGranularity","radius","pow","getPointsOnCircumference","centerX","centerY","r","n","list","i","round","cos","PI","sin","Engine","statusEffects","actors","currentActor","isRunning","this","actor","gainEnergy","speed","hasEnoughEnergy","action","getAction","result","perform","draw","Helper","processDelay","success","alternative","acting","timePassed","energyCost","processActionFX","processStatusEffects","process","keymap","visibleKeymap","updateMode","updateReact","newEffect","allowDuplicates","effect","id","name","console","log","onStart","onStop","actorId","lifespan","timeToLive","forEach","timeSinceLastStep","stepInterval","onStep","removeDeadStatusEffects","particles","particle","placeActorOnMap","removeActorFromMap","update","removeDeadParticles","splice","CrankEngine","TILE_KEY","background","character","passable","animation","foreground","DIRECTIONS","N","S","E","W","EQUIPMENT_TYPES","HEAD","TORSO","BACK","HAND","FEET","EQUIPMENT_LAYOUTS","human","item","CLONE_PATTERNS","verticalLine","x_offset","y_offset","positions","taken","smallSquare","square","bigSquare","circle","PARTICLE_TEMPLATES","default","renderer","color","fail","leaf","PARTICLE_TYPE","directional","ALPHABET","destroyEntity","energy","pos","tile","entities","e","engine","removeStatusEffectByActorId","Base","particleTemplate","Constant","life","direction","Particle","AddStatusEffect","args","addStatusEffect","addParticle","sign","Say","message","EquipItemFromContainer","equipmentType","itemInSlot","getItemInSlot","addToContainer","unequip","removeFromContainer","equip","UnequipItem","DropItem","PickupItem","it","DestroySelf","destroy","CursorMove","cursorCanOccupyPosition","Move","move","Action","MoveMultiple","stepCount","setNextAction","Shove","shove","Tackle","additionalAttackDamage","attack","Attack","entityTypes","includes","MultiTargetAttack","targetPositions","particlePath","particlePos","attackSuccess","ThrowProjectile","move_result","shift","ThrowProjectileGas","start","Entity","uuid","Parent","superclass","children","concat","isInitialized","child","destroyChild","canAttack","bind","addActor","initialize","Attacking","attackDamage","additional","targets","target","damage","getAttackDamage","equipment","slot","decreaseDurability","Acting","actions","value","Rendering","canOccupyPosition","targetTile","newPos","Playing","nextAction","Chasing","targetEntity","Destructable","durability","onDestroy","UI_Actor","pipe","initiatedBy","active","Bandit","createPath","Player","charge","chargeMax","max","min","signHistory","container","itemType","items","slotName","find","foundSlot","currentGate","gates","damageBuff","speedBuff","durabilityDebuff","nextGate","nextGateIndex","findIndex","gate","cloneLimit","clones","clone","index","c","super__destroy","cloneArgs","cloneDeep","destroyClone","arg","attribute","addActorAsNext","DestructiveProjectile","DestructiveCloudProjectileV2","owner_id","isClone","cloneCount","clonePattern","offset","cloneDeepWith","referencePos","step","nextPos","getNextPos","GAME_MODE_TYPES","WAVE","Game","display","width","fontSize","bg","tileKey","mode","data","level","addWaveEnemy","nextModeLevel","initializeMode","setModeLevel","ac","digger","Arena","freeCells","create","currentFrame","ceil","randomlyPlaceActorsOnMap","hasImpassableEntity","document","getElementById","appendChild","getContainer","parts","isPlaced","placeActorsOnMap","presserRef","show","createLevel","current","focus","handleKeyPress","event","code","Button","props","onClick","className","Information","label","React","Component","Equipment","Inventory","inventory","Keymap","entries","TYPE","createProjectileCloud","throwDirection","structureType","createProjectile","structure","position","targetPosition","kunai","fireball","addAlphabeticallyToKeymap","obj","alphabetAllowed","letter","deactivateUIKeymap","visibleUIKey","currentUiActor","removeActor","activateDropItem","visibleInventory","ui","addActorAsPrevious","setActorToPrevious","Escape","activate","keymapDropFromInventory","activateEquipment","visibleEquipment","keymapEquipment","activateInventory","keymapEquipFromInventory","moveCursor","newX","newY","throwKunaiCloud","cursor","cloud","Item","keymapCursorToThrowItem","w","d","s","a","t","contains","throwKunai","activateThrow","walk","pickupRandom","flyingLotus","activateFlyingLotus","previousKeymap","ENERGY_THRESHOLD","goToPreviousKeymap","keymapFlyingLotus","drunkWalk","originalDirection","count","ENGINE","l","k","speedBoost","damageDebuff","StatusEffect","j","h","o","setNextGate","nextGateToLabel","getNextGate","q","g","p","Array","fill","RockLee","Level","state","createRef","newGameState","setState","setActiveScreen","ref","onKeyDown","tabIndex","Title","style","height","backgroundColor","class","Nystrum","activeScreen","titleScreen","levelScreen","getActiveScreen","transitionName","transitionAppear","transitionEnter","transitionLeave","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","DRAW","components","getImpassableEntities","impasse","createEntity","world","sendEvent","eventType","parameters","component","self","MAKE_PASSABLE","MAKE_IMPASSABLE","body","MOVE","canOccupy","destructible","DECREASE_DURABILITY","INCREASE_DURABILITY","DESTROY","PREPARE_RENDER","scheduler","Simple","canAct","naruto","reciever","responded","RECIEVE","sender","Components","box","box2","box3","throwable","THROW","nextTile","impassable_and_destructable_entities","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.89f0095c.chunk.js","sourcesContent":["export const SCREENS = {\n  TITLE: 0,\n  LEVEL: 1,\n}","import * as ROT from 'rot-js';\n\nexport const delay = (timeDelayed = 100) => {\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport const getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const calculatePath = (game, targetPos, currentPos, topology = 4) => {\n  let map = game.map\n  let isPassable = function (x, y) {\n    if (map[x + \",\" + y]) {\n      return (map[x + \",\" + y].type === 'GROUND');\n    } else {\n      return false\n    }\n  }\n  let astar = new ROT.Path.AStar(targetPos.x, targetPos.y, isPassable, { topology });\n  let path = [];\n  astar.compute(currentPos.x, currentPos.y, function (x, y) {\n    path.push({ x, y })\n  });\n\n  return path.slice(1);\n}\n\nexport const calculatePathWithRange = (game, targetPos, currentPos, topology, range) => {\n  let path = calculatePath(game, targetPos, currentPos, topology);\n  return path.slice(0, range + 1);\n}\n\nexport const getRandomPos = (map) => {\n  let keys = Object.keys(map);\n  let key = getRandomInArray(keys).split(',');\n  let pos = { x: parseInt(key[0]), y: parseInt(key[1])}\n  return {coordinates: pos, text: key}\n}\n\nexport const getDestructableEntities = (entites) => {\n  return entites.filter((entity) => entity.hasOwnProperty('durability'));\n}\n\nconst getGranularity = (radius) => {\n  let result = (2 / 3) * (Math.pow(radius, 3) - (9 * Math.pow(radius, 2)) + (32 * radius) - 18)\n  return result\n}\n\nexport const getPointsOnCircumference = (centerX = 0, centerY = 0, r = 3) => {\n  const n = getGranularity(r);\n  let list = [];\n  for (let i = 0; i < n; i++) {\n    let x = Math.round(centerX + (Math.cos(2 * Math.PI / n * i) * r))\n    let y = Math.round(centerY + (Math.sin(2 * Math.PI / n * i) * r))\n    list.push({ x, y });\n  }\n  return list\n}\n","import * as Helper from '../helper';\n\nexport class Engine {\n  constructor({\n    statusEffects = [],\n    actors = [],\n    currentActor = 0,\n    isRunning = false,\n    game = null,\n  }) {\n    this.statusEffects = statusEffects;\n    this.actors = actors;\n    this.currentActor = currentActor;\n    this.isRunning = isRunning;\n    this.game = game;\n  }\n\n  async processV1 () { // a turn-based system using speed and round-robin\n    let actor = this.actors[this.currentActor]\n    actor.gainEnergy(actor.speed);\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      while (true) {\n        let result = action.perform();\n        this.game.draw();\n        await Helper.delay(action.processDelay);\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    return true\n  }\n\n  async process() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      let timePassed = 0;\n      if (actor.hasEnoughEnergy()) {\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        timePassed += action.energyCost;\n        while (true) {\n          let result = await action.perform();\n          if (!await this.processActionFX(action)) {\n              await Helper.delay(action.processDelay);\n              this.game.draw();\n          }\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n        this.processStatusEffects(timePassed);\n      } else {\n        actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    return true\n  }\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.process();\n    }\n    let actor = this.actors[this.currentActor]\n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    this.game.updateMode();\n    await this.game.updateReact(this.game);\n  }\n  \n  stop() {\n    this.isRunning = false;\n  }\n\n  addStatusEffect(newEffect) {\n    if (!newEffect.allowDuplicates) {\n      if (this.statusEffects.filter((effect) => (\n        effect.actor.id === newEffect.actor.id &&\n        effect.name === newEffect.name\n      )).length > 0) {\n        console.log(`${newEffect.name} cannot be applied twice to ${newEffect.actor.name}`);\n        return false;\n      };\n    }\n    newEffect.onStart();\n    this.statusEffects.push(newEffect)\n    return true;\n  }\n\n  removeStatusEffectById (id) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.id !== id) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n  \n  removeStatusEffectByActorId (actorId) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.actor.id !== actorId) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n\n  removeDeadStatusEffects() {\n    this.statusEffects = this.statusEffects.filter((effect) =>{\n      if (effect.lifespan >= 0 && effect.timeToLive <= 0) {\n        effect.onStop();\n        return false;\n      }\n      return true;\n    });\n  }\n\n  processStatusEffects (timePassed) {\n    this.statusEffects.forEach((effect) => {\n      effect.timeSinceLastStep += timePassed;\n      effect.timeToLive -= timePassed;\n      if (effect.timeSinceLastStep >= effect.stepInterval) {\n        effect.onStep();\n        effect.timeSinceLastStep = 0;\n      } \n    });\n    this.removeDeadStatusEffects();\n  }\n\n  async processActionFX (action) {\n    // EASE IN\n    // let time = .8\n    // let nextT = (t) => t *= t; \n    // EASE OUT\n    // let time = .03\n    // let nextT = (t) => t * (2 - t); \n    // EASE IN OUT QUAD\n    // let time = .4\n    // let nextT = (t) => t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t; \n    // EASE IN CUBIC\n    // let time = .8\n    // let nextT = (t) => t * t * t; \n    // EASE OUT CUBIC\n    // let time = .001\n    // let nextT = (t) => (--t) * t * t + 1; \n    if (action.particles.length) {\n      while (action.particles.length > 0) {\n        action.particles.forEach((particle) => {\n          this.game.placeActorOnMap(particle);\n        })\n        this.game.draw();\n        // await Helper.delay(time * 100);\n        // await Helper.delay(time * action.processDelay);\n        await Helper.delay(action.processDelay);\n        action.particles.forEach((particle) => {\n          this.game.removeActorFromMap(particle);\n          particle.update(1);\n\n        })\n        this.game.draw();\n        action.removeDeadParticles();\n        // time = nextT(time);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  addActor (entity) {\n    this.actors.push(entity);\n  }\n\n  addActorAsPrevious (entity) {\n    this.actors.splice(this.currentActor, 0, entity);\n  }\n\n  addActorAsNext (entity) {\n    this.actors.splice(this.currentActor + 1, 0, entity);\n  }\n\n  setActorToPrevious (entity) {\n    this.currentActor -= 1;\n    if (this.currentActor <= -1) this.currentActor = this.actors.length - 1;\n  }\n\n  setActorToNext (entity) {\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n  }\n\n}\n\n\nexport class CrankEngine extends Engine {\n  async process() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (actor.hasEnoughEnergy()) {\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        while (true) {\n          this.game.draw();\n          let result = await action.perform();\n          await Helper.delay(action.processDelay);\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n      } else {\n        // actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    // this.currentActor = (this.currentActor + 1) % this.actors.length;\n    this.currentActor += 1;\n    if (this.currentActor + 1 >= this.actors.length) {\n      this.currentActor = 0;\n      this.actors.forEach((actor) => actor.gainEnergy(actor.speed));\n      return false;\n    }\n    return true\n  }\n}","import * as Helper from '../helper'\n\nexport const ENERGY_THRESHOLD = 100;\n\nexport const TILE_KEY = {\n  'GROUND': {\n    background: '#424242',\n    character: '',\n    passable: true,\n  },\n  'WATER': {\n    animation: [\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#8aa', character: '▒', passable: false, },\n      { background: '#424242', foreground: '#8aa', character: '▓', passable: false, },\n    ],\n    background: '#9dc3d3',\n    character: '░',\n    passable: false,\n  },\n  'WIN': {\n    background: 'white',\n    foreground: 'black',\n    character: 'W',\n    passable: true,\n  }\n}\n\nexport const HAND_SIGNS = {\n  Power: {\n    type: 'Power',\n    name: 'Rin',\n    description: 'Strength of mind, body, spirit',\n  },\n  Energy: {\n    type: 'Energy',\n    name: 'Pyo',\n    description: 'energy direction',\n  },\n  Harmony: {\n    type: 'Harmony',\n    name: 'To',\n    description: 'one- ness with the universe or self',\n  },\n  Healing: {\n    type: 'Healing',\n    name: 'Sha',\n    description: 'of self and others',\n  },\n  Intuition: {\n    type: 'Intuition',\n    name: 'Kai',\n    description: 'premonition of danger, feeling others intent',\n  },\n  Awareness: {\n    type: 'Awareness',\n    name: 'Jin',\n    description: 'feeling thoughts of others, perhaps hiding your own',\n  },\n  Dimension: {\n    type: 'Dimension',\n    name: 'Retsu',\n    description: 'control of time and space',\n  },\n  Creation: {\n    type: 'Creation',\n    name: 'Zai',\n    description: 'understanding nature',\n  },\n  Absolute: {\n    type: 'Absolute',\n    name: 'Zen',\n    description: 'enlightenment',\n  }, \n}\n\nexport const DIRECTIONS = {\n  N: [0, -1],\n  S: [0, 1],\n  E: [1, 0],\n  W: [-1, 0],\n}\n\nexport const getDirectionKey = (direction) => {\n  let directionString = `${direction}`;\n  let keys = Object.keys(DIRECTIONS);\n  let result = false\n  keys.forEach((key) => {\n    if (`${DIRECTIONS[key]}` === directionString) {\n      result = key\n    }\n  })\n  return result\n}\n\nexport const EQUIPMENT_TYPES = {\n  HEAD: 'HEAD',\n  TORSO: 'TORSO',\n  BACK: 'BACK',\n  HAND: 'HAND',\n  FEET: 'FEET',\n}\n\nexport const EQUIPMENT_LAYOUTS = {\n  human: () => {\n    return [\n      {type: EQUIPMENT_TYPES.HEAD, name: 'head', item: null},\n      {type: EQUIPMENT_TYPES.TORSO, name: 'torso', item: null},\n      {type: EQUIPMENT_TYPES.BACK, name: 'back', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'left_hand', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'right_hand', item: null},\n      {type: EQUIPMENT_TYPES.FEET, name: 'feet', item: null},\n    ]\n  }\n}\n\nexport const CLONE_PATTERNS = {\n  verticalLine: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n    ]\n  },\n  smallSquare: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n    ]\n  },\n  square: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n    ]\n  },\n  bigSquare: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 2, y: 2, taken: false, },\n      { x: 2, y: 0, taken: false, },\n      { x: 2, y: -2, taken: false, },\n      { x: 0, y: -2, taken: false, },\n      { x: -2, y: -2, taken: false, },\n      { x: -2, y: 0, taken: false, },\n      { x: -2, y: 2, taken: false, },\n    ],\n  },\n  circle: {\n    x_offset: 0,\n    y_offset: 0,\n    positions: Helper.getPointsOnCircumference(0, 0, 2)\n  },\n}\n\nexport const PARTICLE_TEMPLATES = {\n  default: {\n    renderer: {\n      character: '*',\n      color: 'black',\n      background: 'white',\n    }\n  },\n  fail: {\n    renderer: {\n      character: 'x',\n      color: 'black',\n      background: 'red',\n    }\n  },\n  leaf: {\n    renderer: {\n      character: '✤',\n      color: '#36635b',\n      background: '#F0D8C0',\n    }\n  },\n}\n\nexport const PARTICLE_TYPE = {\n  directional: 0,\n  path: 1,\n}\n\nexport const ALPHABET = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];","import * as Helper from '../../helper';\n\nexport const destroyEntity = (entity) => {\n  entity.energy = 0;\n  if (entity.pos) {\n    let tile = entity.game.map[Helper.coordsToString(entity.pos)];\n    entity.game.map[Helper.coordsToString(entity.pos)].entities = tile.entities.filter((e) => e.id !== entity.id);\n  }\n  entity.game.engine.actors = entity.game.engine.actors.filter((e) => e.id !== entity.id);\n  entity.game.engine.removeStatusEffectByActorId(entity.id);\n  entity.game.draw()\n  entity.game.engine.currentActor = entity.game.engine.currentActor % entity.game.engine.actors.length; \n\n}","import * as Helper from '../helper';\nimport * as Action from './actions';\nimport * as Constant from './constants';\nimport { destroyEntity } from './Entities/helper';\nimport { cloneDeep } from 'lodash';\nimport uuid from 'uuid/v1';\nimport { Particle } from './entites';\n\nexport class Base {\n  constructor({\n    game, \n    actor, \n    energyCost = 100, \n    processDelay = 50, \n    particles = [], \n    particleTemplate = Constant.PARTICLE_TEMPLATES.default,\n  }) {\n    this.actor = actor\n    this.game = game\n    this.energyCost = energyCost\n    this.processDelay = processDelay\n    this.particles = particles\n    this.particleTemplate = particleTemplate\n  }\n\n  addParticle(\n    life, \n    pos, \n    direction, \n    renderer = {...this.particleTemplate.renderer}, \n    type = Constant.PARTICLE_TYPE.directional, \n    path = null\n  ) {\n    let particle = new Particle({\n      game: this.game,\n      name: 'particle',\n      passable: true,\n      life,\n      pos,\n      direction,\n      energy: 100,\n      renderer,\n      type,\n      path,\n    })\n    this.particles.push(particle);\n  }\n\n  removeDeadParticles() {\n    this.particles = this.particles.filter((particle) => particle.life > 0);\n  }\n\n\n  perform() {\n    console.log(`${this.actor.name} performs`)\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n}\n\nexport class AddStatusEffect extends Base {\n  constructor({ effect, processDelay = 0, ...args }) {\n    super({ ...args });\n    this.effect = effect\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = this.game.engine.addStatusEffect(this.effect);\n    let positions = Helper.getPointsOnCircumference(this.actor.pos.x, this.actor.pos.y, 2);\n    positions.forEach((pos) => {\n      this.addParticle(\n        5, \n        {...pos}, \n        {\n          x: Math.sign(pos.x - this.actor.pos.x), \n          y: Math.sign(pos.y - this.actor.pos.y)\n        },\n      )\n    })\n    if (success) this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Say extends Base {\n  constructor({ message, processDelay = 50, ...args}) {\n    super({...args});\n    this.message = message\n    this.processDelay = processDelay\n  }\n  perform() {\n    console.log(`${this.actor.name} says ${this.message}`);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SayManyThings extends Base {\n  constructor({ messages, processDelay = 50, ...args}) {\n    super({...args});\n    this.messages = messages\n    this.processDelay = processDelay\n  }\n  perform() {\n    let message = this.messages.shift();\n    if (message) {\n      console.log(`${this.actor.name} says ${message}`);\n      this.actor.energy -= this.energyCost;\n    }\n    if (this.messages.length) {\n      this.actor.setNextAction(this);\n    }\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class EquipItemFromContainer extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.actor.addToContainer(itemInSlot);\n        this.actor.unequip(itemInSlot);\n      }\n      this.actor.removeFromContainer(this.item);\n      this.actor.equip(this.item.equipmentType, this.item);\n      console.log(`${this.actor.name} equips ${this.item.name}.`);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class EquipItemFromTile extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(itemInSlot);\n      }\n\n      let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n      this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n      \n      this.actor.equip(this.item);\n      console.log(`${this.actor.name} equips ${this.item.name}.`);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class UnequipItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    console.log(`${this.actor.name} puts ${this.item.name} away.`);\n    this.actor.unequip(this.item);\n    this.actor.addToContainer(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DropItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    console.log(`${this.actor.name} drops ${this.item.name}.`);\n    this.actor.removeFromContainer(this.item);\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class PickupItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    console.log(`${this.actor.name} picks up ${this.item.name}.`);\n    this.actor.addToContainer(this.item);\n    let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DestroySelf extends Base {\n  constructor({processDelay = 0, ...args}) {\n    super({...args});\n    this.processDelay = processDelay\n  }\n  perform() {\n    // console.log(`${this.actor.name} is self-destructing`);\n    this.actor.energy -= this.energyCost;\n    this.actor.destroy();\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class CloneSelf extends Base {\n  constructor({cloneArgs = [], ...args}) {\n    super({...args});\n    this.cloneArgs = cloneArgs;\n  }\n\n  perform() {\n    let success = false;\n    if (this.actor.createClone(this.cloneArgs)) {\n      success = true;\n      this.actor.energy -= this.energyCost;\n      console.log(`${this.actor.name} is cloning itself`);\n    }\n    // let clone = cloneDeep(this.actor);\n    // clone.game = this.actor.game;\n    // clone.id = uuid();\n    // this.cloneArgs.forEach((arg) => {\n    //   console.log(arg);\n      \n    //   clone[arg.attribute] = arg.value\n    // });\n    // if (this.game.placeActorOnMap(clone)) {\n    //   this.game.engine.addActorAsNext(clone);\n    //   this.game.draw();\n    //   success = true;\n    // };\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Charge extends Base {\n  constructor({chargeAmount, ...args}) {\n    super({...args});\n    this.chargeAmount = chargeAmount;\n  }\n  perform() {\n    console.log(`${this.actor.name} is charging up!`);\n    this.actor.energy -= this.energyCost;\n    this.actor.increaseCharge(this.chargeAmount);\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class Release extends Base {\n  constructor({ chargeCost, ...args }) {\n    super({ ...args });\n    this.chargeCost = chargeCost;\n  }\n  perform() {\n    let success = false;\n    if (this.actor.charge >= this.chargeCost) {\n      console.log(`${this.actor.name} is releasing ${this.chargeCost} volts!`);\n      this.actor.energy -= this.energyCost;\n      this.actor.decreaseCharge(this.chargeCost);\n      success = true;\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Sign extends Base {\n  constructor({ sign, ...args }) {\n    super({ ...args });\n    this.sign = sign;\n  }\n  perform() {\n    console.log(`${this.actor.name} threw a ${this.sign.name} sign.`);\n    this.actor.addSign(this.sign);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SignRelease extends Base {\n  constructor({requiredSequence = [], ...args}) {\n    super({...args});\n    this.requiredSequence = requiredSequence;\n  }\n\n  requiredSequenceIsFulfilled () {\n    let signHistory = this.actor.signHistory.concat();\n    let relevantHistory = signHistory.slice(\n      Math.max(signHistory.length - this.requiredSequence.length, 0)\n    )\n    let result = JSON.stringify(relevantHistory) === JSON.stringify(this.requiredSequence);\n    return result\n  }\n\n  perform() {\n    let success = false;\n    if (this.requiredSequenceIsFulfilled()) {\n      console.log(\n        `${this.actor.name} is releasing the power of ${this.requiredSequence.map(\n          (sign) => sign.type\n        ).join(' and ')}!`\n      );\n      this.actor.energy -= this.energyCost;\n      success = true;\n      this.actor.clearSigns();\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class CursorMove extends Base {\n  constructor({ targetPos, processDelay = 0, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    if (this.game.cursorCanOccupyPosition(this.targetPos)) {\n      let tile = this.game.map[Helper.coordsToString(this.actor.pos)]\n      this.game.map[Helper.coordsToString(this.actor.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.actor.id) }\n      this.actor.pos = this.targetPos\n      this.game.map[Helper.coordsToString(this.targetPos)].entities.push(this.actor);\n      success = true;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ParticleMove extends CursorMove {\n  constructor({...args}) {\n    super({...args})\n  }\n\n  perform () {\n    this.actor.energy -= this.energyCost;\n    if (this.actor.energy <= 0) {\n      this.actor.destroy();\n      return { success: false }\n    } \n    return super.perform();\n  }\n}\n\nexport class PlaceActor extends Base {\n  constructor({ targetPos, entity, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.entity = entity\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (this.game.canOccupyPosition(this.targetPos, this.entity)) {\n      this.entity.pos = this.targetPos;\n      // this.game.engine.actors.push(this.entity);\n      this.game.engine.addActorAsNext(this.entity);\n      success = true;\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItem extends Base {\n  constructor({ targetPos, entity, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.entity = entity\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (this.game.canOccupyPosition(this.targetPos, this.entity)) {\n      this.entity.pos = this.targetPos;\n      success = this.game.placeActorOnMap(this.entity)\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItems extends PlaceItem {\n  constructor({targetPositions = [], ...args}) {\n    super({...args});\n    this.targetPositions = targetPositions\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    console.log('actor ', this.actor.pos);\n    this.targetPositions.forEach((targetPos) => {\n      console.log('target ', targetPos);\n      \n      if (this.game.canOccupyPosition(targetPos, this.entity)) {\n        let clone = cloneDeep(this.entity);\n        clone.game = this.game;\n        clone.id = uuid();\n        clone.pos = targetPos;\n        let placementSuccess = this.game.placeActorOnMap(clone);\n        if (placementSuccess) success = true;\n      }\n    });\n\n    if (success) this.actor.energy -= this.energyCost;\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Move extends Base {\n  constructor({ targetPos, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class MoveMultiple extends Base {\n  constructor({ direction, stepCount, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.move(targetPos)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Shove extends Base {\n  constructor({ targetPos, direction, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos\n    this.direction = direction\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.shove(this.targetPos, this.direction)\n    \n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Tackle extends MoveMultiple {\n  constructor({ direction, stepCount, additionalAttackDamage = 0, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.additionalAttackDamage = additionalAttackDamage;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.shove(targetPos, this.direction)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      for (let i = 0; i < 3; i++) {\n        this.addParticle(\n          1,\n          {\n            x: this.actor.pos.x - (this.direction[0] * i),\n            y: this.actor.pos.y - (this.direction[1] * i),\n          },\n          { x: 0, y: 0 }\n        )\n      }\n      success = true;\n    } else {\n      success = true;\n      this.actor.attack(targetPos, this.additionalAttackDamage);\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Attack extends Base {\n  constructor({ targetPos, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) { \n      return { \n        success: true, \n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      } \n    }\n    \n    success = this.actor.attack(this.targetPos);\n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class MultiTargetAttack extends Base {\n  constructor({ targetPositions, processDelay = 25, ...args }) {\n    super({ ...args });\n    this.targetPositions = targetPositions\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) {\n      return {\n        success: true,\n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      }\n    }\n\n    let particlePath = [];\n    let particlePos = { x: this.actor.pos.x, y: this.actor.pos.y };\n    let renderer = this.particleTemplate.renderer;\n    this.targetPositions.forEach((targetPos) => {\n      let attackSuccess = this.actor.attack(targetPos);\n      particlePath.push(targetPos);\n      if (attackSuccess) success = true\n    })\n    this.addParticle(\n      particlePath.length + 1, \n      particlePos, \n      null, \n      renderer, \n      Constant.PARTICLE_TYPE.path, \n      particlePath\n    )\n    \n    if (success) { \n      this.actor.energy -= this.energyCost; \n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ThrowProjectile extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    }\n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      let attackSuccess = this.actor.attack(this.targetPos);\n      if (attackSuccess) {\n        alternative = new Action.DestroySelf({\n          game: this.game,\n          actor: this.actor,\n          energyCost: Constant.ENERGY_THRESHOLD,\n          processDelay: 0,\n        });\n      }\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class ThrowProjectileGas extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n    this.processDelay = 0\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    } \n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      this.actor.attack(this.targetPos)\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class CrankEngine extends Base {\n  constructor({ engine, ...args }) {\n    super({ ...args });\n    this.engine = engine;\n  }\n  async perform() {\n    let success = true;\n    let alternative = null;\n\n    console.log(`${this.actor.name} is cranking its engine.`);\n    try {\n      await this.engine.start();\n      this.actor.energy -= this.energyCost;\n    } catch (error) {\n      console.log('CrankEngine');\n      console.log(error);\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n      });\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n","import uuid from 'uuid/v1';\nimport pipe from 'lodash/fp/pipe';\nimport * as Helper from '../helper';\nimport { destroyEntity } from './Entities/helper';\nimport * as Constant from './constants';\nimport * as Action from './actions';\nimport * as Engine from './engine';\nimport { cloneDeep, cloneDeepWith } from 'lodash';\n\nexport class Entity {\n  constructor({ game = null, passable = false}) {\n    let id = uuid();\n    this.entityTypes = ['Entity']\n    this.id = id;\n    this.game = game;\n    this.passable = passable;\n  }\n}\n\nconst Parent = superclass => class extends superclass {\n  constructor({ children = [], engine = new Engine.CrankEngine({}), ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('PARENT');\n    this.children = children;\n    this.engine = engine;\n    this.isInitialized = false;\n  }\n\n  destroyChild(child) {\n    child.energy = 0;\n    let tile = this.game.map[Helper.coordsToString(child.pos)];\n    this.game.map[Helper.coordsToString(child.pos)].entities = tile.entities.filter((e) => e.id !== child.id);\n    this.engine.actors = this.engine.actors.filter((e) => e.id !== child.id);\n    this.game.draw()\n  }\n\n  canAttack (entity) {\n    const childIds = this.children.map((child) => child.id); \n    return !childIds.includes(entity.id)\n  }\n  \n  initialize() {\n    this.isInitialized = true;\n    this.engine.game = this.game;\n    this.engine.actors = this.children;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this.game;\n      actor.destroy = () => {this.destroyChild(actor)};\n      actor.canAttack = this.canAttack.bind(this);\n      // actor.canAttack = (entity) => {this.canAttack(entity)};\n      this.game.placeActorOnMap(actor)\n      this.engine.addActor(actor);\n      this.game.draw();\n    });\n  }\n\n  getAction(game) {\n    // crank engine one turn\n    if (!this.isInitialized) {\n      this.initialize()\n    }\n\n    let result = new Action.CrankEngine({\n      game,\n      actor: this,\n      engine: this.engine,\n      energyCost: Constant.ENERGY_THRESHOLD,\n      processDelay: 10\n    });\n\n    return result;\n  }\n\n}\n\nconst HasInnerGates = superclass => class extends superclass {\n  constructor({ currentGate = null, gates = [], ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('HAS_INNER_GATES');\n    this.currentGate = currentGate;\n    this.gates = [\n      {\n        name: 'Gate of Opening',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n      },\n      {\n        name: 'Gate of Healing',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n      },\n      {\n        name: 'Gate of Life',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n      },\n      {\n        name: 'Gate of Pain',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n      },\n      {\n        name: 'Gate of Limit',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n      },\n    ];\n  }\n\n  setNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n      this.currentGate = { ...nextGate };\n    } else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      console.log('next gate index ', nextGateIndex);\n\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n        this.currentGate = { ...nextGate };\n      }\n    }\n    return nextGate;\n  }\n\n  getNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n    } else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      console.log('next gate index ', nextGateIndex);\n\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n      }\n    }\n    return nextGate;\n  }\n}\n\nconst UI = superclass => class extends superclass {\n  constructor({ initiatedBy = null, ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('UI');\n    this.initiatedBy = initiatedBy;\n    this.active = true;\n  }\n\n  hasEnoughEnergy() {\n    return this.active;\n  }\n}\n\nexport const Attacking = superclass => class extends superclass {\n  constructor({attackDamage = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('ATTACKING')\n    this.attackDamage = attackDamage;\n  }\n\n  getAttackDamage (additional = 0) {\n    return this.attackDamage + additional;\n  }\n\n  canAttack (entity) {\n    return true;\n  }\n\n  attack (targetPos, additional = 0) {\n    let success = false;\n    let tile = this.game.map[Helper.coordsToString(targetPos)]\n    if (!tile) { return success }\n    let targets = Helper.getDestructableEntities(tile.entities);\n    if (targets.length > 0) {\n      let target = targets[0];\n      if (this.canAttack(target)) {\n        let damage = this.getAttackDamage(additional);\n        if (this.entityTypes.includes('EQUIPING')) {\n          this.equipment.forEach((slot) => {\n            if (slot.item) {\n              if (slot.item.entityTypes.includes('ATTACKING')) {\n                damage += slot.item.getAttackDamage();\n              }\n            }\n          });\n        }\n        console.log(`${this.name} does ${damage} to ${target.name}`);\n        target.decreaseDurability(damage);\n        success = true;\n      }\n    }\n\n    return success;\n  }\n}\n\nexport const Equipable = superclass => class extends superclass {\n  constructor({name = 'nameless', equipmentType = Constant.EQUIPMENT_TYPES.HAND, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('EQUIPABLE')\n    this.name = name;\n    this.equipmentType = equipmentType;\n  }\n}\n\nconst Acting = superclass => class extends superclass {\n  constructor({name, actions = [], speed = 100, energy = 0, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('ACTING')\n    this.name = name;\n    this.actions = actions;\n    this.speed = speed;\n    this.energy = speed;\n  }\n\n  getAction() {\n    let action = Helper.getRandomInArray(this.actions)\n    if (action) { return action }\n  }\n\n  gainEnergy(value = this.speed) {\n    this.energy += value;\n  }\n\n  hasEnoughEnergy() {\n    return this.energy > 0;\n  }\n}\n\nconst Rendering = superclass => class extends superclass {\n  constructor({pos = {x: 0, y: 0}, renderer, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('RENDERING')\n    this.pos = pos;\n    this.renderer = {...renderer};\n  }\n\n  getPosition () {\n    return this.pos;\n  }\n\n  move (targetPos) {\n    let success = false;\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      let tile = this.game.map[Helper.coordsToString(this.pos)]\n      this.game.map[Helper.coordsToString(this.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.id) }\n      this.pos = targetPos\n      this.game.map[Helper.coordsToString(targetPos)].entities.push(this);\n      success = true;\n    }\n    return success;\n  }\n\n  shove (targetPos, direction) {\n    let success = false;\n    let targetTile = this.game.map[Helper.coordsToString(targetPos)];\n    if (targetTile) {\n      targetTile.entities.map((entity) => { \n        if (!entity.passable) {\n          let newX = entity.pos.x + direction[0];\n          let newY = entity.pos.y + direction[1];\n          let newPos = { x: newX, y: newY };\n          entity.move(newPos);\n        }\n      });\n    }\n    success = this.move(targetPos);\n    return success;\n  }\n}\n\nconst Containing = superclass => class extends superclass {\n  constructor({container = [], ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CONTAINING')\n    this.container = container;\n  }\n\n  contains (itemType) {\n    let container = this.container;\n    let items = container.filter((item) => item.name === itemType);\n    return items.length > 0 ? items[0] : false;\n  }\n\n  addToContainer (item) {\n    this.container.push(item);\n  }\n  \n  removeFromContainer (item) {\n    this.container = this.container.filter((it) => it.id !== item.id);\n  }\n}\n\nconst Equiping = superclass => class extends superclass {\n  constructor({equipment = Constant.EQUIPMENT_LAYOUTS.human(), ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('EQUIPING')\n    this.equipment = equipment;\n  }\n\n  getItemInSlot (slotName) {\n    let openSlots = this.equipment.filter((slot) => {\n      return (slot.item === null && slot.type === slotName)\n    })\n    if (openSlots.length > 0) { return false; }\n    let slot = this.equipment.find((slot) => slot.type === slotName);\n    if (!slot) { return false; }\n    if (!slot.item) { return false; }\n    return slot.item;\n  }\n\n  equip (slotName, item) {\n    let foundSlot = false;\n    this.equipment = this.equipment.map((slot) => {\n      if (!foundSlot && slot.type === slotName && slot.item === null) {\n        slot.item = item;\n        foundSlot = true;\n      }\n      return slot;\n    })\n  }\n  \n  unequip(item) {\n    this.equipment = this.equipment.map((slot) => {\n      if (slot.item) {\n        if (slot.item.id === item.id) {\n          slot.item = null;\n        }\n      }\n      return slot;\n    })\n  }\n}\n\nconst Charging = superclass => class extends superclass {\n  constructor({charge = 10, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHARGING')\n    this.charge = charge;\n    this.chargeMax = charge;\n  }\n\n  decreaseCharge(value) {\n    this.charge = Math.max(0, this.charge - value);\n  }\n  \n  increaseCharge(value) {\n    this.charge = Math.min(this.chargeMax, this.charge + value);\n  }\n}\n\nconst Signing = superclass => class extends superclass {\n  constructor({...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('SIGNING')\n    this.signHistory = [];\n  }\n\n  addSign(sign) {\n    if (this.signHistory.length >= 4) {\n      this.signHistory.shift();\n    }\n    this.signHistory.push(sign);\n  }\n  \n  clearSigns() {\n    this.signHistory = [];\n  }\n}\n\nconst Playing = superclass => class extends superclass {\n  constructor({keymap = {}, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PLAYING')\n    this.nextAction = null;\n    this.keymap = keymap;\n  }\n\n    setNextAction(action) {\n      this.nextAction = action;\n    }\n\n    getAction() {\n      let action = this.nextAction;\n      this.nextAction = null;\n      return action;\n    }\n}\n\nconst Cloning = superclass => class extends superclass {\n  constructor({cloneLimit = 1, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CLONING')\n    this.cloneLimit = cloneLimit;\n    this.clones = [];\n  }\n  \n  // perhaps clones should have a status effect that leeches parent actor's energy or chakra\n  \n  // status effects should be removed from engine when owner is removed.\n  \n  destroy() {\n    // add function to override self destroy funtion \n    // if this actor dies, clones should be destroyed as well\n    if (this.clones) {\n      this.clones.map((clone) => {\n        destroyEntity(clone)\n      });\n    }\n    destroyEntity(this);\n  }\n\n  destroyClone (id) {\n  // overrides clone destroy function\n  // when clone is destroyed, clone count will change accordingly\n    const index = this.clones.findIndex((c) => c.id == id);\n    if (index >= 0) {\n      this.clones[index].super__destroy();\n      this.clones.splice(index, 1);\n    }\n  }\n\n  createClone (cloneArgs) {\n    if (this.clones.length < this.cloneLimit) {\n      let clone = cloneDeep(this);\n      clone.name += ` Clone ${this.clones.length}`\n      clone.game = this.game;\n      clone.id = uuid();\n      delete clone.clones;\n      clone['super__destroy'] = clone.destroy;\n      clone.destroy = () => { this.destroyClone(clone.id) };\n      cloneArgs.forEach((arg) => {\n        clone[arg.attribute] = arg.value\n      });\n      if (this.game.placeActorOnMap(clone)) {\n        this.game.engine.addActorAsNext(clone);\n        this.game.draw();\n        this.clones.push(clone);\n        return true;\n      };\n    }\n    return false;\n  }\n}\n\nconst Projecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      this.path.shift();\n    }\n    return result;\n  }\n}\n\nconst DestructiveProjecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectile({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst GaseousDestructiveProjecting = superclass => class extends superclass {\n  constructor({owner_id = null, path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS_DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n    this.owner_id = owner_id;\n  }\n\n  canAttack (entity) {\n    let success = super.canAttack();\n    if (success) {\n      success = this.owner_id === null || (entity.owner_id !== this.owner_id);\n    }\n    return success\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectileGas({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst Gaseous = superclass => class extends superclass {\n  constructor({\n    isClone = false,\n    cloneCount = 0,\n    clonePattern = Constant.CLONE_PATTERNS.square,\n    ...args\n  }) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS')\n    this.isClone = isClone;\n    this.cloneCount = cloneCount;\n    this.clonePattern = cloneDeep(clonePattern);\n  }\n\n  getAction (game) {\n    let offset = this.clonePattern.positions.find((pos) => !pos.taken);\n    if (!this.isClone && offset) {\n      offset.taken = true\n      let clone = cloneDeepWith(this, (value, key) => {\n        switch (key) {\n          case 'id':\n          case 'game':\n          case 'engine':\n          case 'clones':\n            return null\n            break;\n          default:\n            return undefined\n            break;\n        }\n      });\n      clone.game = game;\n      clone.id = uuid();\n      if (this.hasOwnProperty('pos')) {\n        let referencePos = this.pos\n        clone.pos = {\n          x: referencePos.x + offset.x,\n          y: referencePos.y + offset.y\n        }\n      }\n      if (clone.hasOwnProperty('path')) {\n        clone.path = clone.path.map((pos) => {\n          return {\n            x: pos.x + offset.x,\n            y: pos.y + offset.y\n          }\n        })\n      }\n      clone.isClone = true\n      this.cloneCount += 1\n      game.placeActorOnMap(clone)\n      game.engine.addActor(clone);\n      game.draw();\n    }\n\n    let result = super.getAction(game);\n    return result;\n  }\n}\n\nconst Chasing = superclass => class extends superclass {\n  constructor({targetEntity = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHASING')\n    this.targetEntity = targetEntity;\n  }\n\n  getAction(game) {\n    let path = Helper.calculatePath(game, this.targetEntity.pos, this.pos);\n    let targetPos = path.length > 0 ? path[0] : this.pos;\n\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    return result;\n  }\n}\n\nconst Pushing = superclass => class extends superclass {\n  constructor({ path = false, targetPos = null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('PUSHING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath(game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let direction = [\n      targetPos.x - this.pos.x ,\n      targetPos.y - this.pos.y ,\n    ]\n    if (direction[0] === 0 && direction[1] === 0) {\n      return new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    let result = new Action.Shove({\n      targetPos,\n      direction,\n      game,\n      actor: this,\n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    this.path.shift();\n\n    return result;\n  }\n}\n\nconst Destructable = superclass => class extends superclass {\n  constructor({durability = 1, onDestroy = () => null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DESTRUCTABLE')\n    this.durability = durability;\n    this.onDestroy = onDestroy;\n  }\n\n  decreaseDurability (value) {\n    this.durability -= value\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n\n  increaseDurability (value) {\n    this.durability += value\n  }\n\n  destroy () {\n    this.onDestroy();\n    destroyEntity(this);\n  }\n}\n\nconst IsParticle = superclass => class extends superclass {\n  constructor({\n    pos = { x: 1, y: 1 },\n    direction = { x: 0, y: 0 },\n    life = 1,\n    speed = 1,\n    type = Constant.PARTICLE_TYPE.directional,\n    path = null,\n    ...args\n  }) {\n    super({ ...args })\n    this.pos = pos;\n    this.direction = direction;\n    this.life = life;\n    this.speed = speed;\n    this.type = type;\n    this.path = path;\n    this.entityTypes = this.entityTypes.concat('PARTICLE')\n  }\n\n  getNextPos(step) {\n    switch (this.type) {\n      case Constant.PARTICLE_TYPE.directional:\n        return {\n          x: this.pos.x + (this.direction.x * this.speed) * step,\n          y: this.pos.y + (this.direction.y * this.speed) * step,\n        }\n      case Constant.PARTICLE_TYPE.path:\n        const nextPos = this.path.shift();\n        return nextPos ? {...nextPos} : {...this.pos}\n    }\n  }\n\n  update(step) {\n    this.life -= step;\n    if (this.life > 0) {\n      this.pos = this.getNextPos(step);\n    }\n  }\n}\n\nexport const UI_Actor = pipe(\n  Acting, \n  Rendering, \n  Playing, \n  UI\n)(Entity);\n\nexport const Actor = pipe(\n  Acting, \n  Rendering\n)(Entity);\n\nexport const Wall = pipe(\n  Rendering,\n  Destructable,\n)(Entity);\n\nexport const MovingWall = pipe(\n  Acting,\n  Rendering,\n  Pushing,\n  Destructable,\n)(Entity);\n\nexport const Chaser = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable\n)(Entity);\n\nexport const Bandit = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable,\n  Attacking,\n)(Entity);\n\nexport const Player = pipe(\n  Acting, \n  Rendering, \n  Charging, \n  Signing, \n  Containing, \n  Equiping, \n  Attacking, \n  HasInnerGates,\n  Destructable, \n  Cloning,\n  Playing,\n)(Entity);\n\nexport const Weapon = pipe(\n  Rendering, \n  Equipable, \n  Attacking\n)(Entity);\n\nexport const DestructiveProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  DestructiveProjecting, \n  Destructable\n)(Entity);\n\nexport const DestructiveCloudProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  GaseousDestructiveProjecting, \n  Destructable, \n  Gaseous\n)(Entity);\n\nexport const DestructiveCloudProjectileV2 = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);\n\nexport const Particle = pipe(\n  Acting,\n  Rendering,\n  IsParticle,\n)(Entity);\n\nexport const ParticleEmitter = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);","import * as Helper from '../../../helper';\nimport { Bandit } from '../../entites';\n\nexport const addActor = (game) => {\n  let targetEntity = game.engine.actors[game.engine.currentActor]\n  let pos = Helper.getRandomPos(game.map).coordinates\n\n  let actor = new Bandit({\n    targetEntity,\n    pos,\n    renderer: {\n      character: Helper.getRandomInArray(['◉', '⛨']),\n      color: 'white',\n      background: '',\n    },\n    name: 'Ross',\n    game,\n    actions: [],\n    durability: Helper.getRandomInArray([1]),\n    // durability: Helper.getRandomInArray([1, 2, 4, 8]),\n    speed: 100,\n  })\n  game.placeActorOnMap(actor)\n  game.engine.addActor(actor);\n  game.draw();\n}","import React from 'react';\nimport * as ROT from 'rot-js';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\nimport { addActor as addWaveEnemy } from './Keymap/KeyActions/addActor';\n\nconst GAME_MODE_TYPES = {WAVE: 0};\n\nexport class Game {\n  constructor({\n    engine = null,\n    map = {},\n    display = new ROT.Display({ \n      // forceSquareRatio: true,\n      width: 90,\n      // height: 100,\n      fontSize: 24, \n      bg: '#424242' \n    }),\n    tileKey = Constant.TILE_KEY,\n    mode = {\n      type: GAME_MODE_TYPES.WAVE,\n      data: {\n        level: 1\n      }\n    },\n  }) {\n    this.engine = engine;\n    this.map = map;\n    this.display = display;\n    this.tileKey = tileKey;\n    this.mode = mode;\n  }\n\n  initializeMode () {\n    if (this.mode.type === GAME_MODE_TYPES.WAVE) {\n      for (let i = 0; i < Math.pow(this.mode.data.level, 2); i++) {\n        addWaveEnemy(this);\n      }\n    }\n  }\n  \n  updateMode () {\n    if (this.mode.type === GAME_MODE_TYPES.WAVE) {\n      const nonPlayerCharacters = this.engine.actors.filter((actor) => !actor.entityTypes.includes('PLAYING'));\n      if (!nonPlayerCharacters.length) {\n        this.nextModeLevel();\n        this.initializeMode();\n      }\n    }\n  }\n\n  setModeLevel (level) {\n    this.mode.data.level = level;\n  }\n\n  nextModeLevel () {\n    this.setModeLevel(this.mode.data.level + 1);\n  }\n  \n  resetMode () {\n    this.setModeLevel(1);\n    this.initializeMode();\n  }\n\n  randomlyPlaceActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      let pos = Helper.getRandomPos(this.map).coordinates\n      let tile = this.map[Helper.coordsToString(pos)]\n      actor.pos = {...pos}\n      tile.entities.push(actor);\n    })\n  }\n\n  placeActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      let tile = this.map[Helper.coordsToString(actor.pos)]\n      if (tile) {\n        tile.entities.push(actor);\n      } else {\n        console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      }\n    })\n  }\n\n  placeActorOnMap(actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (tile) {\n      tile.entities.push(actor);\n      return true\n    } else {\n      console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      return false\n    }\n  }\n\n  removeActorFromMap (actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (!tile) return false;\n    this.map[Helper.coordsToString(actor.pos)].entities = tile.entities.filter((ac) => ac.id !== actor.id);\n    return true;\n  }\n\n  createLevel () {\n    let digger = new ROT.Map.Arena();\n    let freeCells = [];\n    let digCallback = function (x, y, value) {\n      if (value) { return; }\n      let key = x + \",\" + y;\n      let type = 'GROUND';\n      let currentFrame = 0;\n\n      if (Constant.TILE_KEY[type].animation) {\n        currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n      }\n\n      this.map[key] = {\n        type,\n        currentFrame,\n        entities: [],\n      };\n      freeCells.push(key);\n    }\n    digger.create(digCallback.bind(this));\n    this.map[`10,10`] = {\n      type: 'WIN',\n      entities:[],\n    }\n    this.randomlyPlaceActorsOnMap()\n  }\n\n  canOccupyPosition (pos, entity = {passable: false}) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      let hasImpassableEntity = targetTile.entities.filter((entity) => !entity.passable).length > 0;\n      if (!hasImpassableEntity || entity.passable) {\n        let tile = this.map[Helper.coordsToString(pos)];\n        if (this.tileKey[tile.type].passable) {\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  cursorCanOccupyPosition(pos) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  show () {\n    let d = document.getElementById('display')\n    d.appendChild(this.display.getContainer())\n  }\n\n  draw () {\n    for (let key in this.map) {\n      let parts = key.split(\",\");\n      let x = parseInt(parts[0]);\n      let y = parseInt(parts[1]);\n      let tile = this.map[key];\n      let { character, foreground, background } = this.tileKey[tile.type]\n\n      // Proto code to handle tile animations\n      // let tileRenderer = this.tileKey[tile.type]\n      // if (tileRenderer.animation) {\n      //   let frame = tileRenderer.animation[tile.currentFrame];\n        \n      //   character = frame.character;\n      //   foreground = frame.foreground;\n      //   background = frame.background;\n      //   tile.currentFrame = (tile.currentFrame + 1) % tileRenderer.animation.length;\n      // }\n\n      if (tile.entities.length > 0) {\n        let entity = tile.entities[tile.entities.length - 1]\n        character = entity.renderer.character\n        foreground = entity.renderer.color\n        if (entity.renderer.background) {\n          background = entity.renderer.background\n        }\n      }\n      this.display.draw(x, y, character, foreground, background);\n    }\n  }\n\n  addActor (actor, engine = this.engine) {\n    let isPlaced = this.placeActorOnMap(actor); // replace with placeActorOnMap\n    if (!isPlaced) { return false }\n    engine.actors.push(actor);\n    this.draw();\n    return true\n  }\n\n  placeAndDrawActor (actor) {\n    this.placeActorsOnMap(); // replace with placeActorOnMap\n    this.draw();\n  }\n\n  removeActor (actor) {\n    this.engine.actors = this.engine.actors.filter((ac) => ac.id !== actor.id);\n    // this.engine.currentActor = this.engine.actors.length - 1; // should remove need for this line\n    // this.engine.currentActor = (this.engine.currentActor) % this.engine.actors.length;\n    // this.engine.currentActor = (this.engine.currentActor + 1) % this.engine.actors.length;\n    this.removeActorFromMap(actor);\n    console.log('remove actor');\n    this.draw();\n  }\n\n  initialize (presserRef) {\n    this.engine.game = this;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this;\n    });\n    this.show();\n    this.createLevel();\n    this.draw();\n    presserRef.current.focus();\n    this.initializeMode();\n  }\n\n  \n}\n\n/************************** UI ********************************/\nexport const handleKeyPress = (event, engine) => {\n  if (!engine.isRunning) {\n    let actor = engine.actors[engine.currentActor];\n    let keymap = actor.keymap;\n    let code = event.key;\n    if (!(code in keymap)) { return; }\n    keymap[code]['activate']();\n    engine.start()\n  }\n  return;\n}\n\nexport const DisplayElement = (presserRef, handleKeyPress, engine) => {\n  return (\n    <div\n      id='display'\n      ref={presserRef}\n      onKeyDown={(event) => handleKeyPress(event, engine)}\n      tabIndex='0'\n    />\n  )\n}\n/************************** UI ********************************/\n","import React from 'react';\n\nfunction Button(props) {\n  let color = props['color'];\n  if (!color) color = 'grey';\n  return (\n    <button\n      onClick={props.onClick}\n      className={`btn ${color} darken-3`}\n    >\n      {props.children}  \n    </button>\n  )\n}\n\nexport default Button;\n","import React from 'react';\nimport Button from './Button';\n\nclass Information extends React.Component {\n  render() {\n    return (\n      <div className=\"Information UI\">\n        <div className='flow-text'>Information</div>\n        {\n          this.props.data && (\n            this.props.data.map((item, index) => {\n              return (\n                <Button key={index} color={item['color']} onClick={() => null}>\n                  {`${item.label}: ${item.value}`}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Information;","import React from 'react';\nimport Button from './Button';\n\nclass Equipment extends React.Component {\n  render() {\n    return (\n      <div className=\"Equipment UI\">\n        <div className='flow-text'>Equipment</div>\n        {\n          this.props.equipment && (\n            this.props.equipment.map((slot, index) => {\n              return (\n                <Button key={index} onClick={() => null}>\n                  {slot.name} {slot.item ? slot.item.renderer.character : ''}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Equipment;","import React from 'react';\nimport Button from './Button';\n\nclass Inventory extends React.Component {\n  render() {\n    return (\n      <div className=\"Inventory UI\">\n        <div className='flow-text'>Inventory</div>\n        {\n          this.props.inventory && (\n            this.props.inventory.map((item, index) => {\n              return (\n                <Button key={index} onClick={() => null}>\n                  {index} {item.name} {item.renderer.character}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Inventory;","import React from 'react';\nimport Button from './Button';\n\nclass Keymap extends React.Component {\n  render() {\n    return (  \n      <div className=\"Keymap UI\">\n        <div className='flow-text'>Keymap</div>\n        {\n          \n          this.props.keymap && (\n            Object.entries(this.props.keymap).map(([key, value], index) => {\n              return (\n                <Button key={index} onClick={() => null}>\n                  {key} {value.label}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Keymap;","import * as Entity from './entites';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\n\nexport const TYPE = {\n  KUNAI: 'Kunai',\n  SWORD: 'Sword',\n  BARRIER: 'Barrier',\n}\n\nconst createProjectileCloud = ({ \n  engine, \n  actor, \n  targetPos, \n  throwDirection,\n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: actor.pos.x + slot.x + (throwDirection.x * structure.x_offset),\n      y: actor.pos.y + slot.y + (throwDirection.y * structure.y_offset)\n    }\n    \n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileSingularity = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + slot.x + structure.x_offset,\n      y: targetPos.y + slot.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x,\n      y: targetPos.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileBurst = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + structure.x_offset,\n      y: targetPos.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nexport const sandTomb = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileSingularity({\n  engine,\n  actor,\n  targetPos,\n  speed: 100,\n  structureType: 'circle',\n  createProjectile: sandShuriken,\n})\n\nexport const sandBurst = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileBurst({\n  engine,\n  actor,\n  targetPos,\n  speed: 500,\n  structureType: 'circle',\n  createProjectile: sandShuriken,\n})\n\nexport const sandWallPulse = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'smallSquare',\n  createProjectile: movingSandWall,\n})\n\nexport const kunaiCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: kunai,\n})\n\nexport const fireballCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: fireball,\n})\n\nexport const kunai = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '🗡️',\n    color: 'white',\n    background: '',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const movingSandWall = (engine, pos, targetPos) => new Entity.MovingWall({\n  game: engine.game,\n  passable: false,\n  pos: { x: pos.x, y: pos.y },\n  targetPos,\n  renderer: {\n    // character: '>',\n    character: ']',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  // name: TYPE.KUNAI,\n  name: TYPE.BARRIER,\n  durability: 3,\n})\n\nexport const sandShuriken = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireball = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '🔥',\n    color: 'wheat',\n    background: 'tomato',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireballGas = (engine, actor, targetPos) => {\n  return new Entity.DestructiveCloudProjectile({\n    game: engine.game,\n    owner_id: actor ? actor.id : null,\n    targetPos,\n    passable: true,\n    pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n    renderer: {\n      // character: '@',\n      character: '🔥',\n      color: 'wheat',\n      background: 'tomato',\n    },\n    name: TYPE.KUNAI,\n    speed: 100,\n    range: 10,\n    clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n    // clonePattern: Constant.CLONE_PATTERNS.square,\n  })\n}\n\nexport const waterball = (engine, actor, targetPos) => new Entity.DestructiveCloudProjectile({\n  game: engine.game,\n  owner_id: actor ? actor.id : null,\n  targetPos,\n  passable: true,\n  pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n  renderer: {\n    // character: '~',\n    character: '🌊',\n    color: 'silver',\n    background: 'lightslategrey',\n  },\n  name: TYPE.KUNAI,\n  speed: 800,\n  range: 10,\n  clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n  // clonePattern: Constant.CLONE_PATTERNS.square,\n})\n\nexport const sword = (engine) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: '',\n  },\n})\n\nexport const test = (engine, pos) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  pos,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: 'lightsteelblue',\n  },\n})\n","import { ALPHABET } from '../constants';\n\nexport const addAlphabeticallyToKeymap = (keymap, obj) => {\n  let alphabetAllowed = ALPHABET.filter((letter) => {\n    return !Object.keys(keymap).includes(letter);\n  });\n  keymap[alphabetAllowed[0]] = obj;\n}\n\nexport const deactivateUIKeymap = (engine, visibleUIKey) => {\n  let currentUiActor = engine.actors[engine.currentActor];\n  engine.game.removeActor(currentUiActor);\n  engine.game[visibleUIKey] = null;\n}","import * as Constant from '../../constants';\nimport { UI_Actor } from '../../entites';\nimport { DropItem } from '../../actions';\nimport { addAlphabeticallyToKeymap, deactivateUIKeymap } from '../helper';\n\nconst keymapDropFromInventory = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      // g: {\n      activate: () => deactivateUIKeymap(engine, 'visibleInventory'),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.container.map((item, index) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to drop ${item.name}`);\n      initiatedBy.setNextAction(new DropItem({\n        item,\n        game: engine.game,\n        actor: initiatedBy,\n        energyCost: Constant.ENERGY_THRESHOLD\n      }));\n      deactivateUIKeymap(engine, 'visibleInventory');\n    }\n    obj['label'] = `Drop ${item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const activateDropItem = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleInventory = currentActor.container;\n\n  let ui = new UI_Actor({\n    initiatedBy: currentActor,\n    pos: { ...currentActor.pos },\n    renderer: {\n      character: 'D',\n      color: 'white',\n      background: '',\n    },\n    name: 'Drop',\n    game: engine.game,\n  })\n  engine.addActorAsPrevious(ui);\n  engine.setActorToPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapDropFromInventory(engine, currentActor);\n}","import { UI_Actor } from '../../entites';\nimport { UnequipItem } from '../../actions';\nimport { addAlphabeticallyToKeymap, deactivateUIKeymap } from '../helper';\n\nconst keymapEquipment = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      activate: () => deactivateUIKeymap(engine, 'visibleEquipment'),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.equipment.filter((slot) => slot.item).map((slot) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to unequip ${slot.item.name}`);\n      initiatedBy.setNextAction(new UnequipItem({\n        item: slot.item,\n        game: engine.game,\n        actor: initiatedBy,\n      }))\n      deactivateUIKeymap(engine, 'visibleEquipment');\n    }\n    obj['label'] = `Unequip ${slot.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const activateEquipment = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleEquipment = currentActor.equipment;\n\n  let ui = new UI_Actor({\n    initiatedBy: currentActor,\n    pos: { ...currentActor.pos },\n    renderer: {\n      character: 'E',\n      color: 'white',\n      background: '',\n    },\n    name: 'Equipment',\n    game: engine.game,\n  })\n  engine.addActorAsPrevious(ui);\n  engine.setActorToPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapEquipment(engine, currentActor);\n}","import { UI_Actor } from '../../entites';\nimport { EquipItemFromContainer } from '../../actions';\nimport { addAlphabeticallyToKeymap, deactivateUIKeymap } from '../helper';\n\nconst keymapEquipFromInventory = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      activate: () => deactivateUIKeymap(engine, 'visibleInventory'),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.container.map((item, index) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to equip ${item.name}`);\n      initiatedBy.setNextAction(new EquipItemFromContainer({\n        item,\n        game: engine.game,\n        actor: initiatedBy,\n      }))\n      deactivateUIKeymap(engine, 'visibleInventory');\n    }\n    obj['label'] = `Equip ${item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const activateInventory = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleInventory = currentActor.container;\n\n  let ui = new UI_Actor({\n    initiatedBy: currentActor,\n    pos: { ...currentActor.pos },\n    renderer: {\n      character: 'I',\n      color: 'white',\n      background: '',\n    },\n    name: 'Inventory',\n    game: engine.game,\n    // keymap: keymapEquipFromInventory(engine, currentActor),\n  })\n  engine.addActorAsPrevious(ui);\n  engine.setActorToPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapEquipFromInventory(engine, currentActor);\n}","import { CursorMove } from '../../actions';\n\nexport const moveCursor = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new CursorMove({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: 0,\n  }))\n}","import * as Action from '../../actions';\nimport * as Item from '../../items';\nimport * as Constant from '../../constants';\nimport { UI_Actor } from '../../entites';\nimport { moveCursor } from './moveCursor';\n\nconst throwKunai = (engine, actor) => {\n  let cursor = engine.actors[engine.currentActor];\n  cursor.active = false;\n  let throwDirection = {\n    x: Math.sign(cursor.pos.x - actor.pos.x),\n    y: Math.sign(cursor.pos.y - actor.pos.y),\n  }\n  engine.game.removeActor(cursor);\n  let kunai = actor.contains(Item.TYPE.KUNAI);\n  if (kunai) {\n    kunai.game = engine.game;\n    kunai.pos = {\n      x: actor.pos.x + throwDirection.x,\n      y: actor.pos.y + throwDirection.y,\n    };\n    kunai.targetPos = { ...cursor.pos };\n    actor.removeFromContainer(kunai);\n    engine.actors.push(kunai);\n    kunai.createPath(engine.game);\n    engine.game.placeActorsOnMap();\n    engine.game.draw();\n    actor.setNextAction(\n      new Action.Say({\n        message: `I'll get you with this kunai!`,\n        game: engine.game,\n        actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    )\n  } else {\n    console.log('I have no kunais left');\n  }\n}\n\nconst throwKunaiCloud = (engine, actor) => {\n  let cursor = engine.actors[engine.currentActor];\n  cursor.active = false;\n  let throwDirection = {\n    x: Math.sign(cursor.pos.x - actor.pos.x),\n    y: Math.sign(cursor.pos.y - actor.pos.y),\n  }\n  engine.game.removeActor(cursor);\n  let cloud = Item.fireballCloud({\n    // let cloud = Item.kunaiCloud({\n    engine,\n    actor,\n    targetPos: { ...cursor.pos },\n    throwDirection,\n  });\n  if (cloud) {\n    cloud.pos = {\n      x: actor.pos.x + throwDirection.x,\n      y: actor.pos.y + throwDirection.y,\n    };\n    engine.actors.push(cloud);\n    actor.setNextAction(\n      new Action.Say({\n        message: `I'll get you with these kunai!`,\n        game: engine.game,\n        actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    )\n  } else {\n    console.log('I have no kunais left');\n  }\n}\n\nconst keymapCursorToThrowItem = (engine, initiatedBy) => {\n  return {\n    w: {\n      activate: () => moveCursor(Constant.DIRECTIONS.N, engine),\n      label: 'move',\n    },\n    d: {\n      activate: () => moveCursor(Constant.DIRECTIONS.E, engine),\n      label: 'move',\n    },\n    s: {\n      activate: () => moveCursor(Constant.DIRECTIONS.S, engine),\n      label: 'move',\n    },\n    a: {\n      activate: () => moveCursor(Constant.DIRECTIONS.W, engine),\n      label: 'move',\n    },\n    t: {\n      activate: () => throwKunaiCloud(engine, initiatedBy),\n      label: 'Throw Cloud',\n    },\n    y: {\n      activate: () => throwKunai(engine, initiatedBy),\n      label: 'Throw Kunai',\n    },\n  };\n}\n\nexport const activateThrow = (engine) => {\n  let game = engine.game;\n  let currentActor = engine.actors[game.engine.currentActor]\n  let pos = currentActor.pos;\n\n  let cursor = new UI_Actor({\n    initiatedBy: currentActor,\n    pos,\n    renderer: {\n      character: '█',\n      color: 'white',\n      background: '',\n    },\n    name: 'Cursor',\n    game,\n    keymap: keymapCursorToThrowItem(engine, currentActor),\n  })\n  engine.addActorAsPrevious(cursor);\n  engine.setActorToPrevious(cursor);\n  engine.game.placeActorOnMap(cursor)\n  engine.game.draw()\n}","import { Move } from '../../actions';\nimport * as Constant from '../../constants';\n\nexport const walk = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Move({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}","import { PickupItem } from '../../actions';\nimport { ENERGY_THRESHOLD } from '../../constants';\nimport { coordsToString, getRandomInArray } from '../../../helper';\n\nexport const pickupRandom = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let entities = engine.game.map[coordsToString(actor.pos)].entities.filter((e) => e.id !== actor.id);\n  if (entities.length > 0) {\n    actor.setNextAction(new PickupItem({\n      item: getRandomInArray(entities),\n      game: engine.game,\n      actor,\n      energyCost: ENERGY_THRESHOLD\n    }));\n  }\n  else {\n    console.log('nothing to pickup.');\n  }\n};","import { Tackle } from '../../actions';\nimport { ENERGY_THRESHOLD, DIRECTIONS, PARTICLE_TEMPLATES } from '../../constants';\n\nconst flyingLotus = (direction, stepCount, energyCost, additionalAttackDamage, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Tackle({\n    direction,\n    stepCount,\n    game: engine.game,\n    actor,\n    additionalAttackDamage,\n    energyCost,\n    particleTemplate: PARTICLE_TEMPLATES.leaf\n  }))\n}\n\nconst keymapFlyingLotus = (engine, initiatedBy, previousKeymap) => {\n  const energyCost = Math.floor(ENERGY_THRESHOLD / 2);\n  const stepCount = Math.floor(initiatedBy.energy / energyCost);\n  const additionalAttackDamage = stepCount;\n  const goToPreviousKeymap = () => initiatedBy.keymap = previousKeymap;\n  return {\n    Escape: {\n      activate: goToPreviousKeymap,\n      label: 'Close',\n    },\n    w: {\n      activate: () => {\n        flyingLotus(DIRECTIONS.N, stepCount, energyCost, additionalAttackDamage, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate N',\n    },\n    d: {\n      activate: () => {\n        flyingLotus(DIRECTIONS.E, stepCount, energyCost, additionalAttackDamage, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate E',\n    },\n    s: {\n      activate: () => {\n        flyingLotus(DIRECTIONS.S, stepCount, energyCost, additionalAttackDamage, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate S',\n    },\n    a: {\n      activate: () => {\n        flyingLotus(DIRECTIONS.W, stepCount, energyCost, additionalAttackDamage, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate W',\n    },\n  };\n}\n\nexport const activateFlyingLotus = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  currentActor.keymap = keymapFlyingLotus(engine, currentActor, { ...currentActor.keymap });\n}","export class Base {\n  constructor({ \n    game, \n    actor, \n    name = 'Effect', \n    lifespan = 100,\n    stepInterval = 100,\n    allowDuplicates = true,\n    onStart = () => null,\n    onStep = () => null,\n    onStop = () => null,\n  }) {\n    this.game = game\n    this.actor = actor\n    this.name = name\n    this.lifespan = lifespan\n    this.timeToLive = lifespan\n    this.stepInterval = stepInterval\n    this.allowDuplicates = allowDuplicates\n    this.timeSinceLastStep = 0;\n    this.onStart = onStart\n    this.onStep = onStep\n    this.onStop = onStop\n  }\n}","import { DIRECTIONS, ENERGY_THRESHOLD } from '../../constants';\nimport * as StatusEffect from '../../statusEffects';\nimport { AddStatusEffect, Move } from '../../actions';\nimport { walk } from './walk';\nimport { getRandomInArray } from '../../../helper';\n\nconst drunkWalk = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let originalDirection = [...direction];\n  let chance = Math.random();\n  if (chance < 0.5) {\n    console.log('drunk misstep');\n    let count = 100\n    while ((direction[0] === originalDirection[0] && direction[1] === originalDirection[1]) || count < 0) {\n      count -= 1;\n      direction = DIRECTIONS[getRandomInArray(Object.keys(DIRECTIONS))];\n    }\n    console.log(count);\n  }\n\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Move({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: ENERGY_THRESHOLD\n  }))\n}\n\nexport const drunkenFist = (engine, damageBuff = 1) => {\n  let currentActor = engine.actors[engine.currentActor];\n\n  let effect = new StatusEffect.Base({\n    game: engine.game,\n    actor: currentActor,\n    name: 'Drunk',\n    lifespan: 1000,\n    stepInterval: 100,\n    allowDuplicates: false,\n    onStart: () => {\n      currentActor.attackDamage += damageBuff;\n      currentActor.renderer.character = '?';\n      console.log(`${currentActor.name} took a sip of sake.`);\n      currentActor.keymap.w = {\n        activate: () => drunkWalk(DIRECTIONS.N, engine),\n        label: 'drunken walk'\n      }\n      currentActor.keymap.a = {\n        activate: () => drunkWalk(DIRECTIONS.W, engine),\n        label: 'drunken walk'\n      }\n      currentActor.keymap.s = {\n        activate: () => drunkWalk(DIRECTIONS.S, engine),\n        label: 'drunken walk'\n      }\n      currentActor.keymap.d = {\n        activate: () => drunkWalk(DIRECTIONS.E, engine),\n        label: 'drunken walk'\n      }\n    },\n    onStop: () => {\n      currentActor.attackDamage -= damageBuff;\n      currentActor.renderer.character = 'R';\n      console.log(`${currentActor.name} recovered from drunkeness.`);\n      currentActor.keymap.w = {\n        activate: () => walk(DIRECTIONS.N, engine),\n        label: 'walk'\n      }\n      currentActor.keymap.a = {\n        activate: () => walk(DIRECTIONS.W, engine),\n        label: 'walk'\n      }\n      currentActor.keymap.s = {\n        activate: () => walk(DIRECTIONS.S, engine),\n        label: 'walk'\n      }\n      currentActor.keymap.d = {\n        activate: () => walk(DIRECTIONS.E, engine),\n        label: 'walk'\n      }\n    },\n  });\n  currentActor.setNextAction(new AddStatusEffect({\n    effect,\n    actor: currentActor,\n    game: engine.game,\n    processDelay: 100,\n    particleTemplate: {\n      renderer: {\n        color: '#c45ffd',\n        background: '#424242',\n        character: '?'\n      }\n    },\n  }));\n}","// import deps\nimport * as Item from '../items';\nimport * as Entity from '../entites';\nimport * as Constant from '../constants';\nimport * as Keymap from '../Keymap';\n\n// create class\nexport default function (engine) {\n  // define keymap\n  const keymap = (engine) => {\n    return {\n      w: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.N, engine),\n        label: 'walk',\n      },\n      d: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.E, engine),\n        label: 'walk',\n      },\n      s: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.S, engine),\n        label: 'walk',\n      },\n      a: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.W, engine),\n        label: 'walk',\n      },\n      l: {\n        activate: () => Keymap.sandClone(engine),\n        label: 'Sand Clone',\n      },\n      k: {\n        activate: () => Keymap.sandTomb(engine),\n        label: 'Sand Tomb',\n      },\n      j: {\n        activate: () => Keymap.sandSkin(engine, 10),\n        label: 'Sand Skin',\n      },\n      h: {\n        activate: () => Keymap.sandWall(engine),\n        label: 'Sand Wall',\n      },\n      o: {\n        activate: () => Keymap.sandPulse(engine),\n        label: 'Sand Pulse',\n      },\n      i: {\n        activate: () => Keymap.activateInventory(engine),\n        label: 'Open Inventory',\n      },\n      q: {\n        activate: () => Keymap.activateEquipment(engine),\n        label: 'Open Equipment',\n      },\n      g: {\n        activate: () => Keymap.activateDropItem(engine),\n        label: 'Drop Item',\n      },\n      p: {\n        activate: () => Keymap.pickupRandom(engine),\n        label: 'Pickup',\n      },\n      t: {\n        activate: () => Keymap.activateThrow(engine),\n        label: 'Throw',\n      },\n      // DEV KEYS\n      y: {\n        activate: () => Keymap.addActor(engine.game),\n        label: 'Add NPC',\n      },\n      u: {\n        activate: () => Keymap.die(engine),\n        label: 'Destroy Self',\n      },\n    };\n  }\n\n\n  let actor = new Entity.Player({\n    pos: { x: 23, y: 7 },\n    renderer: {\n      character: 'G',\n      color: '#F0D8C0',\n      background: '#603030',\n    },\n    name: 'Gaara',\n    actions: [],\n    speed: 200,\n    durability: 3,\n    cloneLimit: 3,\n    keymap: keymap(engine),\n  })\n\n  actor.container = [\n    Item.sword(engine),\n    ...Array(10).fill('').map(() => Item.sandShuriken(engine, { ...actor.pos })),\n    // ...Array(10).fill('').map(() => Item.fireballGas(engine, actor)),\n    // ...Array(10).fill('').map(() => Item.movingSandWall(engine, { ...actor.pos })),\n  ]\n\n  return actor;\n}\n// export instance","import React from 'react';\nimport { SCREENS } from './constants';\nimport * as Engine from '../engine';\nimport * as Game from '../game';\nimport Information from '../UI/Information';\nimport Equipment from '../UI/Equipment';\nimport Inventory from '../UI/Inventory';\nimport KeymapUI from '../UI/Keymap';\nimport RockLee from '../Characters/RockLee';\nimport NarutoUzumaki from '../Characters/NarutoUzumaki';\nimport Gaara from '../Characters/Gaara';\n\nlet ENGINE = new Engine.Engine({});\n\n// let actor = NarutoUzumaki(ENGINE);\nlet actor = RockLee(ENGINE);\n// let actor = Gaara(ENGINE);\nENGINE.actors.push(actor)\n\nlet game = new Game.Game({ engine: ENGINE })\n\nclass Level extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      game: game,\n    };\n    this.presserRef = React.createRef();\n  }\n\n  async componentDidMount() {\n    game.initialize(this.presserRef)\n    game.updateReact = (newGameState) => { this.setState({game: newGameState}) }\n    ENGINE.start()\n  }\n\n  render() {\n    let currentActor = this.state.game.engine.actors[this.state.game.engine.currentActor];\n    let data = [\n      {\n        label: 'Wave',\n        value: this.state.game.mode.data.level,\n      },\n    ];\n\n    data = data.concat(\n      [\n        ...this.state.game.engine.actors.map((actor, index) => {\n          let result = {\n            label: actor.name,\n            value: index,\n            value: `HP: ${actor.durability}, En/Sp: ${actor.energy}/${actor.speed}`,\n          };\n          if (index === this.state.game.engine.currentActor) {\n            result['color'] = 'red';\n          }\n          return result;\n        })\n      ]\n    )\n\n    return (\n      <div className=\"Level\">\n        <div className='flow-text'>Chunin Exams</div>\n        <button className='btn' onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}>Quit</button>\n        <div className='row'>\n          <Information data={data} />\n          <Equipment equipment={this.state.game.visibleEquipment} />\n          <Inventory inventory={this.state.game.visibleInventory} />\n          <KeymapUI keymap={this.state.game.visibleKeymap} />\n          {Game.DisplayElement(this.presserRef, Game.handleKeyPress, ENGINE)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Level;\n","// import deps\nimport * as Item from '../items';\nimport * as Entity from '../entites';\nimport * as Constant from '../constants';\nimport * as Keymap from '../Keymap';\n\nexport default function (engine) {\n  // define keymap\n  const keymap = (engine) => {\n    return {\n      w: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.N, engine),\n        label: 'walk',\n      },\n      d: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.E, engine),\n        label: 'walk',\n      },\n      s: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.S, engine),\n        label: 'walk',\n      },\n      a: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.W, engine),\n        label: 'walk',\n      },\n      l: {\n        activate: () => Keymap.activateFlyingLotus(engine),\n        label: 'Flying Lotus',\n      },\n      k: {\n        activate: () => Keymap.removeWeights(engine, 200),\n        label: 'Remove wraps',\n      },\n      j: {\n        activate: () => Keymap.drunkenFist(engine),\n        label: 'Sip Sake',\n      },\n      h: {\n        activate: () => Keymap.leafWhirlwind(engine),\n        label: 'Leaf Whirlwind',\n      },\n      o: {\n        activate: () => Keymap.openInnerGate(engine),\n        label: 'Gate of Opening',\n      },\n      i: {\n        activate: () => Keymap.activateInventory(engine),\n        label: 'Open Inventory',\n      },\n      q: {\n        activate: () => Keymap.activateEquipment(engine),\n        label: 'Open Equipment',\n      },\n      g: {\n        activate: () => Keymap.activateDropItem(engine),\n        label: 'Drop Item',\n      },\n      p: {\n        activate: () => Keymap.pickupRandom(engine),\n        label: 'Pickup',\n      },\n      t: {\n        activate: () => Keymap.activateThrow(engine),\n        label: 'Throw',\n      },\n      // DEV KEYS\n      y: {\n        activate: () => Keymap.addActor(engine.game),\n        label: 'Add NPC',\n      },\n    };\n  }\n  // instantiate class\n  let actor = new Entity.Player({\n    pos: { x: 23, y: 7 },\n    renderer: {\n      character: 'R',\n      color: '#e6e6e6',\n      background: '#36635b',\n    },\n    name: 'Rock Lee',\n    actions: [],\n    speed: 400,\n    durability: 3,\n    keymap: keymap(engine),\n  })\n\n  // add default items to container\n  actor.container = [\n    ...Array(10).fill('').map(() => Item.kunai(engine, { ...actor.pos })),\n  ]\n\n  return actor;\n}","import * as StatusEffect from '../../statusEffects';\nimport { AddStatusEffect } from '../../actions';\n\nexport const removeWeights = (engine, speedBoost = 600, damageDebuff = 1) => {\n  let currentActor = engine.actors[engine.currentActor];\n\n  let effect = new StatusEffect.Base({\n    game: engine.game,\n    actor: currentActor,\n    name: 'Removed wraps (weights)',\n    lifespan: 1000,\n    stepInterval: 100,\n    allowDuplicates: false,\n    onStart: () => {\n      currentActor.speed += speedBoost;\n      currentActor.attackDamage = Math.max(0, currentActor.attackDamage - damageDebuff);\n      currentActor.energy += speedBoost;\n      currentActor.renderer.character = '〣'\n      console.log(`${currentActor.name} removed weighted wraps.`);\n    },\n    onStop: () => {\n      currentActor.speed -= speedBoost;\n      currentActor.attackDamage += damageDebuff;\n      currentActor.renderer.character = 'R'\n      console.log(`${currentActor.name} rewrapped weights.`);\n    },\n  });\n  currentActor.setNextAction(new AddStatusEffect({\n    effect,\n    actor: currentActor,\n    game: engine.game,\n    particleTemplate: {\n      renderer: {\n        color: '#424242',\n        background: '#e6e6e6',\n        character: '〣'\n      }\n    }\n  }));\n}","import { MultiTargetAttack} from '../../actions';\nimport { ENERGY_THRESHOLD, PARTICLE_TEMPLATES } from '../../constants';\n\nexport const leafWhirlwind = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let targetPositions = [\n    {\n      x: actor.pos.x - 1,\n      y: actor.pos.y,\n    },\n    {\n      x: actor.pos.x - 1,\n      y: actor.pos.y - 1,\n    },\n    {\n      x: actor.pos.x,\n      y: actor.pos.y - 1,\n    },\n    {\n      x: actor.pos.x + 1,\n      y: actor.pos.y - 1,\n    },\n    {\n      x: actor.pos.x + 1,\n      y: actor.pos.y,\n    },\n    {\n      x: actor.pos.x + 1,\n      y: actor.pos.y + 1,\n    },\n    {\n      x: actor.pos.x,\n      y: actor.pos.y + 1,\n    },\n    {\n      x: actor.pos.x - 1,\n      y: actor.pos.y + 1,\n    },\n  ]\n\n  actor.setNextAction(new MultiTargetAttack({\n    targetPositions,\n    game: engine.game,\n    actor,\n    energyCost: (ENERGY_THRESHOLD * 8),\n    particleTemplate: PARTICLE_TEMPLATES.leaf,\n  }))\n}","import * as StatusEffect from '../../statusEffects';\nimport { AddStatusEffect } from '../../actions';\n\nexport const openInnerGate = (engine) => {\n  let currentActor = engine.actors[engine.currentActor];\n  let nextGate = currentActor.setNextGate();\n  if (nextGate) {\n    let effect = new StatusEffect.Base({\n      game: engine.game,\n      actor: currentActor,\n      name: nextGate.name,\n      lifespan: -1,\n      stepInterval: 100,\n      allowDuplicates: false,\n      onStart: () => {\n        currentActor.speed += nextGate.speedBuff;\n        currentActor.energy += nextGate.speedBuff;\n        currentActor.attackDamage += nextGate.damageBuff;\n        console.log(`${currentActor.name} opened the ${nextGate.name}.`);\n        let nextGateToLabel = currentActor.getNextGate();\n        if (nextGateToLabel) {\n          currentActor.keymap.o.label = nextGateToLabel.name;\n        } else {\n          delete currentActor.keymap.o;\n        }\n      },\n      onStep: () => {\n        currentActor.decreaseDurability(nextGate.durabilityDebuff);\n        currentActor.decreaseDurability(0);\n        console.log(`${currentActor.name} suffers ${nextGate.durabilityDebuff} damage from physical stress.`)\n      },\n    });\n    currentActor.setNextAction(new AddStatusEffect({\n      effect,\n      actor: currentActor,\n      game: engine.game,\n      processDelay: 25,\n      particleTemplate: {\n        renderer: {\n          color: '#3cc2bb',\n          background: '#24fe88',\n          character: '#'\n        }\n      }\n    }));\n  }\n}","import React from 'react';\nimport { SCREENS } from './constants';\n\nclass Title extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"Title\">\n        <div\n          style={{\n            width: '100vw',\n            height: '100vh',\n            backgroundColor: '#e2e2e2',\n          }}\n        >\n          <div class='flow-text'>Hidden Leaf RL</div>\n          <button class='btn' onClick={() => this.props.setActiveScreen(SCREENS.LEVEL)}>Play</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Title;","import React from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport { SCREENS } from './Screen/constants';\nimport Level from './Screen/Level';\nimport Title from './Screen/Title';\n\nclass Nystrum extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      activeScreen: SCREENS.LEVEL,\n    };\n  }\n\n  setActiveScreen (activeScreen) {\n    this.setState({activeScreen})\n  }\n\n  getActiveScreen () {\n    const titleScreen = <Title \n      key={SCREENS.TITLE} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n    />\n    const levelScreen = <Level \n      key={SCREENS.LEVEL} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n    />\n\n    switch (this.state.activeScreen) {\n      case SCREENS.TITLE:\n        return titleScreen\n      case SCREENS.LEVEL:\n        return levelScreen\n      default:\n        return titleScreen\n    }\n  }\n\n  render() {\n    const activeScreen = this.getActiveScreen();\n    return (\n      <div className=\"Nystrum\">\n        <ReactCSSTransitionGroup\n          transitionName=\"fade\"\n          transitionAppear={true}\n          transitionEnter={true}\n          transitionLeave={true}\n          transitionAppearTimeout={500}\n          transitionEnterTimeout={500}\n          transitionLeaveTimeout={300}\n        >\n          { activeScreen }\n        </ReactCSSTransitionGroup>\n      </div>\n    );\n  }\n}\n\nexport default Nystrum;\n","import * as ROT from 'rot-js';\n\nexport const TILE_KEY = () => {\n  return {\n    'GROUND': {\n      background: '#974',\n      foreground: '#aaa',\n      character: '.',\n      passable: true,\n    }\n  }\n}\n\n// RENDERING\n\nexport const DRAW = (map, display) => {\n  for (let key in map) {\n    let parts = key.split(\",\");\n    let x = parseInt(parts[0]);\n    let y = parseInt(parts[1]);\n    let tile = map[key];\n    let { character, foreground, background } = TILE_KEY()[tile.type]\n    if (tile.entities.length > 0) {\n      let entity = tile.entities[tile.entities.length - 1]\n      character = entity.components.renderer.character\n      foreground = entity.components.renderer.color\n      if (entity.components.renderer.background) {\n        background = entity.components.renderer.background\n      }\n    }\n    display.draw(x, y, character, foreground, background);\n  }\n}\n\n// END RENDERING\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const getImpassableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('impasse') && !e.components.impasse.passable)\n}\n\nexport const getDestructableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('destructible'))\n}\n\nexport const delay = (timeDelayed = 100) => {\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const exampleEngine = () => {\n  let scheduler = new ROT.Scheduler.Simple();\n  let engine = new ROT.Engine(scheduler);\n  let output = [];\n  /* sample actor: pauses the execution when dead */\n  let actor = {\n    lives: 3,\n    act: function () {\n      let done = null;\n      let promise = {\n        then: function (cb) { done = cb; }\n      }\n\n      output.push(\".\");\n      // SHOW(output.join(\"\"));\n      console.log(output.join(\"\"));\n\n      this.lives--;\n\n      /* if alive, wait for 500ms for next turn */\n      if (this.lives) {\n        setTimeout(function () { done(); }, 500);\n      }\n\n      return promise;\n    }\n  }\n  scheduler.add(actor, true);\n  engine.start();\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}","import * as Helper from '../lib/helper';\n\nexport const createEntity = (id = null, name = 'Empty', components = {}, world) => {\n  let entity = {\n    id,\n    name,\n    components,\n    world,\n    sendEvent: (target, eventType, parameters) => sendEvent(target, eventType, parameters, world),\n  };\n  return entity\n}\n\nexport const sendEvent = async (target = null, eventType = null, parameters = null, world = null) => {\n  let success = false;\n  for (let key in target.components) {\n    let component = target.components[key]\n    if (component.hasOwnProperty(eventType)) {\n      console.log('SUCCESSFUL EVENT: ', eventType)\n      success = true\n      if (eventType !== 'PREPARE_RENDER') {\n        await Helper.delay();\n      }\n      component[eventType]({ ...parameters, self: target, component: component });\n      Helper.DRAW(world.map, world.display)\n    }\n  }\n  if (!success) {\n    console.log('FAILED EVENT')\n  }\n};","import * as Helper from '../lib/helper';\n\nexport const receiver = (pos) => {\n  return {\n    responded: false,\n    RECIEVE: (parameters) => {\n      let { self, component, message } = parameters\n      console.log(message, pos.x, pos.y)\n      if (!component.responded) {\n        component.responded = true\n        self.sendEvent(parameters.sender, 'hello', 'RECIEVE', { message: 'copy', sender: self })\n      }\n    }\n  }\n}\n\nexport const impasse = (passable = false) => {\n  return {\n    passable,\n    MAKE_PASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = true;\n    },\n    MAKE_IMPASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = false;\n    }\n  }\n}\n\nexport const body = (world, pos = { x: 0, y: 0 }) => {\n  if (world) {\n    return {\n      pos,\n      MOVE: (parameters) => {\n        let { self, component, currentPos, targetPos } = parameters\n        if (world.canOccupy(world.map, targetPos)) {\n          component.pos = targetPos\n          let tile = world.map[Helper.coordsToString(currentPos)]\n          world.map[Helper.coordsToString(currentPos)] = {...tile, entities: []}\n          self.sendEvent(self, 'PREPARE_RENDER')\n          // Helper.DRAW(world.map, world.display)\n        } else {\n          console.log('can\\'t move there')\n        }\n      }\n    }\n  }\n  console.log('No world to occupy');\n  return {}\n}\n\nexport const destructible = (world, durability = 1) => {\n  return {\n    durability,\n    DECREASE_DURABILITY: (parameters) => {\n      let { self, component, value } = parameters;\n      component.durability -= value\n      if (component.durability <= 0) {\n        self.sendEvent(self, 'DESTROY')\n      }\n    },\n    INCREASE_DURABILITY: (parameters) => {\n      let { component, value } = parameters;\n      component.durability += value\n    },\n    DESTROY: (parameters) => {\n      let { self, component, value } = parameters;\n      let tile = world.map[Helper.coordsToString(self.components.body.pos)];\n      world.map[Helper.coordsToString(self.components.body.pos)].entities = tile.entities.filter((e) => e.id !== self.id);\n      // self.sendEvent(self, 'PREPARE_RENDER')\n      // Helper.DRAW(world.map, world.display)\n    }\n  }\n}\n\nexport const attack = (damage = 1) => {\n  return {\n    damage,\n  }\n}\n\nexport const throwable = (world) => {\n  return {\n    THROW: (parameters) => {\n      let { self, component, direction } = parameters;\n      // if next tile is passable\n        // send move action to self\n        // send throw action to self\n      // else\n        // send decrease_durability to entity next in tile\n        // send decrease_durability to self\n      let currentPos = self.components.body.pos;\n      let nextPos = { x: currentPos.x + direction.x, y: currentPos.y + direction.y }\n      let nextTile = world.map[Helper.coordsToString(nextPos)];\n      if (world.canOccupy(world.map, nextPos)) { // change to check for target entity\n        self.sendEvent(\n          self, 'MOVE', {\n            currentPos: currentPos,\n            targetPos: nextPos\n          }\n        )\n        self.sendEvent(self, 'THROW', {direction});\n      } else {\n        if (world.map.hasOwnProperty(Helper.coordsToString(nextPos))) {\n          let impassable_and_destructable_entities = Helper.getDestructableEntities(Helper.getImpassableEntities(nextTile.entities))\n          if (impassable_and_destructable_entities.length > 0) {\n            self.sendEvent(impassable_and_destructable_entities[0], 'DECREASE_DURABILITY', { value: 1 });\n          }\n        }\n        self.sendEvent(self, 'DECREASE_DURABILITY', { value: 1 });\n      }\n    },\n  }\n}\n\nexport const renderer = (world, character = '', color = 'white', background = false) => {\n  return {\n    character,\n    color,\n    background,\n    PREPARE_RENDER: (parameters) => {\n      let { self } = parameters\n      if (self.components.hasOwnProperty('body')) {\n        world.map[Helper.coordsToString(self.components.body.pos)].entities.push(self)\n      }\n    }\n  }\n}","import React from 'react';\nimport '../App.css';\nimport * as ROT from 'rot-js';\nimport * as Entity from './lib/entity'\nimport * as Helper from './lib/helper'\nimport * as Components from './components/index'\n\nconst SHOW = (canvas) => {\n  let d = document.getElementById('display')\n  d.appendChild(canvas)\n}\n\nconst CREATE_LEVEL = (world) => {\n  let digger = new ROT.Map.Arena();\n  let freeCells = [];\n  let digCallback = function (x, y, value) {\n    if (value) { return; }\n    let key = x + \",\" + y;\n    world.map[key] = {\n      type: 'GROUND',\n      entities: [],\n    };\n    freeCells.push(key);\n  }\n  digger.create(digCallback.bind(this));\n}\n\nlet scheduler = new ROT.Scheduler.Simple()\nlet engine = new ROT.Engine(scheduler)\n\nlet world = {\n  canAct: true,\n  scheduler,\n  engine,\n  map: {},\n  display: new ROT.Display({ fontSize: 24, bg: '#099' }),\n  canOccupy: (map, pos) => {\n    if (map.hasOwnProperty(Helper.coordsToString(pos))) {\n      let tile = map[Helper.coordsToString(pos)];\n      if (Helper.TILE_KEY()[tile.type].passable && Helper.getImpassableEntities(tile.entities).length === 0) {\n        return true\n      }\n    } else {\n      return false\n    }\n  },\n}\n\nlet naruto = {\n  ...Entity.createEntity(1, 'Naruto', {\n    reciever: Components.receiver({ x: 10, y: 30 }),\n    body: Components.body(world, { x: 19, y: 21 }),\n    renderer: Components.renderer(world, 'N', 'orange', 'black'),\n  },\n    world,\n  ),\n}\n\nlet box = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 21 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box2 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 19 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box3 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 17 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet kunai = {\n  ...Entity.createEntity(3, 'Kunai', {\n    body: Components.body(world, { x: 20, y: 21 }),\n    renderer: Components.renderer(world, '<>', 'black'),\n    destructible: Components.destructible(world),\n    attack: Components.attack(),\n    throwable: Components.throwable(world),\n  },\n    world,\n  )\n}\n\nclass Original extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.presserRef = React.createRef();\n  }\n\n  handleKeyPress = (event, world, entity) => {\n    let keymap = {\n      w: 0,\n      d: 1,\n      s: 2,\n      a: 3,\n    };\n\n    let code = event.key;\n    let dir = ROT.DIRS[4][keymap[code]];\n    if (code === 't') {\n      kunai.sendEvent(kunai, 'MOVE', {\n        currentPos: kunai.components.body.pos,\n        targetPos: {\n          x: entity.components.body.pos.x + 1,\n          y: entity.components.body.pos.y,\n        },\n      })\n      return kunai.sendEvent(kunai, 'THROW', { direction: { x: 1, y: 0 } })\n    }\n    if (!(code in keymap)) { return; }\n    let newX = entity.components.body.pos.x + dir[0];\n    let newY = entity.components.body.pos.y + dir[1];\n\n    entity.sendEvent(\n      entity, 'MOVE', {\n        currentPos: entity.components.body.pos,\n        targetPos: {\n          x: newX,\n          y: newY\n        }\n      }\n    )\n\n    return;\n    // return Helper.DRAW(world.map, world.display)\n\n  }\n\n  componentDidMount() {\n    ROT.RNG.setSeed(7);\n    SHOW(world.display.getContainer());\n    CREATE_LEVEL(world);\n    naruto.sendEvent(naruto, 'PREPARE_RENDER')\n    // kunai.sendEvent(kunai, 'PREPARE_RENDER')\n    box.sendEvent(box, 'PREPARE_RENDER')\n    box2.sendEvent(box2, 'PREPARE_RENDER')\n    box3.sendEvent(box3, 'PREPARE_RENDER')\n    Helper.DRAW(world.map, world.display)\n    this.presserRef.current.focus();\n  }\n\n  render() {\n    return (\n      <div className=\"App\" ref={this.presserRef} onKeyDown={(event) => this.handleKeyPress(event, world, naruto)} tabIndex='0'>\n        <div id='display'></div>\n      </div>\n    );\n  }\n}\n\nexport default Original;\n","import React from 'react';\nimport './App.css';\nimport Nystrum from './nystrum/Nystrum';\nimport Original from './original/Original';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <Nystrum />\n        {/* <Original /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}