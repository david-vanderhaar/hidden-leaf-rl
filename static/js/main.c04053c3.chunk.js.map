{"version":3,"sources":["nystrum/Screen/constants.js","helper.js","nystrum/engine.js","nystrum/constants.js","nystrum/game.js","nystrum/UI/Button.js","nystrum/UI/Equipment.js","nystrum/UI/Inventory.js","nystrum/UI/Keymap.js","nystrum/actions.js","nystrum/entites.js","nystrum/items.js","nystrum/keymaps.js","nystrum/statusEffects.js","nystrum/Characters/NarutoUzumaki.js","nystrum/Screen/Level.js","nystrum/Characters/RockLee.js","nystrum/Screen/Title.js","nystrum/Nystrum.js","original/lib/helper.js","original/lib/entity.js","original/components/index.js","original/Original.js","App.js","serviceWorker.js","index.js"],"names":["SCREENS","TITLE","LEVEL","delay","timeDelayed","Promise","resolve","setTimeout","getRandomInArray","array","Math","floor","random","length","coordsToString","coords","x","y","calculatePath","game","targetPos","currentPos","topology","map","isPassable","type","astar","ROT","AStar","path","compute","push","slice","calculatePathWithRange","range","getRandomPos","keys","Object","key","split","coordinates","parseInt","text","getDestructableEntities","entites","filter","entity","hasOwnProperty","Engine","statusEffects","actors","currentActor","isRunning","this","actor","gainEnergy","speed","hasEnoughEnergy","action","getAction","result","perform","draw","Helper","processDelay","success","alternative","acting","timePassed","energyCost","processStatusEffects","process","keymap","visibleKeymap","updateReact","newEffect","allowDuplicates","effect","id","name","console","log","onStart","onStop","lifespan","timeToLive","forEach","timeSinceLastStep","stepInterval","onStep","removeDeadStatusEffects","CrankEngine","TILE_KEY","background","character","passable","animation","foreground","DIRECTIONS","N","S","E","W","EQUIPMENT_TYPES","HEAD","TORSO","BACK","HAND","FEET","EQUIPMENT_LAYOUTS","human","item","CLONE_PATTERNS","square","x_offset","y_offset","positions","taken","bigSquare","ALPHABET","Game","engine","display","width","fontSize","bg","tileKey","Constant","pos","tile","entities","ac","digger","Arena","freeCells","create","value","min","max","currentFrame","ceil","bind","randomlyPlaceActorsOnMap","targetTile","document","getElementById","appendChild","getContainer","parts","renderer","color","isPlaced","placeActorOnMap","placeActorsOnMap","removeActorFromMap","presserRef","show","createLevel","current","focus","handleKeyPress","event","code","start","Button","props","onClick","className","children","Equipment","equipment","slot","index","React","Component","Inventory","inventory","Keymap","entries","label","Base","energy","AddStatusEffect","args","addStatusEffect","Say","message","EquipItemFromContainer","equipmentType","itemInSlot","getItemInSlot","addToContainer","unequip","removeFromContainer","equip","UnequipItem","DropItem","PickupItem","it","DestroySelf","destroy","CursorMove","cursorCanOccupyPosition","e","Move","move","Action","MoveMultiple","direction","stepCount","setNextAction","Tackle","additionalAttackDamage","shove","attack","Attack","entityTypes","includes","MultiTargetAttack","targetPositions","ThrowDestructable","move_result","shift","ThrowDestructableGas","Entity","uuid","Attacking","superclass","attackDamage","concat","additional","targets","target","canAttack","damage","getAttackDamage","decreaseDurability","Acting","actions","Rendering","canOccupyPosition","newPos","Playing","nextAction","Destructable","durability","UI_Actor","pipe","initiatedBy","active","Chaser","targetEntity","Player","charge","chargeMax","signHistory","sign","container","itemType","items","slotName","find","foundSlot","DestructiveProjectile","createPath","DestructiveCloudProjectileV2","owner_id","isClone","cloneCount","clonePattern","cloneDeep","offset","clone","cloneDeepWith","referencePos","addActor","isInitialized","child","destroyChild","initialize","TYPE","createProjectileCloud","throwDirection","structureType","createProjectile","structure","position","targetPosition","kunai","fireball","addAlphabeticallyToKeymap","obj","alphabetAllowed","letter","moveCursor","newX","newY","throwKunaiCloud","cursor","removeActor","cloud","Item","keymapCursorToThrowItem","w","activate","d","s","a","t","contains","throwKunai","closeInventory","currentUiActor","visibleInventory","closeEquipment","visibleEquipment","walk","pickupRandom","activateThrowCursor","activateInventory","ui","Escape","keymapEquipFromInventory","activateEquipment","keymapEquipment","activateDrop","keymapDropFromInventory","ENGINE","flyingLotus","speedModifier","drunkWalk","originalDirection","count","activateFlyingLotus","previousKeymap","goToPreviousKeymap","keymapFlyingLotus","l","k","speedBoost","damageDebuff","StatusEffect","removeWraps","j","damageBuff","drunkenFist","h","leafWhirlwind","i","q","g","p","Array","fill","RockLee","Level","showUI","state","createRef","newGameState","setState","setActiveScreen","ref","onKeyDown","tabIndex","Title","style","height","backgroundColor","class","Nystrum","activeScreen","titleScreen","levelScreen","getActiveScreen","transitionName","transitionAppear","transitionEnter","transitionLeave","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","DRAW","components","getImpassableEntities","impasse","createEntity","world","sendEvent","eventType","parameters","component","self","MAKE_PASSABLE","MAKE_IMPASSABLE","body","MOVE","canOccupy","destructible","DECREASE_DURABILITY","INCREASE_DURABILITY","DESTROY","PREPARE_RENDER","scheduler","Simple","canAct","naruto","reciever","responded","RECIEVE","sender","Components","box","box2","box3","throwable","THROW","nextPos","nextTile","impassable_and_destructable_entities","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c04053c3.chunk.js","sourcesContent":["export const SCREENS = {\n  TITLE: 0,\n  LEVEL: 1,\n}","import * as ROT from 'rot-js';\n\nexport const delay = (timeDelayed = 100) => {\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport const getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const calculatePath = (game, targetPos, currentPos, topology = 4) => {\n  let map = game.map\n  let isPassable = function (x, y) {\n    if (map[x + \",\" + y]) {\n      return (map[x + \",\" + y].type === 'GROUND');\n    } else {\n      return false\n    }\n  }\n  let astar = new ROT.Path.AStar(targetPos.x, targetPos.y, isPassable, { topology });\n  let path = [];\n  astar.compute(currentPos.x, currentPos.y, function (x, y) {\n    path.push({ x, y })\n  });\n\n  return path.slice(1);\n}\n\nexport const calculatePathWithRange = (game, targetPos, currentPos, topology, range) => {\n  let path = calculatePath(game, targetPos, currentPos, topology);\n  return path.slice(0, range + 1);\n}\n\nexport const getRandomPos = (map) => {\n  let keys = Object.keys(map);\n  let key = getRandomInArray(keys).split(',');\n  let pos = { x: parseInt(key[0]), y: parseInt(key[1])}\n  return {coordinates: pos, text: key}\n}\n\nexport const getDestructableEntities = (entites) => {\n  return entites.filter((entity) => entity.hasOwnProperty('durability'));\n}","import * as Helper from '../helper';\n\nexport class Engine {\n  constructor({\n    statusEffects = [],\n    actors = [],\n    currentActor = 0,\n    isRunning = false,\n    game = null,\n  }) {\n    this.statusEffects = statusEffects;\n    this.actors = actors;\n    this.currentActor = currentActor;\n    this.isRunning = isRunning;\n    this.game = game;\n  }\n\n  async processV1 () { // a turn-based system using speed and round-robin\n    let actor = this.actors[this.currentActor]\n    actor.gainEnergy(actor.speed);\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      while (true) {\n        let result = action.perform();\n        this.game.draw();\n        await Helper.delay(action.processDelay);\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    return true\n  }\n\n  async process() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      let timePassed = 0;\n      if (actor.hasEnoughEnergy()) {\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        timePassed += action.energyCost;\n        while (true) {\n          let result = await action.perform();\n          this.game.draw();\n          await Helper.delay(action.processDelay);\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n        this.processStatusEffects(timePassed);\n      } else {\n        actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    return true\n  }\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.process();\n\n    }\n    let actor = this.actors[this.currentActor]\n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    await this.game.updateReact(this.game);\n  }\n  \n  stop() {\n    this.isRunning = false;\n  }\n\n  addStatusEffect(newEffect) {\n    if (!newEffect.allowDuplicates) {\n      if (this.statusEffects.filter((effect) => (\n        effect.actor.id === newEffect.actor.id &&\n        effect.name === newEffect.name\n      )).length > 0) {\n        console.log(`${newEffect.name} cannot be applied twice to ${newEffect.actor.name}`);\n        return false;\n      };\n    }\n    newEffect.onStart();\n    this.statusEffects.push(newEffect)\n    return true;\n  }\n\n  removeStatusEffectById (id) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.id !== id) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n\n  removeDeadStatusEffects() {\n    this.statusEffects = this.statusEffects.filter((effect) =>{\n      if (effect.lifespan >= 0 && effect.timeToLive <= 0) {\n        effect.onStop();\n        return false;\n      }\n      return true;\n    });\n  }\n\n  processStatusEffects (timePassed) {\n    this.statusEffects.forEach((effect) => {\n      effect.timeSinceLastStep += timePassed;\n      effect.timeToLive -= timePassed;\n      if (effect.timeSinceLastStep >= effect.stepInterval) {\n        effect.onStep();\n        effect.timeSinceLastStep = 0;\n      } \n    });\n    this.removeDeadStatusEffects();\n  }\n}\n\nexport class CrankEngine extends Engine {\n  async process() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (actor.hasEnoughEnergy()) {\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        while (true) {\n          let result = await action.perform();\n          this.game.draw();\n          // await Helper.delay(action.processDelay);\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n      } else {\n        // actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    // this.currentActor = (this.currentActor + 1) % this.actors.length;\n    this.currentActor += 1;\n    if (this.currentActor + 1 >= this.actors.length) {\n      this.currentActor = 0;\n      this.actors.forEach((actor) => actor.gainEnergy(actor.speed));\n      return false;\n    }\n    return true\n  }\n}","export const ENERGY_THRESHOLD = 100;\n\nexport const TILE_KEY = {\n  'GROUND': {\n    background: '#424242',\n    character: '',\n    passable: true,\n  },\n  'WATER': {\n    animation: [\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#8aa', character: '▒', passable: false, },\n      { background: '#424242', foreground: '#8aa', character: '▓', passable: false, },\n    ],\n    background: '#9dc3d3',\n    character: '░',\n    passable: false,\n  },\n  'WIN': {\n    background: 'white',\n    foreground: 'black',\n    character: 'W',\n    passable: true,\n  }\n}\n\nexport const HAND_SIGNS = {\n  Power: {\n    type: 'Power',\n    name: 'Rin',\n    description: 'Strength of mind, body, spirit',\n  },\n  Energy: {\n    type: 'Energy',\n    name: 'Pyo',\n    description: 'energy direction',\n  },\n  Harmony: {\n    type: 'Harmony',\n    name: 'To',\n    description: 'one- ness with the universe or self',\n  },\n  Healing: {\n    type: 'Healing',\n    name: 'Sha',\n    description: 'of self and others',\n  },\n  Intuition: {\n    type: 'Intuition',\n    name: 'Kai',\n    description: 'premonition of danger, feeling others intent',\n  },\n  Awareness: {\n    type: 'Awareness',\n    name: 'Jin',\n    description: 'feeling thoughts of others, perhaps hiding your own',\n  },\n  Dimension: {\n    type: 'Dimension',\n    name: 'Retsu',\n    description: 'control of time and space',\n  },\n  Creation: {\n    type: 'Creation',\n    name: 'Zai',\n    description: 'understanding nature',\n  },\n  Absolute: {\n    type: 'Absolute',\n    name: 'Zen',\n    description: 'enlightenment',\n  }, \n}\n\nexport const DIRECTIONS = {\n  N: [0, -1],\n  S: [0, 1],\n  E: [1, 0],\n  W: [-1, 0],\n}\n\nexport const EQUIPMENT_TYPES = {\n  HEAD: 'HEAD',\n  TORSO: 'TORSO',\n  BACK: 'BACK',\n  HAND: 'HAND',\n  FEET: 'FEET',\n}\n\nexport const EQUIPMENT_LAYOUTS = {\n  human: () => {\n    return [\n      {type: EQUIPMENT_TYPES.HEAD, name: 'head', item: null},\n      {type: EQUIPMENT_TYPES.TORSO, name: 'torso', item: null},\n      {type: EQUIPMENT_TYPES.BACK, name: 'back', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'left_hand', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'right_hand', item: null},\n      {type: EQUIPMENT_TYPES.FEET, name: 'feet', item: null},\n    ]\n  }\n}\n\nexport const CLONE_PATTERNS = {\n  square: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n    ]\n},\n  bigSquare: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 2, y: 2, taken: false, },\n      { x: 2, y: 0, taken: false, },\n      { x: 2, y: -2, taken: false, },\n      { x: 0, y: -2, taken: false, },\n      { x: -2, y: -2, taken: false, },\n      { x: -2, y: 0, taken: false, },\n      { x: -2, y: 2, taken: false, },\n    ],\n  }\n}\n\nexport const ALPHABET = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];","import React from 'react';\nimport * as ROT from 'rot-js';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\n\nexport class Game {\n  constructor({\n    engine = null,\n    map = {},\n    display = new ROT.Display({ \n      // forceSquareRatio: true,\n      width: 90,\n      // height: 100,\n      fontSize: 24, \n      bg: '#424242' \n    }),\n    tileKey = Constant.TILE_KEY,\n  }) {\n    this.engine = engine;\n    this.map = map;\n    this.display = display;\n    this.tileKey = tileKey;\n  }\n\n  randomlyPlaceActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      let pos = Helper.getRandomPos(this.map).coordinates\n      let tile = this.map[Helper.coordsToString(pos)]\n      actor.pos = {...pos}\n      tile.entities.push(actor);\n    })\n  }\n\n  placeActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      let tile = this.map[Helper.coordsToString(actor.pos)]\n      if (tile) {\n        tile.entities.push(actor);\n      } else {\n        console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      }\n    })\n  }\n\n  placeActorOnMap(actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (tile) {\n      tile.entities.push(actor);\n      return true\n    } else {\n      console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      return false\n    }\n  }\n\n  removeActorFromMap (actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    this.map[Helper.coordsToString(actor.pos)].entities = tile.entities.filter((ac) => ac.id !== actor.id);\n  }\n\n  createLevel () {\n    let digger = new ROT.Map.Arena();\n    let freeCells = [];\n    let digCallback = function (x, y, value) {\n      if (value) { return; }\n      let key = x + \",\" + y;\n      let type = 'GROUND';\n      let currentFrame = 0;\n\n      if (Constant.TILE_KEY[type].animation) {\n        currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n      }\n\n      this.map[key] = {\n        type,\n        currentFrame,\n        entities: [],\n      };\n      freeCells.push(key);\n    }\n    digger.create(digCallback.bind(this));\n    this.map[`10,10`] = {\n      type: 'WIN',\n      entities:[],\n    }\n    this.randomlyPlaceActorsOnMap()\n  }\n\n  canOccupyPosition (pos) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      let hasImpassableEntity = targetTile.entities.filter((entity) => !entity.passable).length > 0;\n      if (!hasImpassableEntity) {\n        let tile = this.map[Helper.coordsToString(pos)];\n        if (this.tileKey[tile.type].passable) {\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  cursorCanOccupyPosition(pos) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  show () {\n    let d = document.getElementById('display')\n    d.appendChild(this.display.getContainer())\n  }\n\n  draw () {\n    for (let key in this.map) {\n      let parts = key.split(\",\");\n      let x = parseInt(parts[0]);\n      let y = parseInt(parts[1]);\n      let tile = this.map[key];\n      let { character, foreground, background } = this.tileKey[tile.type]\n\n      // Proto code to handle tile animations\n      // let tileRenderer = this.tileKey[tile.type]\n      // if (tileRenderer.animation) {\n      //   let frame = tileRenderer.animation[tile.currentFrame];\n        \n      //   character = frame.character;\n      //   foreground = frame.foreground;\n      //   background = frame.background;\n      //   tile.currentFrame = (tile.currentFrame + 1) % tileRenderer.animation.length;\n      // }\n\n      if (tile.entities.length > 0) {\n        let entity = tile.entities[tile.entities.length - 1]\n        character = entity.renderer.character\n        foreground = entity.renderer.color\n        if (entity.renderer.background) {\n          background = entity.renderer.background\n        }\n      }\n      this.display.draw(x, y, character, foreground, background);\n    }\n  }\n\n  addActor (actor, engine = this.engine) {\n    let isPlaced = this.placeActorOnMap(actor); // replace with placeActorOnMap\n    if (!isPlaced) { return false }\n    engine.actors.push(actor);\n    this.draw();\n  }\n\n  placeAndDrawActor (actor) {\n    this.placeActorsOnMap(); // replace with placeActorOnMap\n    this.draw();\n  }\n\n  removeActor (actor) {\n    this.engine.actors = this.engine.actors.filter((ac) => ac.id !== actor.id);\n    // this.engine.currentActor = this.engine.actors.length - 1;\n    // this.engine.currentActor = (this.engine.currentActor) % this.engine.actors.length;\n    // this.engine.currentActor = (this.engine.currentActor + 1) % this.engine.actors.length;\n    this.removeActorFromMap(actor);\n    this.draw();\n  }\n\n  initialize (presserRef) {\n    this.engine.game = this;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this;\n    });\n    this.show();\n    this.createLevel();\n    this.draw();\n    presserRef.current.focus();\n  }\n}\n\n/************************** UI ********************************/\nexport const handleKeyPress = (event, engine) => {\n  if (!engine.isRunning) {\n    let actor = engine.actors[engine.currentActor];\n    let keymap = actor.keymap;\n    let code = event.key;\n    if (!(code in keymap)) { return; }\n    keymap[code]['activate']();\n    engine.start()\n  }\n  return;\n}\n\nexport const DisplayElement = (presserRef, handleKeyPress, engine) => {\n  return (\n    <div\n      id='display'\n      ref={presserRef}\n      onKeyDown={(event) => handleKeyPress(event, engine)}\n      tabIndex='0'\n    />\n  )\n}\n/************************** UI ********************************/\n","import React from 'react';\n\nfunction Button(props) {\n  return (\n    <button\n      onClick={props.onClick}\n      className='btn grey darken-3'\n    >\n      {props.children}  \n    </button>\n  )\n}\n\nexport default Button;\n","import React from 'react';\nimport Button from './Button';\n\nclass Equipment extends React.Component {\n  render() {\n    return (\n      <div className=\"Equipment UI\">\n        <div className='flow-text'>Equipment</div>\n        {\n          this.props.equipment && (\n            this.props.equipment.map((slot, index) => {\n              return (\n                <Button key={index} onClick={() => null}>\n                  {slot.name} {slot.item ? slot.item.renderer.character : ''}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Equipment;","import React from 'react';\nimport Button from './Button';\n\nclass Inventory extends React.Component {\n  render() {\n    return (\n      <div className=\"Inventory UI\">\n        <div className='flow-text'>Inventory</div>\n        {\n          this.props.inventory && (\n            this.props.inventory.map((item, index) => {\n              return (\n                <Button key={index} onClick={() => null}>\n                  {index} {item.name} {item.renderer.character}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Inventory;","import React from 'react';\nimport Button from './Button';\n\nclass Keymap extends React.Component {\n  render() {\n    return (  \n      <div className=\"Keymap UI\">\n        <div className='flow-text'>Keymap</div>\n        {\n          \n          this.props.keymap && (\n            Object.entries(this.props.keymap).map(([key, value], index) => {\n              return (\n                <Button key={index} onClick={() => null}>\n                  {key} {value.label}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Keymap;","import * as Helper from '../helper';\nimport * as Action from './actions';\nimport * as Constant from './constants';\nimport { cloneDeep } from 'lodash';\nimport uuid from 'uuid/v1';\n\nexport class Base {\n  constructor({game, actor, energyCost = 100, processDelay = 50}) {\n    this.actor = actor\n    this.game = game\n    this.energyCost = energyCost\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    console.log(`${this.actor.name} performs`)\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n}\n\nexport class AddStatusEffect extends Base {\n  constructor({ effect, processDelay = 0, ...args }) {\n    super({ ...args });\n    this.effect = effect\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = this.game.engine.addStatusEffect(this.effect);\n    if (success) this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Say extends Base {\n  constructor({ message, processDelay = 50, ...args}) {\n    super({...args});\n    this.message = message\n    this.processDelay = processDelay\n  }\n  perform() {\n    console.log(`${this.actor.name} says ${this.message}`);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SayManyThings extends Base {\n  constructor({ messages, processDelay = 50, ...args}) {\n    super({...args});\n    this.messages = messages\n    this.processDelay = processDelay\n  }\n  perform() {\n    let message = this.messages.shift();\n    if (message) {\n      console.log(`${this.actor.name} says ${message}`);\n      this.actor.energy -= this.energyCost;\n    }\n    if (this.messages.length) {\n      this.actor.setNextAction(this);\n    }\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class EquipItemFromContainer extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.actor.addToContainer(itemInSlot);\n        this.actor.unequip(itemInSlot);\n      }\n      this.actor.removeFromContainer(this.item);\n      this.actor.equip(this.item.equipmentType, this.item);\n      console.log(`${this.actor.name} equips ${this.item.name}.`);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class EquipItemFromTile extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(itemInSlot);\n      }\n\n      let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n      this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n      \n      this.actor.equip(this.item);\n      console.log(`${this.actor.name} equips ${this.item.name}.`);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class UnequipItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    console.log(`${this.actor.name} puts ${this.item.name} away.`);\n    this.actor.unequip(this.item);\n    this.actor.addToContainer(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DropItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    console.log(`${this.actor.name} drops ${this.item.name}.`);\n    this.actor.removeFromContainer(this.item);\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class PickupItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    console.log(`${this.actor.name} picks up ${this.item.name}.`);\n    this.actor.addToContainer(this.item);\n    let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DestroySelf extends Base {\n  constructor({processDelay = 0, ...args}) {\n    super({...args});\n    this.processDelay = processDelay\n  }\n  perform() {\n    // console.log(`${this.actor.name} is self-destructing`);\n    this.actor.energy -= this.energyCost;\n    this.actor.destroy();\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class CloneSelf extends Base {\n  constructor({processDelay = 0, ...args}) {\n    super({...args});\n    this.processDelay = processDelay\n  }\n  perform() {\n    this.actor.energy -= this.energyCost;\n    console.log(`${this.actor.name} is cloning itself`);\n    let clone = cloneDeep(this.actor);\n    clone.game = this.actor.game;\n    clone.id = uuid();\n    this.game.addActor(clone);\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class Charge extends Base {\n  constructor({chargeAmount, ...args}) {\n    super({...args});\n    this.chargeAmount = chargeAmount;\n  }\n  perform() {\n    console.log(`${this.actor.name} is charging up!`);\n    this.actor.energy -= this.energyCost;\n    this.actor.increaseCharge(this.chargeAmount);\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class Release extends Base {\n  constructor({ chargeCost, ...args }) {\n    super({ ...args });\n    this.chargeCost = chargeCost;\n  }\n  perform() {\n    let success = false;\n    if (this.actor.charge >= this.chargeCost) {\n      console.log(`${this.actor.name} is releasing ${this.chargeCost} volts!`);\n      this.actor.energy -= this.energyCost;\n      this.actor.decreaseCharge(this.chargeCost);\n      success = true;\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Sign extends Base {\n  constructor({ sign, ...args }) {\n    super({ ...args });\n    this.sign = sign;\n  }\n  perform() {\n    console.log(`${this.actor.name} threw a ${this.sign.name} sign.`);\n    this.actor.addSign(this.sign);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SignRelease extends Base {\n  constructor({requiredSequence = [], ...args}) {\n    super({...args});\n    this.requiredSequence = requiredSequence;\n  }\n\n  requiredSequenceIsFulfilled () {\n    let signHistory = this.actor.signHistory.concat();\n    let relevantHistory = signHistory.slice(\n      Math.max(signHistory.length - this.requiredSequence.length, 0)\n    )\n    let result = JSON.stringify(relevantHistory) === JSON.stringify(this.requiredSequence);\n    return result\n  }\n\n  perform() {\n    let success = false;\n    if (this.requiredSequenceIsFulfilled()) {\n      console.log(\n        `${this.actor.name} is releasing the power of ${this.requiredSequence.map(\n          (sign) => sign.type\n        ).join(' and ')}!`\n      );\n      this.actor.energy -= this.energyCost;\n      success = true;\n      this.actor.clearSigns();\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class CursorMove extends Base {\n  constructor({ targetPos, processDelay = 0, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    if (this.game.cursorCanOccupyPosition(this.targetPos)) {\n      let tile = this.game.map[Helper.coordsToString(this.actor.pos)]\n      this.game.map[Helper.coordsToString(this.actor.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.actor.id) }\n      this.actor.pos = this.targetPos\n      this.game.map[Helper.coordsToString(this.targetPos)].entities.push(this.actor);\n      success = true;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Move extends Base {\n  constructor({ targetPos, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class MoveMultiple extends Base {\n  constructor({ direction, stepCount, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.move(targetPos)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Tackle extends MoveMultiple {\n  constructor({ direction, stepCount, additionalAttackDamage = 0, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.additionalAttackDamage = additionalAttackDamage;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.shove(targetPos, this.direction)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      success = true;\n    } else {\n      success = true;\n      this.actor.attack(targetPos, this.additionalAttackDamage);\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Attack extends Base {\n  constructor({ targetPos, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) { \n      return { \n        success: true, \n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      } \n    }\n    \n    success = this.actor.attack(this.targetPos);\n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class MultiTargetAttack extends Base {\n  constructor({ targetPositions, processDelay = 25, ...args }) {\n    super({ ...args });\n    this.targetPositions = targetPositions\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    if (!this.actor.entityTypes.includes('ATTACKING')) {\n      return {\n        success: true,\n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      }\n    }\n    this.targetPositions.forEach((targetPos) => {\n      let attackSuccess = this.actor.attack(targetPos);\n      if (attackSuccess) success = true;\n    })\n\n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ThrowDestructable extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    }\n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      let attackSuccess = this.actor.attack(this.targetPos);\n      if (attackSuccess) {\n        alternative = new Action.DestroySelf({\n          game: this.game,\n          actor: this.actor,\n          energyCost: Constant.ENERGY_THRESHOLD,\n          processDelay: 0,\n        });\n      }\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class ThrowDestructableGas extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n    this.processDelay = 0\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    } \n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      this.actor.attack(this.targetPos)\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class CrankEngine extends Base {\n  constructor({ engine, ...args }) {\n    super({ ...args });\n    this.engine = engine;\n  }\n  async perform() {\n    let success = true;\n    let alternative = null;\n\n    console.log(`${this.actor.name} is cranking its engine.`);\n    try {\n      await this.engine.start();\n      this.actor.energy -= this.energyCost;\n    } catch (error) {\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n      });\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n","import uuid from 'uuid/v1';\nimport pipe from 'lodash/fp/pipe';\nimport * as Helper from '../helper';\nimport * as Constant from './constants';\nimport * as Action from './actions';\nimport * as Engine from './engine';\nimport { cloneDeep, cloneDeepWith } from 'lodash';\nimport { access } from 'fs';\n\nexport class Entity {\n  constructor({ game = null, passable = false}) {\n    let id = uuid();\n    this.entityTypes = ['Entity']\n    this.id = id;\n    this.game = game;\n    this.passable = passable;\n  }\n}\n\nconst Parent = superclass => class extends superclass {\n  constructor({ children = [], engine = new Engine.CrankEngine({}), ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('PARENT');\n    this.children = children;\n    this.engine = engine;\n    this.isInitialized = false;\n  }\n\n  destroyChild(child) {\n    child.energy = 0;\n    let tile = this.game.map[Helper.coordsToString(child.pos)];\n    this.game.map[Helper.coordsToString(child.pos)].entities = tile.entities.filter((e) => e.id !== child.id);\n    this.engine.actors = this.engine.actors.filter((e) => e.id !== child.id);\n    // this.game.engine.currentActor = 0;\n    this.game.draw()\n  }\n\n  canAttack (entity) {\n    const childIds = this.children.map((child) => child.id); \n    return !childIds.includes(entity.id)\n  }\n  \n  initialize() {\n    this.isInitialized = true;\n    this.engine.game = this.game;\n    this.engine.actors = this.children;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this.game;\n      actor.destroy = () => {this.destroyChild(actor)};\n      actor.canAttack = this.canAttack.bind(this);\n      // actor.canAttack = (entity) => {this.canAttack(entity)};\n      this.game.addActor(actor, this.engine);\n    });\n  }\n\n  getAction(game) {\n    // crank engine one turn\n    if (!this.isInitialized) {\n      this.initialize()\n    }\n\n    let result = new Action.CrankEngine({\n      game,\n      actor: this,\n      engine: this.engine,\n      energyCost: Constant.ENERGY_THRESHOLD,\n    });\n\n    return result;\n  }\n\n}\n\nconst UI = superclass => class extends superclass {\n  constructor({ initiatedBy = null, ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('UI');\n    this.initiatedBy = initiatedBy;\n    this.active = true;\n  }\n\n  hasEnoughEnergy() {\n    return this.active;\n  }\n}\n\nexport const Attacking = superclass => class extends superclass {\n  constructor({attackDamage = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('ATTACKING')\n    this.attackDamage = attackDamage;\n  }\n\n  getAttackDamage (additional = 0) {\n    return this.attackDamage + additional;\n  }\n\n  canAttack (entity) {\n    return true;\n  }\n\n  attack (targetPos, additional = 0) {\n    let success = false;\n    let tile = this.game.map[Helper.coordsToString(targetPos)]\n    if (!tile) { return success }\n    let targets = Helper.getDestructableEntities(tile.entities);\n    if (targets.length > 0) {\n      let target = targets[0];\n      if (this.canAttack(target)) {\n        let damage = this.getAttackDamage(additional);\n        if (this.entityTypes.includes('EQUIPING')) {\n          this.equipment.forEach((slot) => {\n            if (slot.item) {\n              if (slot.item.entityTypes.includes('ATTACKING')) {\n                damage += slot.item.getAttackDamage();\n              }\n            }\n          });\n        }\n        console.log(`${this.name} does ${damage} to ${target.name}`);\n        target.decreaseDurability(damage);\n        success = true;\n      }\n    }\n\n    return success;\n  }\n}\n\nexport const Equipable = superclass => class extends superclass {\n  constructor({name = 'nameless', equipmentType = Constant.EQUIPMENT_TYPES.HAND, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('EQUIPABLE')\n    this.name = name;\n    this.equipmentType = equipmentType;\n  }\n}\n\nconst Acting = superclass => class extends superclass {\n  constructor({name, actions = [], speed, energy = 0, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('ACTING')\n    this.name = name;\n    this.actions = actions;\n    this.speed = speed;\n    this.energy = speed;\n  }\n\n  getAction() {\n    let action = Helper.getRandomInArray(this.actions)\n    if (action) { return action }\n  }\n\n  gainEnergy(value = this.speed) {\n    this.energy += value;\n  }\n\n  hasEnoughEnergy() {\n    return this.energy > 0;\n  }\n}\n\nconst Rendering = superclass => class extends superclass {\n  constructor({pos = {x: 0, y: 0}, renderer, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('RENDERING')\n    this.pos = pos;\n    this.renderer = {...renderer};\n  }\n\n  getPosition () {\n    return this.pos;\n  }\n\n  move (targetPos) {\n    let success = false;\n    if (this.game.canOccupyPosition(targetPos)) {\n      let tile = this.game.map[Helper.coordsToString(this.pos)]\n      this.game.map[Helper.coordsToString(this.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.id) }\n      this.pos = targetPos\n      this.game.map[Helper.coordsToString(targetPos)].entities.push(this);\n      success = true;\n    }\n    return success;\n  }\n\n  shove (targetPos, direction) {\n    let success = false;\n    let targetTile = this.game.map[Helper.coordsToString(targetPos)];\n    if (targetTile) {\n      targetTile.entities.map((entity) => { \n        if (!entity.passable) {\n          let newX = entity.pos.x + direction[0];\n          let newY = entity.pos.y + direction[1];\n          let newPos = { x: newX, y: newY };\n          entity.move(newPos);\n        }\n      });\n    }\n    success = this.move(targetPos);\n    return success;\n  }\n}\n\nconst Containing = superclass => class extends superclass {\n  constructor({container = [], ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CONTAINING')\n    this.container = container;\n  }\n\n  contains (itemType) {\n    let container = this.container;\n    let items = container.filter((item) => item.name === itemType);\n    return items.length > 0 ? items[0] : false;\n  }\n\n  addToContainer (item) {\n    this.container.push(item);\n  }\n  \n  removeFromContainer (item) {\n    this.container = this.container.filter((it) => it.id !== item.id);\n  }\n}\n\nconst Equiping = superclass => class extends superclass {\n  constructor({equipment = Constant.EQUIPMENT_LAYOUTS.human(), ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('EQUIPING')\n    this.equipment = equipment;\n  }\n\n  getItemInSlot (slotName) {\n    let openSlots = this.equipment.filter((slot) => {\n      return (slot.item === null && slot.type === slotName)\n    })\n    if (openSlots.length > 0) { return false; }\n    let slot = this.equipment.find((slot) => slot.type === slotName);\n    if (!slot) { return false; }\n    if (!slot.item) { return false; }\n    return slot.item;\n  }\n\n  equip (slotName, item) {\n    let foundSlot = false;\n    this.equipment = this.equipment.map((slot) => {\n      if (!foundSlot && slot.type === slotName && slot.item === null) {\n        slot.item = item;\n        foundSlot = true;\n      }\n      return slot;\n    })\n  }\n  \n  unequip(item) {\n    this.equipment = this.equipment.map((slot) => {\n      if (slot.item) {\n        if (slot.item.id === item.id) {\n          slot.item = null;\n        }\n      }\n      return slot;\n    })\n  }\n}\n\nconst Charging = superclass => class extends superclass {\n  constructor({charge = 10, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHARGING')\n    this.charge = charge;\n    this.chargeMax = charge;\n  }\n\n  decreaseCharge(value) {\n    this.charge = Math.max(0, this.charge - value);\n  }\n  \n  increaseCharge(value) {\n    this.charge = Math.min(this.chargeMax, this.charge + value);\n  }\n}\n\nconst Signing = superclass => class extends superclass {\n  constructor({...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('SIGNING')\n    this.signHistory = [];\n  }\n\n  addSign(sign) {\n    if (this.signHistory.length >= 4) {\n      this.signHistory.shift();\n    }\n    this.signHistory.push(sign);\n  }\n  \n  clearSigns() {\n    this.signHistory = [];\n  }\n}\n\nconst Playing = superclass => class extends superclass {\n  constructor({keymap = {}, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PLAYING')\n    this.nextAction = null;\n    this.keymap = keymap;\n  }\n\n    setNextAction(action) {\n      this.nextAction = action;\n    }\n\n    getAction() {\n      let action = this.nextAction;\n      this.nextAction = null;\n      return action;\n    }\n}\n\nconst Projecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    if (this.game.canOccupyPosition(targetPos)) {\n      this.path.shift();\n    }\n    return result;\n  }\n}\n\n\n\nconst DestructiveProjecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowDestructable({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst GaseousDestructiveProjecting = superclass => class extends superclass {\n  constructor({owner_id = null, path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS_DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n    this.owner_id = owner_id;\n  }\n\n  canAttack (entity) {\n    let success = super.canAttack();\n    if (success) {\n      success = this.owner_id === null || (entity.owner_id !== this.owner_id);\n    }\n    return success\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowDestructableGas({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst Gaseous = superclass => class extends superclass {\n  constructor({\n    isClone = false,\n    cloneCount = 0,\n    clonePattern = Constant.CLONE_PATTERNS.square,\n    ...args\n  }) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS')\n    this.isClone = isClone;\n    this.cloneCount = cloneCount;\n    this.clonePattern = cloneDeep(clonePattern);\n  }\n\n  getAction (game) {\n    let offset = this.clonePattern.positions.find((pos) => !pos.taken);\n    if (!this.isClone && offset) {\n      offset.taken = true\n      let clone = cloneDeepWith(this, (value, key) => {\n        switch (key) {\n          case 'id':\n          case 'game':\n          case 'engine':\n          case 'clones':\n            return null\n            break;\n          default:\n            return undefined\n            break;\n        }\n      });\n      clone.game = game;\n      clone.id = uuid();\n      if (this.hasOwnProperty('pos')) {\n        let referencePos = this.pos\n        clone.pos = {\n          x: referencePos.x + offset.x,\n          y: referencePos.y + offset.y\n        }\n      }\n      if (clone.hasOwnProperty('path')) {\n        clone.path = clone.path.map((pos) => {\n          return {\n            x: pos.x + offset.x,\n            y: pos.y + offset.y\n          }\n        })\n      }\n      clone.isClone = true\n      this.cloneCount += 1\n      game.addActor(clone);\n    }\n\n    let result = super.getAction(game);\n    return result;\n  }\n}\n\nconst Chasing = superclass => class extends superclass {\n  constructor({targetEntity = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHASING')\n    this.targetEntity = targetEntity;\n  }\n\n  getAction(game) {\n    let path = Helper.calculatePath(game, this.targetEntity.pos, this.pos);\n    let targetPos = path.length > 0 ? path[0] : this.pos;\n\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    return result;\n  }\n}\n\nconst Destructable = superclass => class extends superclass {\n  constructor({durability = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DESTRUCTABLE')\n    this.durability = durability;\n  }\n\n  decreaseDurability (value) {\n    this.durability -= value\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n\n  increaseDurability (value) {\n    this.durability += value\n  }\n\n  destroy () {\n    this.energy = 0;\n    let tile = this.game.map[Helper.coordsToString(this.pos)];\n    this.game.map[Helper.coordsToString(this.pos)].entities = tile.entities.filter((e) => e.id !== this.id);\n    this.game.engine.actors = this.game.engine.actors.filter((e) => e.id !== this.id);\n    // this.game.engine.currentActor = 0;\n    this.game.draw()\n  }\n}\n\nexport const UI_Actor = pipe(\n  Acting, \n  Rendering, \n  Playing, \n  UI\n)(Entity);\n\nexport const Actor = pipe(\n  Acting, \n  Rendering\n)(Entity);\n\nexport const Chaser = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable\n)(Entity);\n\nexport const Player = pipe(\n  Acting, \n  Rendering, \n  Destructable, \n  Charging, \n  Signing, \n  Containing, \n  Equiping, \n  Attacking, \n  Playing\n)(Entity);\n\nexport const Weapon = pipe(\n  Rendering, \n  Equipable, \n  Attacking\n)(Entity);\n\nexport const DestructiveProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  DestructiveProjecting, \n  Destructable\n)(Entity);\n\nexport const DestructiveCloudProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  GaseousDestructiveProjecting, \n  Destructable, \n  Gaseous\n)(Entity);\n\nexport const DestructiveCloudProjectileV2 = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);","import * as Entity from './entites';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\n\nexport const TYPE = {\n  KUNAI: 'Kunai',\n  SWORD: 'Sword',\n}\n\nconst createProjectileCloud = ({ \n  engine, \n  actor, \n  targetPos, \n  throwDirection,\n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: actor.pos.x + slot.x + (throwDirection.x * structure.x_offset),\n      y: actor.pos.y + slot.y + (throwDirection.y * structure.y_offset)\n    }\n\n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nexport const kunaiCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: kunai,\n})\n\nexport const fireballCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: fireball,\n})\n\nexport const kunai = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '🗡️',\n    color: 'white',\n    background: '',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireball = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '🔥',\n    color: 'wheat',\n    background: 'tomato',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireballGas = (engine, actor, targetPos) => {\n  return new Entity.DestructiveCloudProjectile({\n    game: engine.game,\n    owner_id: actor ? actor.id : null,\n    targetPos,\n    passable: true,\n    pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n    renderer: {\n      // character: '@',\n      character: '🔥',\n      color: 'wheat',\n      background: 'tomato',\n    },\n    name: TYPE.KUNAI,\n    speed: 100,\n    range: 10,\n    clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n    // clonePattern: Constant.CLONE_PATTERNS.square,\n  })\n}\n\nexport const waterball = (engine, actor, targetPos) => new Entity.DestructiveCloudProjectile({\n  game: engine.game,\n  owner_id: actor ? actor.id : null,\n  targetPos,\n  passable: true,\n  pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n  renderer: {\n    // character: '~',\n    character: '🌊',\n    color: 'silver',\n    background: 'lightslategrey',\n  },\n  name: TYPE.KUNAI,\n  speed: 800,\n  range: 10,\n  clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n  // clonePattern: Constant.CLONE_PATTERNS.square,\n})\n\nexport const sword = (engine) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: '',\n  },\n})","import * as Constant from './constants';\nimport * as Action from './actions';\nimport * as Helper from '../helper';\nimport * as Entity from './entites';\nimport * as Item from './items';\n\n/******************** Helper ********************/\nconst addAlphabeticallyToKeymap = (keymap, obj) => {\n  let alphabetAllowed = Constant.ALPHABET.filter((letter) => {\n    return !Object.keys(keymap).includes(letter);\n  });\n  keymap[alphabetAllowed[0]] = obj;\n}\n\n/******************** UI ********************/\nconst moveCursor = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Action.CursorMove({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}\n\nconst throwKunai = (engine, actor) => {\n  let cursor = engine.actors[engine.currentActor];\n  cursor.active = false;\n  let throwDirection = {\n    x: Math.sign(cursor.pos.x - actor.pos.x),\n    y: Math.sign(cursor.pos.y - actor.pos.y),\n  }\n  engine.game.removeActor(cursor);\n  let kunai = actor.contains(Item.TYPE.KUNAI);\n  if (kunai) {\n    kunai.game = engine.game;\n    kunai.pos = { \n      x: actor.pos.x + throwDirection.x,  \n      y: actor.pos.y + throwDirection.y,  \n    };\n    kunai.targetPos = { ...cursor.pos };\n    actor.removeFromContainer(kunai);\n    engine.actors.push(kunai);\n    kunai.createPath(engine.game);\n    engine.game.placeActorsOnMap();\n    engine.game.draw();\n    actor.setNextAction(\n      new Action.Say({\n        message: `I'll get you with this kunai!`,\n        game: engine.game,\n        actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    )\n  } else {\n    console.log('I have no kunais left');\n  }\n}\n\nconst throwKunaiCloud = (engine, actor) => {\n  let cursor = engine.actors[engine.currentActor];\n  cursor.active = false;\n  let throwDirection = {\n    x: Math.sign(cursor.pos.x - actor.pos.x),\n    y: Math.sign(cursor.pos.y - actor.pos.y),\n  }\n  engine.game.removeActor(cursor);\n  let cloud = Item.fireballCloud({\n  // let cloud = Item.kunaiCloud({\n    engine, \n    actor, \n    targetPos: {...cursor.pos},\n    throwDirection,\n  });\n  if (cloud) {\n    cloud.pos = { \n      x: actor.pos.x + throwDirection.x,  \n      y: actor.pos.y + throwDirection.y,  \n    };\n    engine.actors.push(cloud);\n    actor.setNextAction(\n      new Action.Say({\n        message: `I'll get you with these kunai!`,\n        game: engine.game,\n        actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    )\n  } else {\n    console.log('I have no kunais left');\n  }\n}\n\nexport const keymapCursorToThrowItem = (engine, initiatedBy) => {\n  return {\n    w: {\n      activate: () => moveCursor(Constant.DIRECTIONS.N, engine),\n      label: 'move',\n    },\n    d: {\n      activate: () => moveCursor(Constant.DIRECTIONS.E, engine),\n      label: 'move',\n    },\n    s: {\n      activate: () => moveCursor(Constant.DIRECTIONS.S, engine),\n      label: 'move',\n    },\n    a: {\n      activate: () => moveCursor(Constant.DIRECTIONS.W, engine),\n      label: 'move',\n    },\n    t: {\n      activate: () => throwKunaiCloud(engine, initiatedBy),\n      label: 'Throw Cloud',\n    },\n    y: {\n      activate: () => throwKunai(engine, initiatedBy),\n      label: 'Throw Kunai',\n    },\n  };\n}\n\nconst closeInventory = (engine) => {\n  let currentUiActor = engine.actors[engine.currentActor];\n  engine.game.removeActor(currentUiActor);\n  engine.currentActor = engine.actors.length - 1;\n  engine.game.visibleInventory = null;\n}\n\nconst closeEquipment = (engine) => {\n  let currentUiActor = engine.actors[engine.currentActor];\n  engine.game.removeActor(currentUiActor);\n  engine.currentActor = engine.actors.length - 1;\n  engine.game.visibleEquipment = null;\n}\n\nexport const keymapEquipment = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      activate: () => closeEquipment(engine),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.equipment.filter((slot) => slot.item).map((slot) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to unequip ${slot.item.name}`);\n      initiatedBy.setNextAction(new Action.UnequipItem({\n        item: slot.item,\n        game: engine.game,\n        actor: initiatedBy,\n      }))\n      closeEquipment(engine);\n    }\n    obj['label'] = `Unequip ${slot.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const keymapEquipFromInventory = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n    // e: {\n      activate: () => closeInventory(engine),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.container.map((item, index) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to equip ${item.name}`);\n      initiatedBy.setNextAction(new Action.EquipItemFromContainer({\n        item,\n        game: engine.game,\n        actor: initiatedBy,\n      }))\n      closeInventory(engine);\n    }\n    obj['label'] = `Equip ${item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const keymapDropFromInventory = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n    // g: {\n      activate: () => closeInventory(engine),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.container.map((item, index) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to drop ${item.name}`);\n      initiatedBy.setNextAction(new Action.DropItem({\n        item,\n        game: engine.game,\n        actor: initiatedBy,\n        energyCost: Constant.ENERGY_THRESHOLD\n      }));\n      closeInventory(engine);\n    }\n    obj['label'] = `Drop ${item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\n/******************** PLAYER ********************/\n\nexport const walk = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Action.Move({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}\n\nexport const tackle = (direction, stepCount, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Action.MoveMultiple({\n    direction,\n    stepCount,\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}\n\nexport const sign = (sign, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Action.Sign({\n    sign,\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}\n\nexport const signRelease = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Action.SignRelease({\n    requiredSequence: [\n      Constant.HAND_SIGNS.Power,\n      Constant.HAND_SIGNS.Healing,\n    ],\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}\n\nexport const charge = (engine, chargeAmount) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Action.Charge({\n    chargeAmount,\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}\n\nexport const release = (engine, chargeCost) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Action.Release({\n    chargeCost,\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}\n\nexport const pickupRandom = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let entities = engine.game.map[Helper.coordsToString(actor.pos)].entities.filter((e) => e.id !== actor.id);\n  if (entities.length > 0) {\n    actor.setNextAction(new Action.PickupItem({\n      item: Helper.getRandomInArray(entities),\n      game: engine.game,\n      actor,\n      energyCost: Constant.ENERGY_THRESHOLD\n    }))\n  } else {\n    console.log('nothing to pickup.');\n  }\n}\n\nexport const die = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.destroy();\n}\n\nexport const cloneSelf = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Action.CloneSelf({\n    game: engine.game,\n    actor,\n  }))\n}\n\nexport const addActor = (game) => {\n  let targetEntity = game.engine.actors[game.engine.currentActor]\n  let pos = Helper.getRandomPos(game.map).coordinates\n\n  let actor = new Entity.Chaser({\n    targetEntity,\n    pos,\n    renderer: {\n      character: Helper.getRandomInArray(['◉', '⛨']),\n      color: 'white',\n      background: '',\n    },\n    name: 'Ross',\n    game,\n    actions: [],\n    durability: Helper.getRandomInArray([1, 2, 4, 8]),\n    speed: 100,\n  })\n  game.addActor(actor);\n}\n\nexport const activateThrowCursor = (engine) => {\n  let game = engine.game;\n  let currentActor = game.engine.actors[game.engine.currentActor]\n  let pos = currentActor.pos;\n\n  let cursor = new Entity.UI_Actor({\n    initiatedBy: currentActor,\n    pos,\n    renderer: {\n      character: '█',\n      color: 'white',\n      background: '',\n    },\n    name: 'Cursor',\n    game,\n    keymap: keymapCursorToThrowItem(engine, currentActor),\n  })\n  game.addActor(cursor);\n  game.engine.currentActor = game.engine.actors.length - 1\n}\n\nexport const activateInventory = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleInventory = currentActor.container; \n\n  let ui = new Entity.UI_Actor({\n    initiatedBy: currentActor,\n    pos: {...currentActor.pos},\n    renderer: {\n      character: 'I',\n      color: 'white',\n      background: '',\n    },\n    name: 'Inventory',\n    game: engine.game,\n    // keymap: keymapEquipFromInventory(engine, currentActor),\n  })\n  engine.game.addActor(ui);\n  engine.currentActor = engine.actors.length - 1\n  ui.keymap = keymapEquipFromInventory(engine, currentActor);\n}\n\nexport const activateEquipment = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleEquipment = currentActor.equipment; \n\n  let ui = new Entity.UI_Actor({\n    initiatedBy: currentActor,\n    pos: {...currentActor.pos},\n    renderer: {\n      character: 'E',\n      color: 'white',\n      background: '',\n    },\n    name: 'Equipment',\n    game: engine.game,\n  })\n  engine.game.addActor(ui);\n  engine.currentActor = engine.actors.length - 1\n  ui.keymap = keymapEquipment(engine, currentActor);\n}\n\nexport const activateDrop = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleInventory = currentActor.container; \n\n  let ui = new Entity.UI_Actor({\n    initiatedBy: currentActor,\n    pos: {...currentActor.pos},\n    renderer: {\n      character: 'D',\n      color: 'white',\n      background: '',\n    },\n    name: 'Drop',\n    game: engine.game,\n  })\n  engine.game.addActor(ui);\n  engine.currentActor = engine.actors.length - 1\n  ui.keymap = keymapDropFromInventory(engine, currentActor);\n}\n\nexport const player = (engine) => {\n  return {\n    w: {\n      activate: () => walk(Constant.DIRECTIONS.N, engine),\n      label: 'walk',\n    },\n    d: {\n      activate: () => walk(Constant.DIRECTIONS.E, engine),\n      label: 'walk',\n    },\n    s: {\n      activate: () => walk(Constant.DIRECTIONS.S, engine),\n      label: 'walk',\n    },\n    a: {\n      activate: () => walk(Constant.DIRECTIONS.W, engine),\n      label: 'walk',\n    },\n    i: {\n      activate: () => activateInventory(engine),\n      label: 'Open Inventory',\n    },\n    q: {\n      activate: () => activateEquipment(engine),\n      label: 'Open Equipment',\n    },\n    k: {\n      activate: () => cloneSelf(engine),\n      label: 'Clone Self',\n    },\n    g: {\n      activate: () => activateDrop(engine),\n      label: 'Drop Item',\n    },\n    p: {\n      activate: () => pickupRandom(engine),\n      label: 'Pickup',\n    },\n    t: {\n      activate: () => activateThrowCursor(engine),\n      label: 'Throw',\n    },\n    y: {\n      activate: () => addActor(engine.game),\n      label: 'Add NPC',\n    },\n    c: {\n      activate: () => charge(engine, 1),\n      label: 'Charge',\n    },\n    '1': {\n      activate: () => sign(Constant.HAND_SIGNS.Power, engine),\n      label: 'Sign - Power',\n    },\n    '2': {\n      activate: () => sign(Constant.HAND_SIGNS.Healing, engine),\n      label: 'Sign - Healing',\n    },\n    '3': {\n      activate: () => sign(Constant.HAND_SIGNS.Absolute, engine),\n      label: 'Sign - Absolution',\n    },\n    '4': {\n      activate: () => {\n        let actor = engine.actors[engine.currentActor];\n        actor.setNextAction(new Action.SayManyThings({\n          game: engine.game,\n          actor,\n          messages: ['I say one thing.', 'then another.'],\n        }))\n      },\n      label: 'Talk',\n    },\n    r: {\n      activate: () => signRelease(engine),\n      label: 'Release',\n    },\n  };\n}\n","export class Base {\n  constructor({ \n    game, \n    actor, \n    name = 'Effect', \n    lifespan = 100,\n    stepInterval = 100,\n    allowDuplicates = true,\n    onStart = () => null,\n    onStep = () => null,\n    onStop = () => null,\n  }) {\n    this.game = game\n    this.actor = actor\n    this.name = name\n    this.lifespan = lifespan\n    this.timeToLive = lifespan\n    this.stepInterval = stepInterval\n    this.allowDuplicates = allowDuplicates\n    this.timeSinceLastStep = 0;\n    this.onStart = onStart\n    this.onStep = onStep\n    this.onStop = onStop\n  }\n}","// import deps\nimport * as Keymap from '../keymaps';\nimport * as Item from '../items';\nimport * as Entity from '../entites';\n// create class\nexport default function (engine) {\n  let actor = new Entity.Player({\n    pos: { x: 23, y: 7 },\n    renderer: {\n      character: 'N',\n      color: 'black',\n      background: 'orange',\n    },\n    name: 'Naruto Uzumaki',\n    actions: [],\n    speed: 600,\n    durability: 1,\n    keymap: Keymap.player(engine),\n  })\n\n  actor.container = [\n    Item.sword(engine),\n    Item.sword(engine),\n    Item.sword(engine),\n    ...Array(10).fill('').map(() => Item.kunai(engine, { ...actor.pos })),\n  ]\n\n  return actor;\n}\n// export instance","import React from 'react';\nimport { SCREENS } from './constants';\nimport * as Engine from '../engine';\nimport * as Game from '../game';\nimport Equipment from '../UI/Equipment';\nimport Inventory from '../UI/Inventory';\nimport KeymapUI from '../UI/Keymap';\nimport RockLee from '../Characters/RockLee';\nimport NarutoUzumaki from '../Characters/NarutoUzumaki';\n\nlet ENGINE = new Engine.Engine({});\n\n// let actor = NarutoUzumaki(ENGINE);\nlet actor = RockLee(ENGINE);\nENGINE.actors.push(actor)\n\nlet game = new Game.Game({ engine: ENGINE })\n\nclass Level extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(game.showUI);\n    \n    this.state = {\n      game: game,\n    };\n    this.presserRef = React.createRef();\n  }\n\n  async componentDidMount() {\n    game.initialize(this.presserRef)\n    game.updateReact = (newGameState) => { this.setState({game: newGameState}) }\n    ENGINE.start()\n  }\n\n  render() {\n    return (\n      <div className=\"Level\">\n        <div className='flow-text'>Chunin Exams</div>\n        <button className='btn' onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}>Quit</button>\n        <div className='row'>\n          <Equipment equipment={this.state.game.visibleEquipment} />\n          <Inventory inventory={this.state.game.visibleInventory} />\n          <KeymapUI keymap={this.state.game.visibleKeymap} />\n          {Game.DisplayElement(this.presserRef, Game.handleKeyPress, ENGINE)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Level;\n","// import deps\nimport * as Keymap from '../keymaps';\nimport * as Item from '../items';\nimport * as Entity from '../entites';\nimport * as Constant from '../constants';\nimport * as Action from '../actions';\nimport * as StatusEffect from '../statusEffects';\nimport * as Helper from '../../helper';\n\nexport default function (engine) {\n  // define keymap helpers\n  const flyingLotus = (direction, stepCount, speedModifier, additionalAttackDamage, engine) => {\n    let actor = engine.actors[engine.currentActor];\n    actor.setNextAction(new Action.Tackle({\n      direction,\n      stepCount,\n      game: engine.game,\n      actor,\n      additionalAttackDamage,\n      energyCost: Math.floor(Constant.ENERGY_THRESHOLD / speedModifier),\n    }))\n  }\n\n  const leafWhirlwind = (engine) => {\n    let actor = engine.actors[engine.currentActor];\n    let targetPositions = [\n      {\n        x: actor.pos.x - 1,\n        y: actor.pos.y - 1,\n      },\n      {\n        x: actor.pos.x,\n        y: actor.pos.y - 1,\n      },\n      {\n        x: actor.pos.x + 1,\n        y: actor.pos.y - 1,\n      },\n      {\n        x: actor.pos.x - 1,\n        y: actor.pos.y,\n      },\n      {\n        x: actor.pos.x + 1,\n        y: actor.pos.y,\n      },\n      {\n        x: actor.pos.x - 1,\n        y: actor.pos.y + 1,\n      },\n      {\n        x: actor.pos.x,\n        y: actor.pos.y + 1,\n      },\n      {\n        x: actor.pos.x + 1,\n        y: actor.pos.y + 1,\n      },\n    ]\n    console.log('leaf whirlwind!');\n    \n    actor.setNextAction(new Action.MultiTargetAttack({\n      targetPositions,\n      game: engine.game,\n      actor,\n      energyCost: (Constant.ENERGY_THRESHOLD * 8),\n    }))\n  }\n\n  const drunkWalk = (direction, engine) => {\n    let actor = engine.actors[engine.currentActor];\n    let originalDirection = [...direction];\n    let chance = Math.random();\n    if (chance < 0.5) {\n      console.log('drunk misstep');\n      let count = 100\n      while ((direction[0] === originalDirection[0] && direction[1] === originalDirection[1]) || count < 0) {\n        count -= 1;\n        direction = Constant.DIRECTIONS[Helper.getRandomInArray(Object.keys(Constant.DIRECTIONS))];\n      }\n      console.log(count);\n      \n    }\n\n    let newX = actor.pos.x + direction[0];\n    let newY = actor.pos.y + direction[1];\n    actor.setNextAction(new Action.Move({\n      targetPos: { x: newX, y: newY },\n      game: engine.game,\n      actor,\n      energyCost: Constant.ENERGY_THRESHOLD\n    }))\n  }\n\n  const keymapFlyingLotus = (engine, initiatedBy, previousKeymap) => {\n    const goToPreviousKeymap = () => initiatedBy.keymap = previousKeymap;\n    return {\n      Escape: {\n        activate: goToPreviousKeymap,\n        label: 'Close',\n      },\n      w: {\n        activate: () => {\n          flyingLotus(Constant.DIRECTIONS.N, 10, 2, 10, engine);\n          goToPreviousKeymap();\n        },\n        label: 'activate N',\n      },\n      d: {\n        activate: () => {\n          flyingLotus(Constant.DIRECTIONS.E, 10, 2, 10, engine);\n          goToPreviousKeymap();\n        },\n        label: 'activate E',\n      },\n      s: {\n        activate: () => {\n          flyingLotus(Constant.DIRECTIONS.S, 10, 2, 10, engine);\n          goToPreviousKeymap();\n        },\n        label: 'activate S',\n      },\n      a: {\n        activate: () => {\n          flyingLotus(Constant.DIRECTIONS.W, 10, 2, 10, engine);\n          goToPreviousKeymap();\n        },\n        label: 'activate W',\n      },\n    };\n  }\n\n  const activateFlyingLotus = (engine) => {\n    let currentActor = engine.actors[engine.currentActor]\n    currentActor.keymap = keymapFlyingLotus(engine, currentActor, {...currentActor.keymap});\n  }\n  \n  const removeWraps = (engine, speedBoost = 600, damageDebuff = 1) => {\n    let currentActor = engine.actors[engine.currentActor];\n\n    let effect = new StatusEffect.Base({\n      game: engine.game,\n      actor: currentActor,\n      name: 'Removed wraps (weights)',\n      lifespan: 1000,\n      stepInterval: 100,\n      allowDuplicates: false,\n      onStart: () => {\n        currentActor.speed += speedBoost;\n        currentActor.attackDamage = Math.max(0, currentActor.attackDamage - damageDebuff);\n        currentActor.energy += speedBoost;\n        console.log(`${currentActor.name} removed weighted wraps.`);\n      },\n      onStop: () => {\n        currentActor.speed -= speedBoost;\n        currentActor.attackDamage += damageDebuff;\n        console.log(`${currentActor.name} rewrapped weights.`);\n      },\n    });\n    currentActor.setNextAction(new Action.AddStatusEffect({\n      effect,\n      actor: currentActor,\n      game: engine.game,\n    }));\n  }\n  \n  const drunkenFist = (engine, damageBuff = 1) => {\n    let currentActor = engine.actors[engine.currentActor];\n\n    let effect = new StatusEffect.Base({\n      game: engine.game,\n      actor: currentActor,\n      name: 'Drunk',\n      lifespan: 1000,\n      stepInterval: 100,\n      allowDuplicates: false,\n      onStart: () => {\n        currentActor.attackDamage += damageBuff;\n        console.log(`${currentActor.name} took a sip of sake.`);\n        currentActor.keymap.w = {\n          activate: () => drunkWalk(Constant.DIRECTIONS.N, engine),\n          label: 'drunken walk'\n        }\n        currentActor.keymap.a = {\n          activate: () => drunkWalk(Constant.DIRECTIONS.W, engine),\n          label: 'drunken walk'\n        }\n        currentActor.keymap.s = {\n          activate: () => drunkWalk(Constant.DIRECTIONS.S, engine),\n          label: 'drunken walk'\n        }\n        currentActor.keymap.d = {\n          activate: () => drunkWalk(Constant.DIRECTIONS.E, engine),\n          label: 'drunken walk'\n        }\n      },\n      onStop: () => {\n        currentActor.attackDamage -= damageBuff;\n        console.log(`${currentActor.name} recovered from drunkeness.`);\n        currentActor.keymap.w = {\n          activate: () => Keymap.walk(Constant.DIRECTIONS.N, engine),\n          label: 'walk'\n        }\n        currentActor.keymap.a = {\n          activate: () => Keymap.walk(Constant.DIRECTIONS.W, engine),\n          label: 'walk'\n        }\n        currentActor.keymap.s = {\n          activate: () => Keymap.walk(Constant.DIRECTIONS.S, engine),\n          label: 'walk'\n        }\n        currentActor.keymap.d = {\n          activate: () => Keymap.walk(Constant.DIRECTIONS.E, engine),\n          label: 'walk'\n        }\n      },\n    });\n    currentActor.setNextAction(new Action.AddStatusEffect({\n      effect,\n      actor: currentActor,\n      game: engine.game,\n    }));\n  }\n  \n  // define keymap\n  const keymap = (engine) => {\n    return {\n      w: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.N, engine),\n        label: 'walk',\n      },\n      d: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.E, engine),\n        label: 'walk',\n      },\n      s: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.S, engine),\n        label: 'walk',\n      },\n      a: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.W, engine),\n        label: 'walk',\n      },\n      l: {\n        activate: () => activateFlyingLotus(engine),\n        label: 'Flying Lotus',\n      },\n      k: {\n        activate: () => removeWraps(engine, 200),\n        label: 'Remove wraps',\n      },\n      j: {\n        activate: () => drunkenFist(engine),\n        label: 'Sip Sake',\n      },\n      h: {\n        activate: () => leafWhirlwind(engine),\n        label: 'Leaf Whirlwind',\n      },\n      i: {\n        activate: () => Keymap.activateInventory(engine),\n        label: 'Open Inventory',\n      },\n      q: {\n        activate: () => Keymap.activateEquipment(engine),\n        label: 'Open Equipment',\n      },\n      g: {\n        activate: () => Keymap.activateDrop(engine),\n        label: 'Drop Item',\n      },\n      p: {\n        activate: () => Keymap.pickupRandom(engine),\n        label: 'Pickup',\n      },\n      t: {\n        activate: () => Keymap.activateThrowCursor(engine),\n        label: 'Throw',\n      },\n      // DEV KEYS\n      y: {\n        activate: () => Keymap.addActor(engine.game),\n        label: 'Add NPC',\n      },\n    };\n  }\n  // instantiate class\n  let actor = new Entity.Player({\n    pos: { x: 23, y: 7 },\n    renderer: {\n      character: 'R',\n      color: '#e6e6e6',\n      background: '#36635b',\n    },\n    name: 'Rock Lee',\n    actions: [],\n    speed: 600,\n    durability: 1,\n    keymap: keymap(engine),\n  })\n\n  // add default items to container\n  actor.container = [\n    ...Array(10).fill('').map(() => Item.kunai(engine, { ...actor.pos })),\n  ]\n\n  return actor;\n}","import React from 'react';\nimport { SCREENS } from './constants';\n\nclass Title extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"Title\">\n        <div\n          style={{\n            width: '100vw',\n            height: '100vh',\n            backgroundColor: '#e2e2e2',\n          }}\n        >\n          <div class='flow-text'>Hidden Leaf RL</div>\n          <button class='btn' onClick={() => this.props.setActiveScreen(SCREENS.LEVEL)}>Play</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Title;","import React from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport { SCREENS } from './Screen/constants';\nimport Level from './Screen/Level';\nimport Title from './Screen/Title';\n\nclass Nystrum extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      activeScreen: SCREENS.LEVEL,\n    };\n  }\n\n  setActiveScreen (activeScreen) {\n    this.setState({activeScreen})\n  }\n\n  getActiveScreen () {\n    const titleScreen = <Title \n      key={SCREENS.TITLE} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n    />\n    const levelScreen = <Level \n      key={SCREENS.LEVEL} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n    />\n\n    switch (this.state.activeScreen) {\n      case SCREENS.TITLE:\n        return titleScreen\n      case SCREENS.LEVEL:\n        return levelScreen\n      default:\n        return titleScreen\n    }\n  }\n\n  render() {\n    const activeScreen = this.getActiveScreen();\n    return (\n      <div className=\"Nystrum\">\n        <ReactCSSTransitionGroup\n          transitionName=\"fade\"\n          transitionAppear={true}\n          transitionEnter={true}\n          transitionLeave={true}\n          transitionAppearTimeout={500}\n          transitionEnterTimeout={500}\n          transitionLeaveTimeout={300}\n        >\n          { activeScreen }\n        </ReactCSSTransitionGroup>\n      </div>\n    );\n  }\n}\n\nexport default Nystrum;\n","import * as ROT from 'rot-js';\n\nexport const TILE_KEY = () => {\n  return {\n    'GROUND': {\n      background: '#974',\n      foreground: '#aaa',\n      character: '.',\n      passable: true,\n    }\n  }\n}\n\n// RENDERING\n\nexport const DRAW = (map, display) => {\n  for (let key in map) {\n    let parts = key.split(\",\");\n    let x = parseInt(parts[0]);\n    let y = parseInt(parts[1]);\n    let tile = map[key];\n    let { character, foreground, background } = TILE_KEY()[tile.type]\n    if (tile.entities.length > 0) {\n      let entity = tile.entities[tile.entities.length - 1]\n      character = entity.components.renderer.character\n      foreground = entity.components.renderer.color\n      if (entity.components.renderer.background) {\n        background = entity.components.renderer.background\n      }\n    }\n    display.draw(x, y, character, foreground, background);\n  }\n}\n\n// END RENDERING\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const getImpassableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('impasse') && !e.components.impasse.passable)\n}\n\nexport const getDestructableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('destructible'))\n}\n\nexport const delay = (timeDelayed = 100) => {\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const exampleEngine = () => {\n  let scheduler = new ROT.Scheduler.Simple();\n  let engine = new ROT.Engine(scheduler);\n  let output = [];\n  /* sample actor: pauses the execution when dead */\n  let actor = {\n    lives: 3,\n    act: function () {\n      let done = null;\n      let promise = {\n        then: function (cb) { done = cb; }\n      }\n\n      output.push(\".\");\n      // SHOW(output.join(\"\"));\n      console.log(output.join(\"\"));\n\n      this.lives--;\n\n      /* if alive, wait for 500ms for next turn */\n      if (this.lives) {\n        setTimeout(function () { done(); }, 500);\n      }\n\n      return promise;\n    }\n  }\n  scheduler.add(actor, true);\n  engine.start();\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}","import * as Helper from '../lib/helper';\n\nexport const createEntity = (id = null, name = 'Empty', components = {}, world) => {\n  let entity = {\n    id,\n    name,\n    components,\n    world,\n    sendEvent: (target, eventType, parameters) => sendEvent(target, eventType, parameters, world),\n  };\n  return entity\n}\n\nexport const sendEvent = async (target = null, eventType = null, parameters = null, world = null) => {\n  let success = false;\n  for (let key in target.components) {\n    let component = target.components[key]\n    if (component.hasOwnProperty(eventType)) {\n      console.log('SUCCESSFUL EVENT: ', eventType)\n      success = true\n      if (eventType !== 'PREPARE_RENDER') {\n        await Helper.delay();\n      }\n      component[eventType]({ ...parameters, self: target, component: component });\n      Helper.DRAW(world.map, world.display)\n    }\n  }\n  if (!success) {\n    console.log('FAILED EVENT')\n  }\n};","import * as Helper from '../lib/helper';\n\nexport const receiver = (pos) => {\n  return {\n    responded: false,\n    RECIEVE: (parameters) => {\n      let { self, component, message } = parameters\n      console.log(message, pos.x, pos.y)\n      if (!component.responded) {\n        component.responded = true\n        self.sendEvent(parameters.sender, 'hello', 'RECIEVE', { message: 'copy', sender: self })\n      }\n    }\n  }\n}\n\nexport const impasse = (passable = false) => {\n  return {\n    passable,\n    MAKE_PASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = true;\n    },\n    MAKE_IMPASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = false;\n    }\n  }\n}\n\nexport const body = (world, pos = { x: 0, y: 0 }) => {\n  if (world) {\n    return {\n      pos,\n      MOVE: (parameters) => {\n        let { self, component, currentPos, targetPos } = parameters\n        if (world.canOccupy(world.map, targetPos)) {\n          component.pos = targetPos\n          let tile = world.map[Helper.coordsToString(currentPos)]\n          world.map[Helper.coordsToString(currentPos)] = {...tile, entities: []}\n          self.sendEvent(self, 'PREPARE_RENDER')\n          // Helper.DRAW(world.map, world.display)\n        } else {\n          console.log('can\\'t move there')\n        }\n      }\n    }\n  }\n  console.log('No world to occupy');\n  return {}\n}\n\nexport const destructible = (world, durability = 1) => {\n  return {\n    durability,\n    DECREASE_DURABILITY: (parameters) => {\n      let { self, component, value } = parameters;\n      component.durability -= value\n      if (component.durability <= 0) {\n        self.sendEvent(self, 'DESTROY')\n      }\n    },\n    INCREASE_DURABILITY: (parameters) => {\n      let { component, value } = parameters;\n      component.durability += value\n    },\n    DESTROY: (parameters) => {\n      let { self, component, value } = parameters;\n      let tile = world.map[Helper.coordsToString(self.components.body.pos)];\n      world.map[Helper.coordsToString(self.components.body.pos)].entities = tile.entities.filter((e) => e.id !== self.id);\n      // self.sendEvent(self, 'PREPARE_RENDER')\n      // Helper.DRAW(world.map, world.display)\n    }\n  }\n}\n\nexport const attack = (damage = 1) => {\n  return {\n    damage,\n  }\n}\n\nexport const throwable = (world) => {\n  return {\n    THROW: (parameters) => {\n      let { self, component, direction } = parameters;\n      // if next tile is passable\n        // send move action to self\n        // send throw action to self\n      // else\n        // send decrease_durability to entity next in tile\n        // send decrease_durability to self\n      let currentPos = self.components.body.pos;\n      let nextPos = { x: currentPos.x + direction.x, y: currentPos.y + direction.y }\n      let nextTile = world.map[Helper.coordsToString(nextPos)];\n      if (world.canOccupy(world.map, nextPos)) { // change to check for target entity\n        self.sendEvent(\n          self, 'MOVE', {\n            currentPos: currentPos,\n            targetPos: nextPos\n          }\n        )\n        self.sendEvent(self, 'THROW', {direction});\n      } else {\n        if (world.map.hasOwnProperty(Helper.coordsToString(nextPos))) {\n          let impassable_and_destructable_entities = Helper.getDestructableEntities(Helper.getImpassableEntities(nextTile.entities))\n          if (impassable_and_destructable_entities.length > 0) {\n            self.sendEvent(impassable_and_destructable_entities[0], 'DECREASE_DURABILITY', { value: 1 });\n          }\n        }\n        self.sendEvent(self, 'DECREASE_DURABILITY', { value: 1 });\n      }\n    },\n  }\n}\n\nexport const renderer = (world, character = '', color = 'white', background = false) => {\n  return {\n    character,\n    color,\n    background,\n    PREPARE_RENDER: (parameters) => {\n      let { self } = parameters\n      if (self.components.hasOwnProperty('body')) {\n        world.map[Helper.coordsToString(self.components.body.pos)].entities.push(self)\n      }\n    }\n  }\n}","import React from 'react';\nimport '../App.css';\nimport * as ROT from 'rot-js';\nimport * as Entity from './lib/entity'\nimport * as Helper from './lib/helper'\nimport * as Components from './components/index'\n\nconst SHOW = (canvas) => {\n  let d = document.getElementById('display')\n  d.appendChild(canvas)\n}\n\nconst CREATE_LEVEL = (world) => {\n  let digger = new ROT.Map.Arena();\n  let freeCells = [];\n  let digCallback = function (x, y, value) {\n    if (value) { return; }\n    let key = x + \",\" + y;\n    world.map[key] = {\n      type: 'GROUND',\n      entities: [],\n    };\n    freeCells.push(key);\n  }\n  digger.create(digCallback.bind(this));\n}\n\nlet scheduler = new ROT.Scheduler.Simple()\nlet engine = new ROT.Engine(scheduler)\n\nlet world = {\n  canAct: true,\n  scheduler,\n  engine,\n  map: {},\n  display: new ROT.Display({ fontSize: 24, bg: '#099' }),\n  canOccupy: (map, pos) => {\n    if (map.hasOwnProperty(Helper.coordsToString(pos))) {\n      let tile = map[Helper.coordsToString(pos)];\n      if (Helper.TILE_KEY()[tile.type].passable && Helper.getImpassableEntities(tile.entities).length === 0) {\n        return true\n      }\n    } else {\n      return false\n    }\n  },\n}\n\nlet naruto = {\n  ...Entity.createEntity(1, 'Naruto', {\n    reciever: Components.receiver({ x: 10, y: 30 }),\n    body: Components.body(world, { x: 19, y: 21 }),\n    renderer: Components.renderer(world, 'N', 'orange', 'black'),\n  },\n    world,\n  ),\n}\n\nlet box = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 21 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box2 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 19 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box3 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 17 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet kunai = {\n  ...Entity.createEntity(3, 'Kunai', {\n    body: Components.body(world, { x: 20, y: 21 }),\n    renderer: Components.renderer(world, '<>', 'black'),\n    destructible: Components.destructible(world),\n    attack: Components.attack(),\n    throwable: Components.throwable(world),\n  },\n    world,\n  )\n}\n\nclass Original extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.presserRef = React.createRef();\n  }\n\n  handleKeyPress = (event, world, entity) => {\n    let keymap = {\n      w: 0,\n      d: 1,\n      s: 2,\n      a: 3,\n    };\n\n    let code = event.key;\n    let dir = ROT.DIRS[4][keymap[code]];\n    if (code === 't') {\n      kunai.sendEvent(kunai, 'MOVE', {\n        currentPos: kunai.components.body.pos,\n        targetPos: {\n          x: entity.components.body.pos.x + 1,\n          y: entity.components.body.pos.y,\n        },\n      })\n      return kunai.sendEvent(kunai, 'THROW', { direction: { x: 1, y: 0 } })\n    }\n    if (!(code in keymap)) { return; }\n    let newX = entity.components.body.pos.x + dir[0];\n    let newY = entity.components.body.pos.y + dir[1];\n\n    entity.sendEvent(\n      entity, 'MOVE', {\n        currentPos: entity.components.body.pos,\n        targetPos: {\n          x: newX,\n          y: newY\n        }\n      }\n    )\n\n    return;\n    // return Helper.DRAW(world.map, world.display)\n\n  }\n\n  componentDidMount() {\n    ROT.RNG.setSeed(7);\n    SHOW(world.display.getContainer());\n    CREATE_LEVEL(world);\n    naruto.sendEvent(naruto, 'PREPARE_RENDER')\n    // kunai.sendEvent(kunai, 'PREPARE_RENDER')\n    box.sendEvent(box, 'PREPARE_RENDER')\n    box2.sendEvent(box2, 'PREPARE_RENDER')\n    box3.sendEvent(box3, 'PREPARE_RENDER')\n    Helper.DRAW(world.map, world.display)\n    this.presserRef.current.focus();\n  }\n\n  render() {\n    return (\n      <div className=\"App\" ref={this.presserRef} onKeyDown={(event) => this.handleKeyPress(event, world, naruto)} tabIndex='0'>\n        <div id='display'></div>\n      </div>\n    );\n  }\n}\n\nexport default Original;\n","import React from 'react';\nimport './App.css';\nimport Nystrum from './nystrum/Nystrum';\nimport Original from './original/Original';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <Nystrum />\n        {/* <Original /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}