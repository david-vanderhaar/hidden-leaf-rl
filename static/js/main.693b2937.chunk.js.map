{"version":3,"sources":["nystrum/Screen/constants.js","helper.js","nystrum/Entities/helper.js","nystrum/constants.js","nystrum/actions.js","nystrum/entites.js","nystrum/items.js","nystrum/Keymap/helper.js","nystrum/Keymap/KeyActions/activateDropItem.js","nystrum/Keymap/KeyActions/activateEquipment.js","nystrum/Keymap/KeyActions/activateInventory.js","nystrum/Keymap/KeyActions/moveCursor.js","nystrum/Keymap/KeyActions/activateThrow.js","nystrum/Keymap/KeyActions/walk.js","nystrum/Keymap/KeyActions/addActor.js","nystrum/Keymap/KeyActions/pickupRandom.js","nystrum/Keymap/KeyActions/signing.js","nystrum/Keymap/KeyActions/activateFlyingLotus.js","nystrum/statusEffects.js","nystrum/Keymap/KeyActions/drunkenFist.js","nystrum/Keymap/KeyActions/sandTomb.js","nystrum/Keymap/KeyActions/sandPulse.js","nystrum/Keymap/KeyActions/sandWall.js","nystrum/Keymap/KeyActions/die.js","nystrum/Characters/RockLee.js","nystrum/Keymap/KeyActions/removeWeights.js","nystrum/Keymap/KeyActions/leafWhirlwind.js","nystrum/Keymap/KeyActions/openInnerGate.js","nystrum/engine.js","nystrum/game.js","nystrum/UI/Button.js","nystrum/UI/Information.js","nystrum/UI/Equipment.js","nystrum/UI/Inventory.js","nystrum/UI/Keymap.js","nystrum/Characters/NarutoUzumaki.js","nystrum/Keymap/KeyActions/cloneSelf.js","nystrum/Keymap/KeyActions/charging.js","nystrum/Characters/Gaara.js","nystrum/Keymap/KeyActions/sandClone.js","nystrum/Keymap/KeyActions/sandSkin.js","nystrum/Screen/Level.js","nystrum/Screen/Title.js","nystrum/Characters/index.js","nystrum/Nystrum.js","original/lib/helper.js","original/lib/entity.js","original/components/index.js","original/Original.js","App.js","serviceWorker.js","index.js"],"names":["SCREENS","TITLE","LEVEL","delay","timeDelayed","Promise","resolve","setTimeout","getRandomInArray","array","Math","floor","random","length","coordsToString","coords","x","y","calculatePath","game","targetPos","currentPos","topology","map","isPassable","type","astar","ROT","AStar","path","compute","push","slice","calculatePathWithRange","range","getRandomPos","keys","Object","key","split","coordinates","parseInt","text","getDestructableEntities","entites","filter","entity","hasOwnProperty","getGranularity","radius","pow","getPointsOnCircumference","centerX","centerY","r","n","list","i","round","cos","PI","sin","destroyEntity","energy","pos","tile","Helper","entities","e","id","engine","actors","removeStatusEffectByActorId","draw","currentActor","TILE_KEY","background","character","passable","animation","foreground","HAND_SIGNS","Power","name","description","Energy","Harmony","Healing","Intuition","Awareness","Dimension","Creation","Absolute","DIRECTIONS","N","S","E","W","EQUIPMENT_TYPES","HEAD","TORSO","BACK","HAND","FEET","EQUIPMENT_LAYOUTS","human","item","CLONE_PATTERNS","verticalLine","x_offset","y_offset","positions","taken","smallSquare","square","bigSquare","circle","PARTICLE_TEMPLATES","default","renderer","color","fail","damage","leaf","PARTICLE_TYPE","directional","ALPHABET","Base","actor","energyCost","processDelay","particles","particleTemplate","Constant","this","life","direction","particle","Particle","console","log","success","alternative","AddStatusEffect","effect","args","addStatusEffect","forEach","addParticle","sign","Say","message","EquipItemFromContainer","equipmentType","itemInSlot","getItemInSlot","addToContainer","unequip","removeFromContainer","equip","UnequipItem","DropItem","PickupItem","it","DestroySelf","destroy","CloneSelf","cloneArgs","createClone","Charge","chargeAmount","increaseCharge","Sign","addSign","SignRelease","requiredSequence","signHistory","concat","relevantHistory","max","JSON","stringify","requiredSequenceIsFulfilled","join","clearSigns","CursorMove","cursorCanOccupyPosition","PlaceActor","canOccupyPosition","addActorAsNext","PlaceItems","targetPositions","clone","cloneDeep","uuid","placeActorOnMap","Move","move","Action","MoveMultiple","stepCount","setNextAction","Shove","shove","Tackle","additionalAttackDamage","attack","Attack","entityTypes","includes","MultiTargetAttack","particlePath","particlePos","attackSuccess","ThrowProjectile","move_result","shift","ThrowProjectileGas","CrankEngine","start","Entity","Parent","superclass","children","Engine","isInitialized","child","destroyChild","canAttack","bind","addActor","initialize","Attacking","attackDamage","additional","targets","target","getAttackDamage","equipment","slot","decreaseDurability","Acting","actions","speed","action","value","Rendering","targetTile","newPos","Playing","keymap","nextAction","Chasing","targetEntity","Destructable","durability","defense","onDestroy","current","newDurability","getDefense","min","UI_Actor","pipe","initiatedBy","active","Wall","MovingWall","createPath","result","Bandit","Player","charge","chargeMax","container","itemType","items","slotName","find","foundSlot","currentGate","gates","damageBuff","speedBuff","durabilityDebuff","nextGate","nextGateIndex","findIndex","gate","cloneLimit","clones","index","c","super__destroy","splice","destroyClone","arg","attribute","Weapon","DestructiveProjectile","DestructiveCloudProjectileV2","owner_id","isClone","cloneCount","clonePattern","offset","cloneDeepWith","referencePos","step","nextPos","getNextPos","TYPE","createProjectileCloud","throwDirection","structureType","createProjectile","structure","position","targetPosition","sandTomb","createProjectileSingularity","sandShuriken","kunai","movingSandWall","sword","addAlphabeticallyToKeymap","obj","alphabetAllowed","letter","deactivateUIKeymap","visibleUIKey","currentUiActor","removeActor","activateDropItem","visibleInventory","ui","addActorAsPrevious","Escape","activate","label","keymapDropFromInventory","activateEquipment","visibleEquipment","keymapEquipment","activateInventory","keymapEquipFromInventory","moveCursor","newX","newY","keymapCursorToThrowItem","w","d","s","a","t","cursor","contains","Item","setActorToPrevious","placeActorsOnMap","throwKunai","activateThrow","walk","banditStats","banditLevels","getBanditStats","randomlyPlaceActorOnMap","pickupRandom","flyingLotus","activateFlyingLotus","previousKeymap","ENERGY_THRESHOLD","goToPreviousKeymap","keymapFlyingLotus","lifespan","stepInterval","allowDuplicates","onStart","onStep","onStop","timeToLive","timeSinceLastStep","drunkWalk","originalDirection","count","keymapSandTomb","k","cloud","triggerSandTomb","triggerSandPulse","sandWallPulse","sandPulse","keymapSandPulse","createSandWall","triggerSandWall","directionString","getDirectionKey","sandWall","keymapSandWall","die","Keymap","l","speedBoost","damageDebuff","StatusEffect","j","h","o","setNextGate","nextGateToLabel","getNextGate","q","g","p","Array","fill","statusEffects","isRunning","gainEnergy","hasEnoughEnergy","getAction","perform","acting","timePassed","processActionFX","processStatusEffects","process","backToTitle","visibleKeymap","updateMode","updateReact","newEffect","actorId","removeDeadStatusEffects","actionSuccess","removeActorFromMap","update","removeDeadParticles","GAME_MODE_TYPES","WAVE","Game","display","width","fontSize","bg","tileKey","mode","data","level","highestLevel","localStorage","getItem","setItem","addWaveEnemy","nextModeLevel","initializeMode","setModeLevel","kill","placed","ac","digger","Uniform","freeCells","create","currentFrame","ceil","randomlyPlaceAllActorsOnMap","hasImpassableEntity","document","getElementById","appendChild","getContainer","parts","tileRenderer","frame","isPlaced","presserRef","show","createLevel","focus","handleKeyPress","event","code","Button","props","onClick","className","Information","React","Component","Equipment","Inventory","inventory","entries","cloneOverrides","cloneKeymap","defenseBuff","u","Level","ENGINE","selectedCharacter","state","createRef","setActiveScreen","newGameState","setState","ref","onKeyDown","tabIndex","CharacterSelect","characters","setSelectedCharacter","Title","style","height","backgroundColor","class","disabled","Characters","RockLee","Gaara","NarutoUzumaki","Nystrum","characterKey","selected","activeScreen","titleScreen","levelScreen","getActiveScreen","transitionName","transitionAppear","transitionEnter","transitionLeave","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","DRAW","components","getImpassableEntities","impasse","createEntity","world","sendEvent","eventType","parameters","component","self","MAKE_PASSABLE","MAKE_IMPASSABLE","body","MOVE","canOccupy","destructible","DECREASE_DURABILITY","INCREASE_DURABILITY","DESTROY","PREPARE_RENDER","scheduler","Simple","canAct","naruto","reciever","responded","RECIEVE","sender","Components","box","box2","box3","throwable","THROW","nextTile","impassable_and_destructable_entities","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iTAAaA,EAAU,CACrBC,MAAO,EACPC,MAAO,G,yCCAIC,EAAQ,WAAwB,IAAvBC,EAAsB,uDAAR,IAClC,OAAO,IAAIC,QAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MAGvCI,EAAmB,SAACC,GAC/B,OAAOA,EAAMC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,UAenCC,EAAiB,SAACC,GAAD,gBAAeA,EAAOC,EAAtB,YAA2BD,EAAOE,IAEnDC,EAAgB,SAACC,EAAMC,EAAWC,GAA8B,IAAlBC,EAAiB,uDAAN,EAChEC,EAAMJ,EAAKI,IACXC,EAAa,SAAUR,EAAGC,GAC5B,QAAIM,EAAIP,EAAI,IAAMC,IACkB,WAA1BM,EAAIP,EAAI,IAAMC,GAAGQ,MAKzBC,EAAQ,IAAIC,IAASC,MAAMR,EAAUJ,EAAGI,EAAUH,EAAGO,EAAY,CAAEF,aACnEO,EAAO,GAKX,OAJAH,EAAMI,QAAQT,EAAWL,EAAGK,EAAWJ,EAAG,SAAUD,EAAGC,GACrDY,EAAKE,KAAK,CAAEf,IAAGC,QAGVY,EAAKG,MAAM,IAGPC,EAAyB,SAACd,EAAMC,EAAWC,EAAYC,EAAUY,GAE5E,OADWhB,EAAcC,EAAMC,EAAWC,EAAYC,GAC1CU,MAAM,EAAGE,EAAQ,IAGlBC,EAAe,SAACZ,GAC3B,IAAIa,EAAOC,OAAOD,KAAKb,GACnBe,EAAM9B,EAAiB4B,GAAMG,MAAM,KAEvC,MAAO,CAACC,YADE,CAAExB,EAAGyB,SAASH,EAAI,IAAKrB,EAAGwB,SAASH,EAAI,KACvBI,KAAMJ,IAGrBK,EAA0B,SAACC,GACtC,OAAOA,EAAQC,OAAO,SAACC,GAAD,OAAYA,EAAOC,eAAe,iBAGpDC,EAAiB,SAACC,GAEtB,OADc,EAAI,GAAMvC,KAAKwC,IAAID,EAAQ,GAAM,EAAIvC,KAAKwC,IAAID,EAAQ,GAAO,GAAKA,EAAU,KAI/EE,EAA2B,WAGtC,IAH4E,IAArCC,EAAoC,uDAA1B,EAAGC,EAAuB,uDAAb,EAAGC,EAAU,uDAAN,EAC/DC,EAAIP,EAAeM,GACrBE,EAAO,GACFC,EAAI,EAAGA,EAAIF,EAAGE,IAAK,CAC1B,IAAIzC,EAAIN,KAAKgD,MAAMN,EAAW1C,KAAKiD,IAAI,EAAIjD,KAAKkD,GAAKL,EAAIE,GAAKH,GAC1DrC,EAAIP,KAAKgD,MAAML,EAAW3C,KAAKmD,IAAI,EAAInD,KAAKkD,GAAKL,EAAIE,GAAKH,GAC9DE,EAAKzB,KAAK,CAAEf,IAAGC,MAEjB,OAAOuC,G,wDCrEIM,EAAgB,SAAChB,GAE5B,GADAA,EAAOiB,OAAS,EACZjB,EAAOkB,IAAK,CACd,IAAIC,EAAOnB,EAAO3B,KAAKI,IAAI2C,EAAsBpB,EAAOkB,MACxDlB,EAAO3B,KAAKI,IAAI2C,EAAsBpB,EAAOkB,MAAMG,SAAWF,EAAKE,SAAStB,OAAO,SAACuB,GAAD,OAAOA,EAAEC,KAAOvB,EAAOuB,KAE5GvB,EAAO3B,KAAKmD,OAAOC,OAASzB,EAAO3B,KAAKmD,OAAOC,OAAO1B,OAAO,SAACuB,GAAD,OAAOA,EAAEC,KAAOvB,EAAOuB,KACpFvB,EAAO3B,KAAKmD,OAAOE,4BAA4B1B,EAAOuB,IACtDvB,EAAO3B,KAAKsD,OACZ3B,EAAO3B,KAAKmD,OAAOI,aAAe5B,EAAO3B,KAAKmD,OAAOI,aAAe5B,EAAO3B,KAAKmD,OAAOC,OAAO1D,QCPnF8D,EAAW,CACtB,OAAU,CACRC,WAAY,UACZC,UAAW,GACXC,UAAU,GAEZ,KAAQ,CACNF,WAAY,UACZC,UAAW,GACXC,UAAU,GAEZ,MAAS,CACPC,UAAW,CACT,CAAEH,WAAY,UAAWI,WAAY,UAAWH,UAAW,SAAKC,UAAU,GAC1E,CAAEF,WAAY,UAAWI,WAAY,UAAWH,UAAW,SAAKC,UAAU,GAC1E,CAAEF,WAAY,UAAWI,WAAY,UAAWH,UAAW,SAAKC,UAAU,GAC1E,CAAEF,WAAY,UAAWI,WAAY,UAAWH,UAAW,SAAKC,UAAU,GAC1E,CAAEF,WAAY,UAAWI,WAAY,UAAWH,UAAW,SAAKC,UAAU,GAC1E,CAAEF,WAAY,UAAWI,WAAY,UAAWH,UAAW,SAAKC,UAAU,GAC1E,CAAEF,WAAY,UAAWI,WAAY,UAAWH,UAAW,SAAKC,UAAU,GAC1E,CAAEF,WAAY,UAAWI,WAAY,UAAWH,UAAW,SAAKC,UAAU,GAC1E,CAAEF,WAAY,UAAWI,WAAY,UAAWH,UAAW,SAAKC,UAAU,GAC1E,CAAEF,WAAY,UAAWI,WAAY,UAAWH,UAAW,SAAKC,UAAU,GAC1E,CAAEF,WAAY,UAAWI,WAAY,UAAWH,UAAW,SAAKC,UAAU,GAC1E,CAAEF,WAAY,UAAWI,WAAY,OAAQH,UAAW,SAAKC,UAAU,GACvE,CAAEF,WAAY,UAAWI,WAAY,OAAQH,UAAW,SAAKC,UAAU,IAEzEF,WAAY,UACZC,UAAW,SACXC,UAAU,GAEZ,IAAO,CACLF,WAAY,QACZI,WAAY,QACZH,UAAW,IACXC,UAAU,IAIDG,EAAa,CACxBC,MAAO,CACLzD,KAAM,QACN0D,KAAM,MACNC,YAAa,kCAEfC,OAAQ,CACN5D,KAAM,SACN0D,KAAM,MACNC,YAAa,oBAEfE,QAAS,CACP7D,KAAM,UACN0D,KAAM,KACNC,YAAa,uCAEfG,QAAS,CACP9D,KAAM,UACN0D,KAAM,MACNC,YAAa,sBAEfI,UAAW,CACT/D,KAAM,YACN0D,KAAM,MACNC,YAAa,gDAEfK,UAAW,CACThE,KAAM,YACN0D,KAAM,MACNC,YAAa,uDAEfM,UAAW,CACTjE,KAAM,YACN0D,KAAM,QACNC,YAAa,6BAEfO,SAAU,CACRlE,KAAM,WACN0D,KAAM,MACNC,YAAa,wBAEfQ,SAAU,CACRnE,KAAM,WACN0D,KAAM,MACNC,YAAa,kBAIJS,EAAa,CACxBC,EAAG,CAAC,GAAI,GACRC,EAAG,CAAC,EAAG,GACPC,EAAG,CAAC,EAAG,GACPC,EAAG,EAAE,EAAG,IAeGC,EAAkB,CAC7BC,KAAM,OACNC,MAAO,QACPC,KAAM,OACNC,KAAM,OACNC,KAAM,QAGKC,EAAoB,CAC/BC,MAAO,WACL,MAAO,CACL,CAAChF,KAAMyE,EAAgBC,KAAMhB,KAAM,OAAQuB,KAAM,MACjD,CAACjF,KAAMyE,EAAgBE,MAAOjB,KAAM,QAASuB,KAAM,MACnD,CAACjF,KAAMyE,EAAgBG,KAAMlB,KAAM,OAAQuB,KAAM,MACjD,CAACjF,KAAMyE,EAAgBI,KAAMnB,KAAM,YAAauB,KAAM,MACtD,CAACjF,KAAMyE,EAAgBI,KAAMnB,KAAM,aAAcuB,KAAM,MACvD,CAACjF,KAAMyE,EAAgBK,KAAMpB,KAAM,OAAQuB,KAAM,SAK1CC,EAAiB,CAC5BC,aAAc,CACZC,SAAU,EACVC,SAAU,EACVC,UAAW,CACT,CAAE/F,EAAG,EAAGC,EAAG,EAAG+F,OAAO,GACrB,CAAEhG,EAAG,EAAGC,EAAG,EAAG+F,OAAO,GACrB,CAAEhG,EAAG,EAAGC,GAAI,EAAG+F,OAAO,KAG1BC,YAAa,CACXJ,SAAU,EACVC,SAAU,EACVC,UAAW,CACT,CAAE/F,EAAG,EAAGC,EAAG,EAAG+F,OAAO,GACrB,CAAEhG,EAAG,EAAGC,EAAG,EAAG+F,OAAO,GACrB,CAAEhG,EAAG,EAAGC,EAAG,EAAG+F,OAAO,GACrB,CAAEhG,EAAG,EAAGC,EAAG,EAAG+F,OAAO,KAGzBE,OAAQ,CACNL,SAAU,EACVC,SAAU,EACVC,UAAW,CACT,CAAE/F,EAAG,EAAGC,EAAG,EAAG+F,OAAO,GACrB,CAAEhG,EAAG,EAAGC,EAAG,EAAG+F,OAAO,GACrB,CAAEhG,EAAG,EAAGC,EAAG,EAAG+F,OAAO,GACrB,CAAEhG,EAAG,EAAGC,EAAG,EAAG+F,OAAO,GACrB,CAAEhG,EAAG,EAAGC,GAAI,EAAG+F,OAAO,GACtB,CAAEhG,EAAG,EAAGC,GAAI,EAAG+F,OAAO,GACtB,CAAEhG,GAAI,EAAGC,GAAI,EAAG+F,OAAO,GACvB,CAAEhG,GAAI,EAAGC,EAAG,EAAG+F,OAAO,GACtB,CAAEhG,GAAI,EAAGC,EAAG,EAAG+F,OAAO,KAG1BG,UAAW,CACTN,SAAU,EACVC,SAAU,EACVC,UAAW,CACT,CAAE/F,EAAG,EAAGC,EAAG,EAAG+F,OAAO,GACrB,CAAEhG,EAAG,EAAGC,EAAG,EAAG+F,OAAO,GACrB,CAAEhG,EAAG,EAAGC,EAAG,EAAG+F,OAAO,GACrB,CAAEhG,EAAG,EAAGC,EAAG,EAAG+F,OAAO,GACrB,CAAEhG,EAAG,EAAGC,GAAI,EAAG+F,OAAO,GACtB,CAAEhG,EAAG,EAAGC,GAAI,EAAG+F,OAAO,GACtB,CAAEhG,GAAI,EAAGC,GAAI,EAAG+F,OAAO,GACvB,CAAEhG,GAAI,EAAGC,EAAG,EAAG+F,OAAO,GACtB,CAAEhG,GAAI,EAAGC,EAAG,EAAG+F,OAAO,GACtB,CAAEhG,EAAG,EAAGC,EAAG,EAAG+F,OAAO,GACrB,CAAEhG,EAAG,EAAGC,EAAG,EAAG+F,OAAO,GACrB,CAAEhG,EAAG,EAAGC,EAAG,EAAG+F,OAAO,GACrB,CAAEhG,EAAG,EAAGC,GAAI,EAAG+F,OAAO,GACtB,CAAEhG,EAAG,EAAGC,GAAI,EAAG+F,OAAO,GACtB,CAAEhG,GAAI,EAAGC,GAAI,EAAG+F,OAAO,GACvB,CAAEhG,GAAI,EAAGC,EAAG,EAAG+F,OAAO,GACtB,CAAEhG,GAAI,EAAGC,EAAG,EAAG+F,OAAO,KAG1BI,OAAQ,CACNP,SAAU,EACVC,SAAU,EACVC,UAAW7C,EAAgC,EAAG,EAAG,KAIxCmD,EAAqB,CAChCC,QAAS,CACPC,SAAU,CACR1C,UAAW,IACX2C,MAAO,QACP5C,WAAY,UAGhB6C,KAAM,CACJF,SAAU,CACR1C,UAAW,IACX2C,MAAO,QACP5C,WAAY,QAGhB8C,OAAQ,CACNH,SAAU,CACR1C,UAAW,IACX2C,MAAO,UACP5C,WAAY,QAGhB+C,KAAM,CACJJ,SAAU,CACR1C,UAAW,SACX2C,MAAO,UACP5C,WAAY,aAKLgD,EAAgB,CAC3BC,YAAa,EACbhG,KAAM,GAGKiG,EAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,K,2jBChO/I,IAAMC,EAAb,WACE,cAOI,IANF5G,EAMC,EANDA,KACA6G,EAKC,EALDA,MAKC,IAJDC,kBAIC,MAJY,IAIZ,MAHDC,oBAGC,MAHc,GAGd,MAFDC,iBAEC,MAFW,GAEX,MADDC,wBACC,MADkBC,EAA4Bf,QAC9C,sBACDgB,KAAKN,MAAQA,EACbM,KAAKnH,KAAOA,EACZmH,KAAKL,WAAaA,EAClBK,KAAKJ,aAAeA,EACpBI,KAAKH,UAAYA,EACjBG,KAAKF,iBAAmBA,EAd5B,wDAkBIG,EACAvE,EACAwE,GAIC,IAHDjB,EAGA,4DAHee,KAAKF,iBAAiBb,UACrC9F,EAEA,uDAFO4G,EAAuBR,YAC9BhG,EACA,uDADO,KAEH4G,EAAW,IAAIC,GAAS,CAC1BvH,KAAMmH,KAAKnH,KACXgE,KAAM,WACNL,UAAU,EACVyD,OACAvE,MACAwE,YACAzE,OAAQ,IACRwD,WACA9F,OACAI,SAEFyG,KAAKH,UAAUpG,KAAK0G,KArCxB,4CAyCIH,KAAKH,UAAYG,KAAKH,UAAUtF,OAAO,SAAC4F,GAAD,OAAcA,EAASF,KAAO,MAzCzE,gCAgDI,OAFAI,QAAQC,IAAR,UAAeN,KAAKN,MAAM7C,KAA1B,cACAmD,KAAKN,MAAMjE,QAAUuE,KAAKL,WACnB,CACLY,SAAS,EACTC,YAAa,UAlDnB,KAuDaC,EAAb,YACE,cAAoD,IAAD,EAArCC,EAAqC,EAArCA,OAAqC,IAA7Bd,oBAA6B,MAAd,EAAc,EAARe,EAAQ,qEACjD,iDAAWA,MACND,OAASA,EACd,EAAKd,aAAeA,EAH6B,EADrD,uEAOa,IAAD,OACJW,EAAUP,KAAKnH,KAAKmD,OAAO4E,gBAAgBZ,KAAKU,QAapD,OAZgB9E,EAAgCoE,KAAKN,MAAMhE,IAAIhD,EAAGsH,KAAKN,MAAMhE,IAAI/C,EAAG,GAC1EkI,QAAQ,SAACnF,GACjB,EAAKoF,YACH,EADF,KAEMpF,GACJ,CACEhD,EAAGN,KAAK2I,KAAKrF,EAAIhD,EAAI,EAAKgH,MAAMhE,IAAIhD,GACpCC,EAAGP,KAAK2I,KAAKrF,EAAI/C,EAAI,EAAK+G,MAAMhE,IAAI/C,OAItC4H,IAASP,KAAKN,MAAMjE,QAAUuE,KAAKL,YAChC,CACLY,UACAC,YAAa,UAvBnB,GAAqCf,GA4BxBuB,EAAb,YACE,cAAqD,IAAD,EAAtCC,EAAsC,EAAtCA,QAAsC,IAA7BrB,oBAA6B,MAAd,GAAc,EAAPe,EAAO,sEAClD,iDAAUA,MACLM,QAAUA,EACf,EAAKrB,aAAeA,EAH8B,EADtD,uEASI,OAFAS,QAAQC,IAAR,UAAeN,KAAKN,MAAM7C,KAA1B,iBAAuCmD,KAAKiB,UAC5CjB,KAAKN,MAAMjE,QAAUuE,KAAKL,WACnB,CACLY,SAAS,EACTC,YAAa,UAXnB,GAAyBf,GAsCZyB,EAAb,YAEE,cAAgC,IAAD,EAAjB9C,EAAiB,EAAjBA,KAASuC,EAAQ,oDAC7B,iDAAWA,MACNvC,KAAOA,EAFiB,EAFjC,uEAOI,IAAImC,GAAU,EAEd,GAAIP,KAAK5B,KAAK+C,cAAe,CAC3B,IAAIC,EAAapB,KAAKN,MAAM2B,cAAcrB,KAAK5B,KAAK+C,eAChDC,IACFpB,KAAKN,MAAM4B,eAAeF,GAC1BpB,KAAKN,MAAM6B,QAAQH,IAErBpB,KAAKN,MAAM8B,oBAAoBxB,KAAK5B,MACpC4B,KAAKN,MAAM+B,MAAMzB,KAAK5B,KAAK+C,cAAenB,KAAK5B,MAC/CiC,QAAQC,IAAR,UAAeN,KAAKN,MAAM7C,KAA1B,mBAAyCmD,KAAK5B,KAAKvB,KAAnD,MACA0D,GAAU,EAKZ,OAFAP,KAAKN,MAAMjE,QAAUuE,KAAKL,WAEnB,CACLY,UACAC,YAjBgB,UARtB,GAA4Cf,GA8D/BiC,GAAb,YACE,cAAgC,IAAD,EAAjBtD,EAAiB,EAAjBA,KAASuC,EAAQ,oDAC7B,iDAAWA,MACNvC,KAAOA,EAFiB,EADjC,uEAUI,OAJAiC,QAAQC,IAAR,UAAeN,KAAKN,MAAM7C,KAA1B,iBAAuCmD,KAAK5B,KAAKvB,KAAjD,WACAmD,KAAKN,MAAM6B,QAAQvB,KAAK5B,MACxB4B,KAAKN,MAAM4B,eAAetB,KAAK5B,MAC/B4B,KAAKN,MAAMjE,QAAUuE,KAAKL,WACnB,CACLY,SAAS,EACTC,YAAa,UAZnB,GAAiCf,GAiBpBkC,GAAb,YACE,cAAgC,IAAD,EAAjBvD,EAAiB,EAAjBA,KAASuC,EAAQ,oDAC7B,iDAAWA,MACNvC,KAAOA,EAFiB,EADjC,uEAUI,OAJAiC,QAAQC,IAAR,UAAeN,KAAKN,MAAM7C,KAA1B,kBAAwCmD,KAAK5B,KAAKvB,KAAlD,MACAmD,KAAKN,MAAM8B,oBAAoBxB,KAAK5B,MACpC4B,KAAKnH,KAAKI,IAAI2C,EAAsBoE,KAAKN,MAAMhE,MAAMG,SAASpC,KAAKuG,KAAK5B,MACxE4B,KAAKN,MAAMjE,QAAUuE,KAAKL,WACnB,CACLY,SAAS,EACTC,YAAa,UAZnB,GAA8Bf,GAiBjBmC,GAAb,YACE,cAAgC,IAAD,EAAjBxD,EAAiB,EAAjBA,KAASuC,EAAQ,oDAC7B,iDAAWA,MACNvC,KAAOA,EAFiB,EADjC,uEAKa,IAAD,OACRiC,QAAQC,IAAR,UAAeN,KAAKN,MAAM7C,KAA1B,qBAA2CmD,KAAK5B,KAAKvB,KAArD,MACAmD,KAAKN,MAAM4B,eAAetB,KAAK5B,MAC/B,IAAIvC,EAAWmE,KAAKnH,KAAKI,IAAI2C,EAAsBoE,KAAKN,MAAMhE,MAAMG,SAGpE,OAFAmE,KAAKnH,KAAKI,IAAI2C,EAAsBoE,KAAKN,MAAMhE,MAAMG,SAAWA,EAAStB,OAAO,SAACsH,GAAD,OAAQA,EAAG9F,KAAO,EAAKqC,KAAKrC,KAC5GiE,KAAKN,MAAMjE,QAAUuE,KAAKL,WACnB,CACLY,SAAS,EACTC,YAAa,UAbnB,GAAgCf,GAkBnBqC,GAAb,YACE,cAA0C,IAAD,MAA5BlC,oBAA4B,MAAb,EAAa,EAAPe,EAAO,4DACvC,iDAAUA,MACLf,aAAeA,EAFmB,EAD3C,uEASI,OAFAI,KAAKN,MAAMjE,QAAUuE,KAAKL,WAC1BK,KAAKN,MAAMqC,UACJ,CACLxB,SAAS,EACTC,YAAa,UAXnB,GAAiCf,GAgBpBuC,GAAb,YACE,cAAwC,IAAD,MAA1BC,iBAA0B,MAAd,GAAc,EAAPtB,EAAO,yDACrC,iDAAUA,MACLsB,UAAYA,EAFoB,EADzC,uEAOI,IAAI1B,GAAU,EAmBd,OAlBIP,KAAKN,MAAMwC,YAAYlC,KAAKiC,aAC9B1B,GAAU,EACVP,KAAKN,MAAMjE,QAAUuE,KAAKL,WAC1BU,QAAQC,IAAR,UAAeN,KAAKN,MAAM7C,KAA1B,wBAeK,CACL0D,UACAC,YAAa,UA5BnB,GAA+Bf,GAiClB0C,GAAb,YACE,cAAsC,IAAD,EAAxBC,EAAwB,EAAxBA,aAAiBzB,EAAO,4DACnC,iDAAUA,MACLyB,aAAeA,EAFe,EADvC,uEASI,OAHA/B,QAAQC,IAAR,UAAeN,KAAKN,MAAM7C,KAA1B,qBACAmD,KAAKN,MAAMjE,QAAUuE,KAAKL,WAC1BK,KAAKN,MAAM2C,eAAerC,KAAKoC,cACxB,CACL7B,SAAS,EACTC,YAAa,UAXnB,GAA4Bf,GAoCf6C,GAAb,YACE,cAAgC,IAAD,EAAjBvB,EAAiB,EAAjBA,KAASJ,EAAQ,oDAC7B,iDAAWA,MACNI,KAAOA,EAFiB,EADjC,uEASI,OAHAV,QAAQC,IAAR,UAAeN,KAAKN,MAAM7C,KAA1B,oBAA0CmD,KAAKe,KAAKlE,KAApD,WACAmD,KAAKN,MAAM6C,QAAQvC,KAAKe,MACxBf,KAAKN,MAAMjE,QAAUuE,KAAKL,WACnB,CACLY,SAAS,EACTC,YAAa,UAXnB,GAA0Bf,GAgBb+C,GAAb,YACE,cAA+C,IAAD,MAAjCC,wBAAiC,MAAd,GAAc,EAAP9B,EAAO,gEAC5C,iDAAUA,MACL8B,iBAAmBA,EAFoB,EADhD,2FAOI,IAAIC,EAAc1C,KAAKN,MAAMgD,YAAYC,SACrCC,EAAkBF,EAAYhJ,MAChCtB,KAAKyK,IAAIH,EAAYnK,OAASyH,KAAKyC,iBAAiBlK,OAAQ,IAG9D,OADauK,KAAKC,UAAUH,KAAqBE,KAAKC,UAAU/C,KAAKyC,oBAXzE,gCAgBI,IAAIlC,GAAU,EAWd,OAVIP,KAAKgD,gCACP3C,QAAQC,IAAR,UACKN,KAAKN,MAAM7C,KADhB,sCACkDmD,KAAKyC,iBAAiBxJ,IACpE,SAAC8H,GAAD,OAAUA,EAAK5H,OACf8J,KAAK,SAHT,MAKAjD,KAAKN,MAAMjE,QAAUuE,KAAKL,WAC1BY,GAAU,EACVP,KAAKN,MAAMwD,cAEN,CACL3C,UACAC,YAAa,UA7BnB,GAAiCf,GAkCpB0D,GAAb,YACE,cAAsD,IAAD,EAAvCrK,EAAuC,EAAvCA,UAAuC,IAA5B8G,oBAA4B,MAAb,EAAa,EAAPe,EAAO,wEACnD,iDAAUA,MACL7H,UAAYA,EACjB,EAAK8G,aAAeA,EAH+B,EADvD,uEAMa,IAAD,OACJW,GAAU,EAGd,GAAIP,KAAKnH,KAAKuK,wBAAwBpD,KAAKlH,WAAY,CACrD,IAAI6C,EAAOqE,KAAKnH,KAAKI,IAAI2C,EAAsBoE,KAAKN,MAAMhE,MAC1DsE,KAAKnH,KAAKI,IAAI2C,EAAsBoE,KAAKN,MAAMhE,MAA/C,KAA4DC,EAA5D,CAAkEE,SAAUF,EAAKE,SAAStB,OAAO,SAACuB,GAAD,OAAOA,EAAEC,KAAO,EAAK2D,MAAM3D,OAC5HiE,KAAKN,MAAMhE,IAAMsE,KAAKlH,UACtBkH,KAAKnH,KAAKI,IAAI2C,EAAsBoE,KAAKlH,YAAY+C,SAASpC,KAAKuG,KAAKN,OACxEa,GAAU,EAGZ,MAAO,CACLA,UACAC,YAZgB,UARtB,GAAgCf,GAwCnB4D,GAAb,YACE,cAA4C,IAAD,EAA7BvK,EAA6B,EAA7BA,UAAW0B,EAAkB,EAAlBA,OAAWmG,EAAO,kEACzC,iDAAUA,MACL7H,UAAYA,EACjB,EAAK0B,OAASA,EAH2B,EAD7C,uEAOI,IAAI+F,GAAU,EAcd,OAXIP,KAAKnH,KAAKyK,kBAAkBtD,KAAKlH,UAAWkH,KAAKxF,UACnDwF,KAAKxF,OAAOkB,IAAMsE,KAAKlH,UAEvBkH,KAAKnH,KAAKmD,OAAOuH,eAAevD,KAAKxF,QACrC+F,GAAU,GAGRA,IACFP,KAAKN,MAAMjE,QAAUuE,KAAKL,YAGrB,CACLY,UACAC,YAfgB,UARtB,GAAgCf,GAuDnB+D,GAAb,YACE,cAA8C,IAAD,MAAhCC,uBAAgC,MAAd,GAAc,EAAP9C,EAAO,+DAC3C,iDAAUA,MACL8C,gBAAkBA,EAFoB,EAD/C,uEAKa,IAAD,OACJlD,GAAU,EAkBd,OAhBAF,QAAQC,IAAI,SAAUN,KAAKN,MAAMhE,KACjCsE,KAAKyD,gBAAgB5C,QAAQ,SAAC/H,GAG5B,GAFAuH,QAAQC,IAAI,UAAWxH,GAEnB,EAAKD,KAAKyK,kBAAkBxK,EAAW,EAAK0B,QAAS,CACvD,IAAIkJ,EAAQC,oBAAU,EAAKnJ,QAC3BkJ,EAAM7K,KAAO,EAAKA,KAClB6K,EAAM3H,GAAK6H,MACXF,EAAMhI,IAAM5C,EACW,EAAKD,KAAKgL,gBAAgBH,KAC3BnD,GAAU,MAIhCA,IAASP,KAAKN,MAAMjE,QAAUuE,KAAKL,YAEhC,CACLY,UACAC,YAnBgB,UAPtB,GA3BA,YACE,cAA+D,IAAD,EAAhD1H,EAAgD,EAAhDA,UAAW0B,EAAqC,EAArCA,OAAqC,IAA7BoF,oBAA6B,MAAd,GAAc,EAAPe,EAAO,iFAC5D,iDAAUA,MACL7H,UAAYA,EACjB,EAAK8G,aAAeA,EACpB,EAAKpF,OAASA,EAJ8C,EADhE,uEAQI,IAAI+F,GAAU,EAYd,OATIP,KAAKnH,KAAKyK,kBAAkBtD,KAAKlH,UAAWkH,KAAKxF,UACnDwF,KAAKxF,OAAOkB,IAAMsE,KAAKlH,UACvByH,EAAUP,KAAKnH,KAAKgL,gBAAgB7D,KAAKxF,SAGvC+F,IACFP,KAAKN,MAAMjE,QAAUuE,KAAKL,YAGrB,CACLY,UACAC,YAbgB,UATtB,GAA+Bf,IA0DlBqE,GAAb,YACE,cAAuD,IAAD,EAAxChL,EAAwC,EAAxCA,UAAwC,IAA7B8G,oBAA6B,MAAd,GAAc,EAAPe,EAAO,wEACpD,iDAAUA,MACL7H,UAAYA,EACjB,EAAK8G,aAAeA,EAHgC,EADxD,uEAOI,IAAIW,GAAU,EACVC,EAAc,KAelB,OAdkBR,KAAKN,MAAMqE,KAAK/D,KAAKlH,YAErCkH,KAAKN,MAAMjE,QAAUuE,KAAKL,WAC1BY,GAAU,IAEVA,GAAU,EACVC,EAAc,IAAIwD,GAAc,CAC9BlL,UAAWkH,KAAKlH,UAChBD,KAAMmH,KAAKnH,KACX6G,MAAOM,KAAKN,MACZC,WDzgBwB,OC6gBrB,CACLY,UACAC,mBAzBN,GAA0Bf,GA8BbwE,GAAb,YACE,cAAkE,IAAD,EAAnD/D,EAAmD,EAAnDA,UAAWgE,EAAwC,EAAxCA,UAAwC,IAA7BtE,oBAA6B,MAAd,GAAc,EAAPe,EAAO,oFAC/D,iDAAUA,MACLT,UAAYA,EACjB,EAAKgE,UAAYA,EACjB,EAAKtE,aAAeA,EAJ2C,EADnE,uEAQI,IAAIW,GAAU,EACVC,EAAc,KAGd1H,EAAY,CAAEJ,EAFPsH,KAAKN,MAAMhE,IAAIhD,EAAIsH,KAAKE,UAAU,GAElBvH,EADhBqH,KAAKN,MAAMhE,IAAI/C,EAAIqH,KAAKE,UAAU,IAkB7C,OAfIF,KAAKkE,UAAY,GAAKlE,KAAKN,MAAMqE,KAAKjL,IACxCkH,KAAKkE,WAAa,EAClBlE,KAAKN,MAAMjE,QAAUuE,KAAKL,WAC1BK,KAAKN,MAAMyE,cAAcnE,MACzBO,GAAU,IAEVA,GAAU,EACVC,EAAc,IAAIwD,GAAc,CAC9BlL,UAAWA,EACXD,KAAMmH,KAAKnH,KACX6G,MAAOM,KAAKN,MACZC,WD7iBwB,OCijBrB,CACLY,UACAC,mBA/BN,GAAkCf,GAoCrB2E,GAAb,YACE,cAAgD,IAAD,EAAjCtL,EAAiC,EAAjCA,UAAWoH,EAAsB,EAAtBA,UAAcS,EAAQ,qEAC7C,iDAAWA,MACN7H,UAAYA,EACjB,EAAKoH,UAAYA,EAH4B,EADjD,uEAOI,IAAIK,GAAU,EACVC,EAAc,KAgBlB,OAfkBR,KAAKN,MAAM2E,MAAMrE,KAAKlH,UAAWkH,KAAKE,YAGtDF,KAAKN,MAAMjE,QAAUuE,KAAKL,WAC1BY,GAAU,IAEVA,GAAU,EACVC,EAAc,IAAIwD,GAAc,CAC9BlL,UAAWkH,KAAKlH,UAChBD,KAAMmH,KAAKnH,KACX6G,MAAOM,KAAKN,MACZC,WD5kBwB,OCglBrB,CACLY,UACAC,mBA1BN,GAA2Bf,GA+Bd6E,GAAb,YACE,cAA8F,IAAD,EAA/EpE,EAA+E,EAA/EA,UAAWgE,EAAoE,EAApEA,UAAoE,IAAzDK,8BAAyD,MAAhC,EAAgC,MAA7B3E,oBAA6B,MAAd,GAAc,EAAPe,EAAO,6GAC3F,iDAAUA,MACLT,UAAYA,EACjB,EAAKgE,UAAYA,EACjB,EAAKK,uBAAyBA,EAC9B,EAAK3E,aAAeA,EALuE,EAD/F,uEASI,IAAIW,GAAU,EAIVzH,EAAY,CAAEJ,EAFPsH,KAAKN,MAAMhE,IAAIhD,EAAIsH,KAAKE,UAAU,GAElBvH,EADhBqH,KAAKN,MAAMhE,IAAI/C,EAAIqH,KAAKE,UAAU,IAG7C,GAAIF,KAAKkE,UAAY,GAAKlE,KAAKN,MAAM2E,MAAMvL,EAAWkH,KAAKE,WAAY,CACrEF,KAAKkE,WAAa,EAClBlE,KAAKN,MAAMjE,QAAUuE,KAAKL,WAC1BK,KAAKN,MAAMyE,cAAcnE,MACzB,IAAK,IAAI7E,EAAI,EAAGA,EAAI,EAAGA,IACrB6E,KAAKc,YACH,EACA,CACEpI,EAAGsH,KAAKN,MAAMhE,IAAIhD,EAAKsH,KAAKE,UAAU,GAAK/E,EAC3CxC,EAAGqH,KAAKN,MAAMhE,IAAI/C,EAAKqH,KAAKE,UAAU,GAAK/E,GAE7C,CAAEzC,EAAG,EAAGC,EAAG,IAGf4H,GAAU,OAEVA,GAAU,EACVP,KAAKN,MAAM8E,OAAO1L,EAAWkH,KAAKuE,wBAGpC,MAAO,CACLhE,UACAC,YA3BgB,UAVtB,GAA4ByD,IA0CfQ,GAAb,YACE,cAAwD,IAAD,EAAzC3L,EAAyC,EAAzCA,UAAyC,IAA9B8G,oBAA8B,MAAf,IAAe,EAAPe,EAAO,wEACrD,iDAAUA,MACL7H,UAAYA,EACjB,EAAK8G,aAAeA,EACpB,EAAKE,iBAAmBC,EAA4BX,OAJC,EADzD,uEAQI,IAAImB,EAGJ,OAAKP,KAAKN,MAAMgF,YAAYC,SAAS,eAWrCpE,EAAUP,KAAKN,MAAM8E,OAAOxE,KAAKlH,cAE/BkH,KAAKc,YAAY,EAAjB,KAAwBd,KAAKlH,WAAY,CAACJ,EAAG,EAAGC,EAAE,IAClDqH,KAAKN,MAAMjE,QAAUuE,KAAKL,YAGrB,CACLY,UACAC,YArBgB,OAGT,CACLD,SAAS,EACTC,YAAa,IAAIwD,EAAW,CAC1B/C,QAAQ,iCACRpI,KAAMmH,KAAKnH,KACX6G,MAAOM,KAAKN,aAjBtB,GAA4BD,GAmCfmF,GAAb,YACE,cAA8D,IAAD,EAA/CnB,EAA+C,EAA/CA,gBAA+C,IAA9B7D,oBAA8B,MAAf,GAAe,EAARe,EAAQ,8EAC3D,iDAAWA,MACN8C,gBAAkBA,EACvB,EAAK7D,aAAeA,EAHuC,EAD/D,uEAOa,IAAD,OACJW,GAAU,EAGd,IAAKP,KAAKN,MAAMgF,YAAYC,SAAS,aACnC,MAAO,CACLpE,SAAS,EACTC,YAAa,IAAIwD,EAAW,CAC1B/C,QAAQ,iCACRpI,KAAMmH,KAAKnH,KACX6G,MAAOM,KAAKN,SAKlB,IAAImF,EAAe,GACfC,EAAc,CAAEpM,EAAGsH,KAAKN,MAAMhE,IAAIhD,EAAGC,EAAGqH,KAAKN,MAAMhE,IAAI/C,GACvDsG,EAAWe,KAAKF,iBAAiBb,SAmBrC,OAlBAe,KAAKyD,gBAAgB5C,QAAQ,SAAC/H,GAC5B,IAAIiM,EAAgB,EAAKrF,MAAM8E,OAAO1L,GACtC+L,EAAapL,KAAKX,GACdiM,IAAexE,GAAU,KAE/BP,KAAKc,YACH+D,EAAatM,OAAS,EACtBuM,EACA,KACA7F,EACAc,EAAuBxG,KACvBsL,GAGEtE,IACFP,KAAKN,MAAMjE,QAAUuE,KAAKL,YAGrB,CACLY,UACAC,YApCgB,UATtB,GAAuCf,GAkD1BuF,GAAb,YACE,cAA0B,IAATrE,EAAQ,4FACZA,KAFf,uEAMI,IAAIJ,GAAU,EACVC,EAAc,KAClBR,KAAKN,MAAMlD,UAAW,EACtB,IAAIyI,EAAW,iEAEXA,EAAY1E,UACdP,KAAKN,MAAMnG,KAAK2L,QAChB3E,GAAU,GAEmB,IAA3BP,KAAKN,MAAMnG,KAAKhB,SAClBgI,GAAU,EACVC,EAAc,IAAIwD,GAAmB,CACnCnL,KAAMmH,KAAKnH,KACX6G,MAAOM,KAAKN,MACZC,WD1uBwB,IC2uBxBC,aAAc,KAGdqF,EAAYzE,eACMR,KAAKN,MAAM8E,OAAOxE,KAAKlH,aAEzC0H,EAAc,IAAIwD,GAAmB,CACnCnL,KAAMmH,KAAKnH,KACX6G,MAAOM,KAAKN,MACZC,WDpvBsB,ICqvBtBC,aAAc,MAKpB,MAAO,CACLW,UACAC,mBAtCN,GAAqCsD,IA2CxBqB,GAAb,YACE,cAA0B,IAAD,EAARxE,EAAQ,8CACvB,iDAAWA,MACNf,aAAe,EAFG,EAD3B,uEAOI,IAAIW,GAAU,EACVC,EAAc,KAClBR,KAAKN,MAAMlD,UAAW,EACtB,IAAIyI,EAAW,gEAkBf,OAjBIA,EAAY1E,UACdP,KAAKN,MAAMnG,KAAK2L,QAChB3E,GAAU,GAEmB,IAA3BP,KAAKN,MAAMnG,KAAKhB,SAClBgI,GAAU,EACVC,EAAc,IAAIwD,GAAmB,CACnCnL,KAAMmH,KAAKnH,KACX6G,MAAOM,KAAKN,MACZC,WDrxBwB,ICsxBxBC,aAAc,KAGdqF,EAAYzE,aACdR,KAAKN,MAAM8E,OAAOxE,KAAKlH,WAGlB,CACLyH,UACAC,mBA9BN,GAAwCsD,IAmC3BsB,GAAb,YACE,cAAkC,IAAD,EAAnBpJ,EAAmB,EAAnBA,OAAW2E,EAAQ,sDAC/B,iDAAWA,MACN3E,OAASA,EAFiB,EADnC,8LAMQuE,GAAU,EACVC,EAAc,KAElBH,QAAQC,IAAR,UAAeN,KAAKN,MAAM7C,KAA1B,6BATJ,kBAWYmD,KAAKhE,OAAOqJ,QAXxB,OAYMrF,KAAKN,MAAMjE,QAAUuE,KAAKL,WAZhC,gDAcMU,QAAQC,IAAI,eACZD,QAAQC,IAAR,MACAE,EAAc,IAAIwD,GAAmB,CACnCnL,KAAMmH,KAAKnH,KACX6G,MAAOM,KAAKN,MACZC,WDvzBwB,MCoyBhC,iCAuBW,CACLY,UACAC,gBAzBN,kHAAiCf,G,ujBC7xB1B,IAAM6F,GACX,cAA+C,IAAD,IAAhCzM,YAAgC,MAAzB,KAAyB,MAAnB2D,gBAAmB,6BAC5C,IAAIT,EAAK6H,MACT5D,KAAK0E,YAAc,CAAC,UACpB1E,KAAKjE,GAAKA,EACViE,KAAKnH,KAAOA,EACZmH,KAAKxD,SAAWA,GAId+I,GAAS,SAAAC,GAAU,mBACvB,cAA8E,IAAD,MAA/DC,gBAA+D,MAApD,GAAoD,MAAhDzJ,cAAgD,MAAvC,IAAI0J,GAAmB,IAAgB,EAAR/E,EAAQ,iEAC3E,kDAAUA,MACL+D,YAAc,EAAKA,YAAY/B,OAAO,UAC3C,EAAK8C,SAAWA,EAChB,EAAKzJ,OAASA,EACd,EAAK2J,eAAgB,EALsD,EADtD,0EASVC,GACXA,EAAMnK,OAAS,EACf,IAAIE,EAAOqE,KAAKnH,KAAKI,IAAI2C,EAAsBgK,EAAMlK,MACrDsE,KAAKnH,KAAKI,IAAI2C,EAAsBgK,EAAMlK,MAAMG,SAAWF,EAAKE,SAAStB,OAAO,SAACuB,GAAD,OAAOA,EAAEC,KAAO6J,EAAM7J,KACtGiE,KAAKhE,OAAOC,OAAS+D,KAAKhE,OAAOC,OAAO1B,OAAO,SAACuB,GAAD,OAAOA,EAAEC,KAAO6J,EAAM7J,KACrEiE,KAAKnH,KAAKsD,SAdW,gCAiBZ3B,GAET,OADiBwF,KAAKyF,SAASxM,IAAI,SAAC2M,GAAD,OAAWA,EAAM7J,KACnC4I,SAASnK,EAAOuB,MAnBZ,mCAsBT,IAAD,OACXiE,KAAK2F,eAAgB,EACrB3F,KAAKhE,OAAOnD,KAAOmH,KAAKnH,KACxBmH,KAAKhE,OAAOC,OAAS+D,KAAKyF,SAC1BzF,KAAKhE,OAAOC,OAAO4E,QAAQ,SAACnB,GAC1BA,EAAM7G,KAAO,EAAKA,KAClB6G,EAAMqC,QAAU,WAAO,EAAK8D,aAAanG,IACzCA,EAAMoG,UAAY,EAAKA,UAAUC,KAAK,GAEtC,EAAKlN,KAAKgL,gBAAgBnE,GAC1B,EAAK1D,OAAOgK,SAAStG,GACrB,EAAK7G,KAAKsD,WAjCS,gCAqCbtD,GAcR,OAZKmH,KAAK2F,eACR3F,KAAKiG,aAGM,IAAIjC,GAAmB,CAClCnL,OACA6G,MAAOM,KACPhE,OAAQgE,KAAKhE,OACb2D,WFhE0B,IEiE1BC,aAAc,SAhDK,GAAkB4F,IA+I9BU,GAAY,SAAAV,GAAU,mBACjC,cAA2C,IAAD,MAA7BW,oBAA6B,MAAd,EAAc,EAARxF,EAAQ,4DACxC,kDAAWA,MACN+D,YAAc,EAAKA,YAAY/B,OAAO,aAC3C,EAAKwD,aAAeA,EAHoB,EADT,+EAOC,IAAjBC,EAAgB,uDAAH,EAC5B,OAAOpG,KAAKmG,aAAeC,IARI,gCAWtB5L,GACT,OAAO,IAZwB,6BAezB1B,GAA4B,IAAjBsN,EAAgB,uDAAH,EAC1B7F,GAAU,EACV5E,EAAOqE,KAAKnH,KAAKI,IAAI2C,EAAsB9C,IAC/C,IAAK6C,EAAQ,OAAO4E,EACpB,IAAI8F,EAAUzK,EAA+BD,EAAKE,UAClD,GAAIwK,EAAQ9N,OAAS,EAAG,CACtB,IAAI+N,EAASD,EAAQ,GACrB,GAAIrG,KAAK8F,UAAUQ,GAAS,CAC1B,IAAIlH,EAASY,KAAKuG,gBAAgBH,GAC9BpG,KAAK0E,YAAYC,SAAS,aAC5B3E,KAAKwG,UAAU3F,QAAQ,SAAC4F,GAClBA,EAAKrI,MACHqI,EAAKrI,KAAKsG,YAAYC,SAAS,eACjCvF,GAAUqH,EAAKrI,KAAKmI,qBAK5BlG,QAAQC,IAAR,UAAeN,KAAKnD,KAApB,iBAAiCuC,EAAjC,eAA8CkH,EAAOzJ,OACrDyJ,EAAOI,mBAAmBtH,GAC1BmB,GAAU,GAId,OAAOA,MAvCwB,GAAkBiF,IAoD/CmB,GAAS,SAAAnB,GAAU,mBACvB,cAAqE,IAAD,EAAvD3I,EAAuD,EAAvDA,KAAuD,IAAjD+J,eAAiD,MAAvC,GAAuC,MAAnCC,aAAmC,MAA3B,IAA2B,EAAPlG,GAAO,EAAtBlF,OAAsB,gFAClE,kDAAUkF,MACL+D,YAAc,EAAKA,YAAY/B,OAAO,UAC3C,EAAK9F,KAAOA,EACZ,EAAK+J,QAAUA,EACf,EAAKC,MAAQA,EACb,EAAKpL,OAASoL,EANoD,EAD7C,yEAWrB,IAAIC,EAASlL,EAAwBoE,KAAK4G,SAC1C,GAAIE,EAAU,OAAOA,IAZA,mCAeS,IAArBC,EAAoB,uDAAZ/G,KAAK6G,MACtB7G,KAAKvE,QAAUsL,IAhBM,wCAoBrB,OAAO/G,KAAKvE,OAAS,MApBA,GAAkB+J,IAwBrCwB,GAAY,SAAAxB,GAAU,mBAC1B,cAAsD,IAAD,MAAxC9J,WAAwC,MAAlC,CAAChD,EAAG,EAAGC,EAAG,GAAwB,EAApBsG,EAAoB,EAApBA,SAAa0B,EAAO,8DACnD,kDAAUA,MACL+D,YAAc,EAAKA,YAAY/B,OAAO,aAC3C,EAAKjH,IAAMA,EACX,EAAKuD,SAAL,MAAoBA,GAJ+B,EAD3B,2EASxB,OAAOe,KAAKtE,MATY,2BAYpB5C,GAAY,IAAD,OACXyH,GAAU,EACd,GAAIP,KAAKnH,KAAKyK,kBAAkBxK,EAAWkH,MAAO,CAChD,IAAIrE,EAAOqE,KAAKnH,KAAKI,IAAI2C,EAAsBoE,KAAKtE,MACpDsE,KAAKnH,KAAKI,IAAI2C,EAAsBoE,KAAKtE,MAAzC,MAAsDC,EAAtD,CAA4DE,SAAUF,EAAKE,SAAStB,OAAO,SAACuB,GAAD,OAAOA,EAAEC,KAAO,EAAKA,OAChHiE,KAAKtE,IAAM5C,EACXkH,KAAKnH,KAAKI,IAAI2C,EAAsB9C,IAAY+C,SAASpC,KAAKuG,MAC9DO,GAAU,EAEZ,OAAOA,IArBiB,4BAwBnBzH,EAAWoH,GAChB,IACI+G,EAAajH,KAAKnH,KAAKI,IAAI2C,EAAsB9C,IAYrD,OAXImO,GACFA,EAAWpL,SAAS5C,IAAI,SAACuB,GACvB,IAAKA,EAAOgC,SAAU,CACpB,IAEI0K,EAAS,CAAExO,EAFJ8B,EAAOkB,IAAIhD,EAAIwH,EAAU,GAEZvH,EADb6B,EAAOkB,IAAI/C,EAAIuH,EAAU,IAEpC1F,EAAOuJ,KAAKmD,MAIRlH,KAAK+D,KAAKjL,OArCI,GAAkB0M,IA6IxC2B,GAAU,SAAA3B,GAAU,mBACxB,cAAqC,IAAD,MAAvB4B,cAAuB,MAAd,GAAc,EAAPzG,EAAO,sDAClC,kDAAUA,MACL+D,YAAc,EAAKA,YAAY/B,OAAO,WAC3C,EAAK0E,WAAa,KAClB,EAAKD,OAASA,EAJoB,EADZ,2EAQRN,GACZ9G,KAAKqH,WAAaP,IATE,kCAapB,IAAIA,EAAS9G,KAAKqH,WAElB,OADArH,KAAKqH,WAAa,KACXP,MAfa,GAAkBtB,IAgPtC8B,GAAU,SAAA9B,GAAU,mBACxB,cAA6C,IAAD,MAA/B+B,oBAA+B,MAAhB,KAAgB,EAAP5G,EAAO,4DAC1C,kDAAUA,MACL+D,YAAc,EAAKA,YAAY/B,OAAO,WAC3C,EAAK4E,aAAeA,EAHsB,EADpB,uEAOd1O,GACR,IAAIU,EAAOqC,EAAqB/C,EAAMmH,KAAKuH,aAAa7L,IAAKsE,KAAKtE,KAC9D5C,EAAYS,EAAKhB,OAAS,EAAIgB,EAAK,GAAKyG,KAAKtE,IAQjD,OANa,IAAIsI,GAAY,CAC3BlL,YACAD,OACA6G,MAAOM,KACPL,WFxnB0B,UEymBN,GAAkB6F,IAgEtCgC,GAAe,SAAAhC,GAAU,mBAC7B,cAA8E,IAAD,MAAhEiC,kBAAgE,MAAnD,EAAmD,MAAhDC,eAAgD,MAAtC,EAAsC,MAAnCC,iBAAmC,MAAvB,kBAAM,MAAiB,EAARhH,EAAQ,gFAC3E,kDAAWA,MACN+D,YAAc,EAAKA,YAAY/B,OAAO,gBAC3C,EAAK8E,WAAaA,EAClB,EAAKC,QAAUA,EACf,EAAKC,UAAYA,EAL0D,EADhD,0EAW3B,OAAO3H,KAAK0H,UAXe,yCAcTX,GAClB,IAAMa,EAAU5H,KAAKyH,WACfI,EAAgBD,GAAWb,EAAQ/G,KAAK8H,cAC9C9H,KAAKyH,WAAarP,KAAK2P,IAAIH,EAASC,GAChC7H,KAAKyH,YAAc,GACrBzH,KAAK+B,YAnBoB,yCAuBTgF,GAClB/G,KAAKyH,YAAcV,IAxBQ,gCA4B3B/G,KAAK2H,YACLnM,EAAcwE,UA7Ba,GAAkBwF,IA0EpCwC,GAAWC,IACtBtB,GACAK,GACAG,GAnmBS,SAAA3B,GAAU,mBACnB,cAA8C,IAAD,MAA/B0C,mBAA+B,MAAjB,KAAiB,EAARvH,EAAQ,2DAC3C,kDAAUA,MACL+D,YAAc,EAAKA,YAAY/B,OAAO,MAC3C,EAAKuF,YAAcA,EACnB,EAAKC,QAAS,EAJ6B,EAD1B,+EASjB,OAAOnI,KAAKmI,WATK,GAAkB3C,IAgmBfyC,CAKtB3C,IAOW8C,IALQH,IACnBtB,GACAK,GAFmBiB,CAGnB3C,IAEkB2C,IAClBjB,GACAQ,GAFkBS,CAGlB3C,KAEW+C,GAAaJ,IACxBtB,GACAK,GAxIc,SAAAxB,GAAU,mBACxB,cAA0D,IAAD,MAA3CjM,YAA2C,aAA7BT,iBAA6B,MAAjB,KAAiB,EAAR6H,EAAQ,gEACvD,kDAAWA,MACN+D,YAAc,EAAKA,YAAY/B,OAAO,WAC3C,EAAKpJ,KAAOA,EACZ,EAAKT,UAAYA,EAJsC,EADjC,wEAQbD,GACT,IAAIU,EAAOqC,EAAqB/C,EAAMmH,KAAKlH,UAAWkH,KAAKtE,IAAK,GAChEsE,KAAKzG,KAAOA,IAVU,gCAadV,GACHmH,KAAKzG,MACRyG,KAAKsI,WAAWzP,GAElB,IAAIC,EAAYkH,KAAKzG,KAAKhB,OAAS,EAAIyH,KAAKzG,KAAK,GAAKyG,KAAKtE,IACvDwE,EAAY,CACdpH,EAAUJ,EAAIsH,KAAKtE,IAAIhD,EACvBI,EAAUH,EAAIqH,KAAKtE,IAAI/C,GAEzB,GAAqB,IAAjBuH,EAAU,IAA6B,IAAjBA,EAAU,GAClC,OAAO,IAAI8D,GAAmB,CAC5BnL,KAAMA,EACN6G,MAAOM,KACPL,WFxpBwB,IEypBxBC,aAAc,IAGlB,IAAI2I,EAAS,IAAIvE,GAAa,CAC5BlL,YACAoH,YACArH,OACA6G,MAAOM,KACPL,WFjqB0B,MEqqB5B,OAFAK,KAAKzG,KAAK2L,QAEHqD,MAvCe,GAAkB/C,IA0I1CgC,GAJwBS,CAKxB3C,IASWkD,IAPSP,IACpBtB,GACAK,GACAM,GACAE,GAJoBS,CAKpB3C,IAEoB2C,IACpBtB,GACAK,GACAM,GACAE,GACAtB,GALoB+B,CAMpB3C,KAEWmD,GAASR,IACpBtB,GACAK,GAvce,SAAAxB,GAAU,mBACzB,cAAqC,IAAD,MAAvBkD,cAAuB,MAAd,GAAc,EAAP/H,EAAO,sDAClC,kDAAUA,MACL+D,YAAc,EAAKA,YAAY/B,OAAO,YAC3C,EAAK+F,OAASA,EACd,EAAKC,UAAYD,EAJiB,EADX,4EAQV3B,GACb/G,KAAK0I,OAAStQ,KAAKyK,IAAI,EAAG7C,KAAK0I,OAAS3B,KATjB,qCAYVA,GACb/G,KAAK0I,OAAStQ,KAAK2P,IAAI/H,KAAK2I,UAAW3I,KAAK0I,OAAS3B,OAb9B,GAAkBvB,IAiB7B,SAAAA,GAAU,mBACxB,cAAwB,IAAD,EAAP7E,EAAO,8CACrB,kDAAUA,MACL+D,YAAc,EAAKA,YAAY/B,OAAO,WAC3C,EAAKD,YAAc,GAHE,EADC,qEAOhB3B,GACFf,KAAK0C,YAAYnK,QAAU,GAC7ByH,KAAK0C,YAAYwC,QAEnBlF,KAAK0C,YAAYjJ,KAAKsH,KAXA,mCAetBf,KAAK0C,YAAc,OAfG,GAAkB8C,IAhFzB,SAAAA,GAAU,mBAC3B,cAAwC,IAAD,MAA1BoD,iBAA0B,MAAd,GAAc,EAAPjI,EAAO,yDACrC,kDAAUA,MACL+D,YAAc,EAAKA,YAAY/B,OAAO,cAC3C,EAAKiG,UAAYA,EAHoB,EADZ,sEAOjBC,GACR,IACIC,EADY9I,KAAK4I,UACCrO,OAAO,SAAC6D,GAAD,OAAUA,EAAKvB,OAASgM,IACrD,OAAOC,EAAMvQ,OAAS,GAAIuQ,EAAM,KAVP,qCAaX1K,GACd4B,KAAK4I,UAAUnP,KAAK2E,KAdK,0CAiBNA,GACnB4B,KAAK4I,UAAY5I,KAAK4I,UAAUrO,OAAO,SAACsH,GAAD,OAAQA,EAAG9F,KAAOqC,EAAKrC,SAlBrC,GAAkByJ,IAsB9B,SAAAA,GAAU,mBACzB,cAAwE,IAAD,MAA1DgB,iBAA0D,MAA9CzG,EAA2B5B,QAAmB,EAAPwC,EAAO,yDACrE,kDAAUA,MACL+D,YAAc,EAAKA,YAAY/B,OAAO,YAC3C,EAAK6D,UAAYA,EAHoD,EAD9C,2EAOVuC,GAIb,GAHgB/I,KAAKwG,UAAUjM,OAAO,SAACkM,GACrC,OAAsB,OAAdA,EAAKrI,MAAiBqI,EAAKtN,OAAS4P,IAEhCxQ,OAAS,EAAK,OAAO,EACnC,IAAIkO,EAAOzG,KAAKwG,UAAUwC,KAAK,SAACvC,GAAD,OAAUA,EAAKtN,OAAS4P,IACvD,QAAKtC,MACAA,EAAKrI,MACHqI,EAAKrI,QAfW,4BAkBlB2K,EAAU3K,GACf,IAAI6K,GAAY,EAChBjJ,KAAKwG,UAAYxG,KAAKwG,UAAUvN,IAAI,SAACwN,GAKnC,OAJKwC,GAAaxC,EAAKtN,OAAS4P,GAA0B,OAAdtC,EAAKrI,OAC/CqI,EAAKrI,KAAOA,EACZ6K,GAAY,GAEPxC,MAzBc,8BA6BjBrI,GACN4B,KAAKwG,UAAYxG,KAAKwG,UAAUvN,IAAI,SAACwN,GAMnC,OALIA,EAAKrI,MACHqI,EAAKrI,KAAKrC,KAAOqC,EAAKrC,KACxB0K,EAAKrI,KAAO,MAGTqI,QApCc,GAAkBjB,IAqf3CU,GAxtBoB,SAAAV,GAAU,mBAC9B,cAA0D,IAAD,MAA3C0D,mBAA2C,MAA7B,KAA6B,EAARvI,GAAQ,EAAvBwI,MAAuB,oEACvD,kDAAWxI,MACN+D,YAAc,EAAKA,YAAY/B,OAAO,mBAC3C,EAAKuG,YAAcA,EACnB,EAAKC,MAAQ,CACX,CACEtM,KAAM,kBACNuM,WAAY,EACZC,UAAW,IACXC,iBAAkB,GAEpB,CACEzM,KAAM,kBACNuM,WAAY,EACZC,UAAW,IACXC,iBAAkB,GAEpB,CACEzM,KAAM,eACNuM,WAAY,EACZC,UAAW,IACXC,iBAAkB,GAEpB,CACEzM,KAAM,eACNuM,WAAY,EACZC,UAAW,IACXC,iBAAkB,GAEpB,CACEzM,KAAM,gBACNuM,WAAY,EACZC,UAAW,IACXC,iBAAkB,IAjCiC,EAD3B,2EAwC5B,IAAIJ,EAAclJ,KAAKkJ,YACnBK,EAAW,KACf,GAAKL,EAGE,CACL,IAAIM,EAAgBxJ,KAAKmJ,MAAMM,UAAU,SAACC,GAAD,OAAUR,EAAYrM,OAAS6M,EAAK7M,OAAQ,EACrFwD,QAAQC,IAAI,mBAAoBkJ,GAE5BxJ,KAAKmJ,MAAM5Q,OAASiR,IACtBD,EAAWvJ,KAAKmJ,MAAMK,GACtBxJ,KAAKkJ,YAAL,MAAwBK,SAR1BA,EAAWvJ,KAAKmJ,MAAM,GACtBnJ,KAAKkJ,YAAL,MAAwBK,GAU1B,OAAOA,IAtDqB,oCA0D5B,IAAIL,EAAclJ,KAAKkJ,YACnBK,EAAW,KACf,GAAKL,EAEE,CACL,IAAIM,EAAgBxJ,KAAKmJ,MAAMM,UAAU,SAACC,GAAD,OAAUR,EAAYrM,OAAS6M,EAAK7M,OAAQ,EACrFwD,QAAQC,IAAI,mBAAoBkJ,GAE5BxJ,KAAKmJ,MAAM5Q,OAASiR,IACtBD,EAAWvJ,KAAKmJ,MAAMK,SANxBD,EAAWvJ,KAAKmJ,MAAM,GASxB,OAAOI,MAtEqB,GAAkB/D,IA0tBhDgC,GAvZc,SAAAhC,GAAU,mBACxB,cAAwC,IAAD,MAA1BmE,kBAA0B,MAAb,EAAa,EAAPhJ,EAAO,0DACrC,kDAAUA,MACL+D,YAAc,EAAKA,YAAY/B,OAAO,WAC3C,EAAKgH,WAAaA,EAClB,EAAKC,OAAS,GAJuB,EADf,uEAelB5J,KAAK4J,QACP5J,KAAK4J,OAAO3Q,IAAI,SAACyK,GACflI,EAAckI,KAGlBlI,EAAcwE,QApBQ,mCAuBVjE,GAGZ,IAAM8N,EAAQ7J,KAAK4J,OAAOH,UAAU,SAACK,GAAD,OAAOA,EAAE/N,IAAMA,IAC/C8N,GAAS,IACX7J,KAAK4J,OAAOC,GAAOE,iBACnB/J,KAAK4J,OAAOI,OAAOH,EAAO,MA7BN,kCAiCX5H,GAAY,IAAD,OACtB,GAAIjC,KAAK4J,OAAOrR,OAASyH,KAAK2J,WAAY,CACxC,IAAIjG,EAAQC,oBAAU3D,MAUtB,GATA0D,EAAM7G,MAAN,iBAAwBmD,KAAK4J,OAAOrR,QACpCmL,EAAM7K,KAAOmH,KAAKnH,KAClB6K,EAAM3H,GAAK6H,aACJF,EAAMkG,OACblG,EAAK,eAAqBA,EAAM3B,QAChC2B,EAAM3B,QAAU,WAAQ,EAAKkI,aAAavG,EAAM3H,KAChDkG,EAAUpB,QAAQ,SAACqJ,GACjBxG,EAAMwG,EAAIC,WAAaD,EAAInD,QAEzB/G,KAAKnH,KAAKgL,gBAAgBH,GAI5B,OAHA1D,KAAKnH,KAAKmD,OAAOuH,eAAeG,GAChC1D,KAAKnH,KAAKsD,OACV6D,KAAK4J,OAAOnQ,KAAKiK,IACV,EAGX,OAAO,MApDe,GAAkB8B,IAyZ1C2B,GAXoBc,CAYpB3C,IAEW8E,GAASnC,IACpBjB,GA9lBuB,SAAAxB,GAAU,mBACjC,cAA2F,IAAD,MAA7E3I,YAA6E,MAAtE,WAAsE,MAA1DsE,qBAA0D,MAA1CpB,EAAyB/B,KAAiB,EAAR2C,EAAQ,oEACxF,kDAAWA,MACN+D,YAAc,EAAKA,YAAY/B,OAAO,aAC3C,EAAK9F,KAAOA,EACZ,EAAKsE,cAAgBA,EAJmE,EADzD,2BAAkBqE,IAgmBnDU,GAHoB+B,CAIpB3C,IAEW+E,GAAwBpC,IACnCtB,GACAK,GACAd,GA9U4B,SAAAV,GAAU,mBACtC,cAAqF,IAAD,MAAvEjM,YAAuE,aAAzDT,iBAAyD,MAA7C,KAA6C,MAAvCqN,oBAAuC,MAAxB,EAAwB,MAArBvM,aAAqB,MAAb,EAAa,EAAP+G,EAAO,uFAClF,kDAAUA,MACL+D,YAAc,EAAKA,YAAY/B,OAAO,0BAC3C,EAAKpJ,KAAOA,EACZ,EAAKT,UAAYA,EACjB,EAAKqN,aAAeA,EACpB,EAAKvM,MAAQA,EANqE,EAD9C,wEAU1Bf,GACV,IAAIU,EAAOqC,EAA8B/C,EAAMmH,KAAKlH,UAAWkH,KAAKtE,IAAK,EAAGsE,KAAKpG,OACjFoG,KAAKzG,KAAOA,IAZwB,gCAe3BV,GACJmH,KAAKzG,MACRyG,KAAKsI,WAAWzP,GAGlB,IAAIC,EAAYkH,KAAKzG,KAAKhB,OAAS,EAAIyH,KAAKzG,KAAK,GAAKyG,KAAKtE,IAS3D,OAPa,IAAIsI,GAAuB,CACtClL,YACAD,OACA6G,MAAOM,KACPL,WF7f0B,UEmeQ,GAAkB6F,IAgVxDgC,GALmCS,CAMnC3C,IAWWgF,IAT6BrC,IACxCtB,GACAK,GACAd,GArTmC,SAAAV,GAAU,mBAC7C,cAAsG,IAAD,MAAxF+E,gBAAwF,MAA7E,KAA6E,MAAvEhR,YAAuE,aAAzDT,iBAAyD,MAA7C,KAA6C,MAAvCqN,oBAAuC,MAAxB,EAAwB,MAArBvM,aAAqB,MAAb,EAAa,EAAP+G,EAAO,kGACnG,kDAAUA,MACL+D,YAAc,EAAKA,YAAY/B,OAAO,kCAC3C,EAAKpJ,KAAOA,EACZ,EAAKT,UAAYA,EACjB,EAAKqN,aAAeA,EACpB,EAAKvM,MAAQA,EACb,EAAK2Q,SAAWA,EAPmF,EADxD,uEAWlC/P,GACT,IAAI+F,EAAO,kEAIX,OAHIA,IACFA,EAA4B,OAAlBP,KAAKuK,UAAsB/P,EAAO+P,WAAavK,KAAKuK,UAEzDhK,IAhBoC,iCAmBjC1H,GACV,IAAIU,EAAOqC,EAA8B/C,EAAMmH,KAAKlH,UAAWkH,KAAKtE,IAAK,EAAGsE,KAAKpG,OACjFoG,KAAKzG,KAAOA,IArB+B,gCAwBlCV,GACJmH,KAAKzG,MACRyG,KAAKsI,WAAWzP,GAElB,IAAIC,EAAYkH,KAAKzG,KAAKhB,OAAS,EAAIyH,KAAKzG,KAAK,GAAKyG,KAAKtE,IAS3D,OAPa,IAAIsI,GAA0B,CACzClL,YACAD,OACA6G,MAAOM,KACPL,WFtiB0B,UEogBe,GAAkB6F,IAuT/DgC,GA9Qc,SAAAhC,GAAU,mBACxB,cAKI,IAAD,MAJDgF,eAIC,aAHDC,kBAGC,MAHY,EAGZ,MAFDC,oBAEC,MAFc3K,EAAwBnB,OAEtC,EADE+B,EACF,mFACD,kDAAUA,MACL+D,YAAc,EAAKA,YAAY/B,OAAO,WAC3C,EAAK6H,QAAUA,EACf,EAAKC,WAAaA,EAClB,EAAKC,aAAe/G,oBAAU+G,GAL7B,EANqB,uEAcb7R,GACT,IAAI8R,EAAS3K,KAAK0K,aAAajM,UAAUuK,KAAK,SAACtN,GAAD,OAAUA,EAAIgD,QAC5D,IAAKsB,KAAKwK,SAAWG,EAAQ,CAC3BA,EAAOjM,OAAQ,EACf,IAAIgF,EAAQkH,wBAAc5K,KAAM,SAAC+G,EAAO/M,GACtC,OAAQA,GACN,IAAK,KACL,IAAK,OACL,IAAK,SACL,IAAK,SACH,OAAO,KAET,QACE,UAMN,GAFA0J,EAAM7K,KAAOA,EACb6K,EAAM3H,GAAK6H,MACP5D,KAAKvF,eAAe,OAAQ,CAC9B,IAAIoQ,EAAe7K,KAAKtE,IACxBgI,EAAMhI,IAAM,CACVhD,EAAGmS,EAAanS,EAAIiS,EAAOjS,EAC3BC,EAAGkS,EAAalS,EAAIgS,EAAOhS,GAG3B+K,EAAMjJ,eAAe,UACvBiJ,EAAMnK,KAAOmK,EAAMnK,KAAKN,IAAI,SAACyC,GAC3B,MAAO,CACLhD,EAAGgD,EAAIhD,EAAIiS,EAAOjS,EAClBC,EAAG+C,EAAI/C,EAAIgS,EAAOhS,MAIxB+K,EAAM8G,SAAU,EAChBxK,KAAKyK,YAAc,EACnB5R,EAAKgL,gBAAgBH,GACrB7K,EAAKmD,OAAOgK,SAAStC,GACrB7K,EAAKsD,OAIP,OADU,iEAAmBtD,OAvDP,GAAkB2M,IAyQFyC,CAOxC3C,IAE0C2C,IAC1CtB,GACAa,GACAjC,GAH0C0C,CAI1C3C,KAEWlF,GAAW6H,IACtBtB,GACAK,GA7HiB,SAAAxB,GAAU,mBAC3B,cAQI,IAAD,MAPD9J,WAOC,MAPK,CAAEhD,EAAG,EAAGC,EAAG,GAOhB,MANDuH,iBAMC,MANW,CAAExH,EAAG,EAAGC,EAAG,GAMtB,MALDsH,YAKC,MALM,EAKN,MAJD4G,aAIC,MAJO,EAIP,MAHD1N,YAGC,MAHM4G,EAAuBR,YAG7B,MAFDhG,YAEC,MAFM,KAEN,EADEoH,EACF,4FACD,kDAAWA,MACNjF,IAAMA,EACX,EAAKwE,UAAYA,EACjB,EAAKD,KAAOA,EACZ,EAAK4G,MAAQA,EACb,EAAK1N,KAAOA,EACZ,EAAKI,KAAOA,EACZ,EAAKmL,YAAc,EAAKA,YAAY/B,OAAO,YAR1C,EATwB,wEAoBhBmI,GACT,OAAQ9K,KAAK7G,MACX,KAAK4G,EAAuBR,YAC1B,MAAO,CACL7G,EAAGsH,KAAKtE,IAAIhD,EAAKsH,KAAKE,UAAUxH,EAAIsH,KAAK6G,MAASiE,EAClDnS,EAAGqH,KAAKtE,IAAI/C,EAAKqH,KAAKE,UAAUvH,EAAIqH,KAAK6G,MAASiE,GAEtD,KAAK/K,EAAuBxG,KAC1B,IAAMwR,EAAU/K,KAAKzG,KAAK2L,QAC1B,OAAc,MAAP6F,GAA6B/K,KAAKtE,QA7BpB,6BAiCpBoP,GACL9K,KAAKC,MAAQ6K,EACT9K,KAAKC,KAAO,IACdD,KAAKtE,IAAMsE,KAAKgL,WAAWF,QApCJ,GAAkBtF,IA2HvByC,CAItB3C,ICv0BW2F,IDy0BkBhD,IAC7BtB,GACAa,GACAjC,GAH6B0C,CAI7B3C,IC50BO,SADI2F,GAEJ,QAFIA,GAGF,UAGLC,GAAwB,SAAC,GAQxB,IAPLlP,EAOI,EAPJA,OACA0D,EAMI,EANJA,MACA5G,EAKI,EALJA,UACAqS,EAII,EAJJA,eACAtE,EAGI,EAHJA,MACAuE,EAEI,EAFJA,cACAC,EACI,EADJA,iBAEIC,EAAYvL,EAAwBqL,GAEpC3F,EAAW6F,EAAU7M,UAAUxF,IAAI,SAACwN,GACtC,IAAI8E,EAAW,CACb7S,EAAGgH,EAAMhE,IAAIhD,EAAI+N,EAAK/N,EAAKyS,EAAezS,EAAI4S,EAAU/M,SACxD5F,EAAG+G,EAAMhE,IAAI/C,EAAI8N,EAAK9N,EAAKwS,EAAexS,EAAI2S,EAAU9M,UAGtDgN,EAAiB,CACnB9S,EAAGI,EAAUJ,EAAI+N,EAAK/N,EACtBC,EAAGG,EAAUH,EAAI8N,EAAK9N,GAGxB,OAAO0S,EAAiBrP,EAAQuP,EAAUC,KAG5C,OAAO,IAAIlG,GAAoC,CAC7CzM,KAAMmD,EAAOnD,KACb2D,UAAU,EACVqK,QACApB,cAsESgG,GAAW,SAAC,GAAD,OAlEY,SAAC,GAO9B,IANLzP,EAMI,EANJA,OAEAlD,GAII,EALJ4G,MAKI,EAJJ5G,WACA+N,EAGI,EAHJA,MACAuE,EAEI,EAFJA,cACAC,EACI,EADJA,iBAEIC,EAAYvL,EAAwBqL,GAEpC3F,EAAW6F,EAAU7M,UAAUxF,IAAI,SAACwN,GACtC,IAAI8E,EAAW,CACb7S,EAAGI,EAAUJ,EAAI+N,EAAK/N,EAAI4S,EAAU/M,SACpC5F,EAAGG,EAAUH,EAAI8N,EAAK9N,EAAI2S,EAAU9M,UAGlCgN,EAAiB,CACnB9S,EAAGI,EAAUJ,EACbC,EAAGG,EAAUH,GAGf,OAAO0S,EAAiBrP,EAAQuP,EAAUC,KAI5C,OAAO,IAAIlG,GAAoC,CAC7CzM,KAAMmD,EAAOnD,KACb2D,UAAU,EACVqK,QACApB,aAyCEiG,CAA4B,CAChC1P,OALsB,EACtBA,OAKA0D,MANsB,EAEtBA,MAKA5G,UAPsB,EAGtBA,UAKA+N,MAAO,IACPuE,cAAe,SACfC,iBAAkBM,MA6DPC,GAAQ,SAAC5P,EAAQN,EAAK5C,GAAd,OAA4B,IAAIwM,GAA6B,CAChFzM,KAAMmD,EAAOnD,KACbC,YACA0D,UAAU,EACVd,IAAK,CAAEhD,EAAGgD,EAAIhD,EAAGC,EAAG+C,EAAI/C,GACxBsG,SAAU,CAER1C,UAAW,qBACX2C,MAAO,QACP5C,WAAY,IAEdO,KAAMoO,GACNpE,MAAO,IACPpL,OAAQ,EACR7B,MAAO,MAGIiS,GAAiB,SAAC7P,EAAQN,EAAK5C,GAAd,OAA4B,IAAIwM,GAAkB,CAC9EzM,KAAMmD,EAAOnD,KACb2D,UAAU,EACVd,IAAK,CAAEhD,EAAGgD,EAAIhD,EAAGC,EAAG+C,EAAI/C,GACxBG,YACAmG,SAAU,CAER1C,UAAW,IACX2C,MAAO,UACP5C,WAAY,WAGdO,KAAMoO,GACNxD,WAAY,KAGDkE,GAAe,SAAC3P,EAAQN,EAAK5C,GAAd,OAA4B,IAAIwM,GAA6B,CACvFzM,KAAMmD,EAAOnD,KACbC,YACA0D,UAAU,EACVd,IAAK,CAAEhD,EAAGgD,EAAIhD,EAAGC,EAAG+C,EAAI/C,GACxBsG,SAAU,CAER1C,UAAW,eACX2C,MAAO,UACP5C,WAAY,WAEdO,KAAMoO,GACNpE,MAAO,IACPpL,OAAQ,EACR7B,MAAO,MA4DIkS,GAAQ,SAAC9P,GAAD,OAAY,IAAIsJ,GAAc,CACjDzM,KAAMmD,EAAOnD,KACbgE,KAAMoO,GACNzO,UAAU,EACV2J,aAAc,EACdhF,cAAepB,EAAyB/B,KACxCiB,SAAU,CAER1C,UAAW,qBACX2C,MAAO,QACP5C,WAAY,OCvSHyP,GAA4B,SAAC3E,EAAQ4E,GAChD,IAAIC,EAAkBzM,EAASjF,OAAO,SAAC2R,GACrC,OAAQnS,OAAOD,KAAKsN,GAAQzC,SAASuH,KAEvC9E,EAAO6E,EAAgB,IAAMD,GAGlBG,GAAqB,SAACnQ,EAAQoQ,GACzC,IAAIC,EAAiBrQ,EAAOC,OAAOD,EAAOI,cAC1CJ,EAAOnD,KAAKyT,YAAYD,GACxBrQ,EAAOnD,KAAKuT,GAAgB,M,ujBCP9B,IAgCaG,GAAmB,SAACvQ,GAC/B,IAAII,EAAeJ,EAAOC,OAAOD,EAAOI,cACxCJ,EAAOnD,KAAK2T,iBAAmBpQ,EAAawM,UAE5C,IAAI6D,EAAK,IAAIzE,GAAS,CACpBE,YAAa9L,EACbV,IAAI,MAAMU,EAAaV,KACvBuD,SAAU,CACR1C,UAAW,IACX2C,MAAO,QACP5C,WAAY,IAEdO,KAAM,OACNhE,KAAMmD,EAAOnD,OAEfmD,EAAO0Q,mBAAmBD,GAC1BzQ,EAAOnD,KAAKgL,gBAAgB4I,GAC5BzQ,EAAOnD,KAAKsD,OACZsQ,EAAGrF,OAlD2B,SAACpL,EAAQkM,GACvC,IAAId,EAAS,CACXuF,OAAQ,CAENC,SAAU,kBAAMT,GAAmBnQ,EAAQ,qBAC3C6Q,MAAO,UAwBX,OApBA3E,EAAYU,UAAU3P,IAAI,SAACmF,EAAMyL,GAC/B,IAAImC,EAAM,CACRY,SAAU,KACVC,MAAO,IAcT,OAZAb,EAAG,SAAe,WAChB3L,QAAQC,IAAR,6BAAkC4H,EAAYrL,KAA9C,oBAA8DuB,EAAKvB,OACnEqL,EAAY/D,cAAc,IAAIxC,GAAS,CACrCvD,OACAvF,KAAMmD,EAAOnD,KACb6G,MAAOwI,EACPvI,WLvBwB,OKyB1BwM,GAAmBnQ,EAAQ,qBAE7BgQ,EAAG,MAAH,eAAuB5N,EAAKvB,MAC5BkP,GAA0B3E,EAAQ4E,IAC3B,IAGF5E,EAqBK0F,CAAwB9Q,EAAQI,I,ujBCnD9C,IA8Ba2Q,GAAoB,SAAC/Q,GAChC,IAAII,EAAeJ,EAAOC,OAAOD,EAAOI,cACxCJ,EAAOnD,KAAKmU,iBAAmB5Q,EAAaoK,UAE5C,IAAIiG,EAAK,IAAIzE,GAAS,CACpBE,YAAa9L,EACbV,IAAI,MAAMU,EAAaV,KACvBuD,SAAU,CACR1C,UAAW,IACX2C,MAAO,QACP5C,WAAY,IAEdO,KAAM,YACNhE,KAAMmD,EAAOnD,OAEfmD,EAAO0Q,mBAAmBD,GAC1BzQ,EAAOnD,KAAKgL,gBAAgB4I,GAC5BzQ,EAAOnD,KAAKsD,OACZsQ,EAAGrF,OAhDmB,SAACpL,EAAQkM,GAC/B,IAAId,EAAS,CACXuF,OAAQ,CACNC,SAAU,kBAAMT,GAAmBnQ,EAAQ,qBAC3C6Q,MAAO,UAuBX,OAnBA3E,EAAY1B,UAAUjM,OAAO,SAACkM,GAAD,OAAUA,EAAKrI,OAAMnF,IAAI,SAACwN,GACrD,IAAIuF,EAAM,CACRY,SAAU,KACVC,MAAO,IAaT,OAXAb,EAAG,SAAe,WAChB3L,QAAQC,IAAR,6BAAkC4H,EAAYrL,KAA9C,uBAAiE4J,EAAKrI,KAAKvB,OAC3EqL,EAAY/D,cAAc,IAAIzC,GAAY,CACxCtD,KAAMqI,EAAKrI,KACXvF,KAAMmD,EAAOnD,KACb6G,MAAOwI,KAETiE,GAAmBnQ,EAAQ,qBAE7BgQ,EAAG,MAAH,kBAA0BvF,EAAK5J,MAC/BkP,GAA0B3E,EAAQ4E,IAC3B,IAGF5E,EAqBK6F,CAAgBjR,EAAQI,I,ujBChDtC,IA8Ba8Q,GAAoB,SAAClR,GAChC,IAAII,EAAeJ,EAAOC,OAAOD,EAAOI,cACxCJ,EAAOnD,KAAK2T,iBAAmBpQ,EAAawM,UAE5C,IAAI6D,EAAK,IAAIzE,GAAS,CACpBE,YAAa9L,EACbV,IAAI,MAAMU,EAAaV,KACvBuD,SAAU,CACR1C,UAAW,IACX2C,MAAO,QACP5C,WAAY,IAEdO,KAAM,YACNhE,KAAMmD,EAAOnD,OAGfmD,EAAO0Q,mBAAmBD,GAC1BzQ,EAAOnD,KAAKgL,gBAAgB4I,GAC5BzQ,EAAOnD,KAAKsD,OACZsQ,EAAGrF,OAjD4B,SAACpL,EAAQkM,GACxC,IAAId,EAAS,CACXuF,OAAQ,CACNC,SAAU,kBAAMT,GAAmBnQ,EAAQ,qBAC3C6Q,MAAO,UAuBX,OAnBA3E,EAAYU,UAAU3P,IAAI,SAACmF,EAAMyL,GAC/B,IAAImC,EAAM,CACRY,SAAU,KACVC,MAAO,IAaT,OAXAb,EAAG,SAAe,WAChB3L,QAAQC,IAAR,6BAAkC4H,EAAYrL,KAA9C,qBAA+DuB,EAAKvB,OACpEqL,EAAY/D,cAAc,IAAIjD,EAAuB,CACnD9C,OACAvF,KAAMmD,EAAOnD,KACb6G,MAAOwI,KAETiE,GAAmBnQ,EAAQ,qBAE7BgQ,EAAG,MAAH,gBAAwB5N,EAAKvB,MAC7BkP,GAA0B3E,EAAQ4E,IAC3B,IAGF5E,EAsBK+F,CAAyBnR,EAAQI,ICnDlCgR,GAAa,SAAClN,EAAWlE,GACpC,IAAI0D,EAAQ1D,EAAOC,OAAOD,EAAOI,cAC7BiR,EAAO3N,EAAMhE,IAAIhD,EAAIwH,EAAU,GAC/BoN,EAAO5N,EAAMhE,IAAI/C,EAAIuH,EAAU,GACnCR,EAAMyE,cAAc,IAAIhB,GAAW,CACjCrK,UAAW,CAAEJ,EAAG2U,EAAM1U,EAAG2U,GACzBzU,KAAMmD,EAAOnD,KACb6G,QACAC,WAAY,M,ujBCJhB,IAsEM4N,GAA0B,SAACvR,EAAQkM,GACvC,MAAO,CACLsF,EAAG,CACDZ,SAAU,kBAAMQ,GAAWrN,EAAoBvC,EAAGxB,IAClD6Q,MAAO,QAETY,EAAG,CACDb,SAAU,kBAAMQ,GAAWrN,EAAoBrC,EAAG1B,IAClD6Q,MAAO,QAETa,EAAG,CACDd,SAAU,kBAAMQ,GAAWrN,EAAoBtC,EAAGzB,IAClD6Q,MAAO,QAETc,EAAG,CACDf,SAAU,kBAAMQ,GAAWrN,EAAoBpC,EAAG3B,IAClD6Q,MAAO,QAOTe,EAAG,CACDhB,SAAU,kBA9FG,SAAC5Q,EAAQ0D,GAC1B,IAAImO,EAAS7R,EAAOC,OAAOD,EAAOI,cAClCyR,EAAO1F,QAAS,EAChB,IAAIgD,EACC/S,KAAK2I,KAAK8M,EAAOnS,IAAIhD,EAAIgH,EAAMhE,IAAIhD,GADpCyS,EAEC/S,KAAK2I,KAAK8M,EAAOnS,IAAI/C,EAAI+G,EAAMhE,IAAI/C,GAExCqD,EAAOnD,KAAKyT,YAAYuB,GACxB,IAAIjC,EAAQlM,EAAMoO,SAASC,IACvBnC,GACFA,EAAM/S,KAAOmD,EAAOnD,KACpB+S,EAAMlQ,IAAM,CACVhD,EAAGgH,EAAMhE,IAAIhD,EAAIyS,EACjBxS,EAAG+G,EAAMhE,IAAI/C,EAAIwS,GAEnBS,EAAM9S,UAAN,MAAuB+U,EAAOnS,KAC9BgE,EAAM8B,oBAAoBoK,GAC1B5P,EAAO0Q,mBAAmBd,GAC1B5P,EAAOgS,mBAAmBpC,GAE1BA,EAAMtD,WAAWtM,EAAOnD,MACxBmD,EAAOnD,KAAKoV,mBACZjS,EAAOnD,KAAKsD,OACZuD,EAAMyE,cACJ,IAAIH,EAAW,CACb/C,QAAQ,gCACRpI,KAAMmD,EAAOnD,KACb6G,QACAC,WThCwB,QSoC5BU,QAAQC,IAAI,yBA8DM4N,CAAWlS,EAAQkM,IACnC2E,MAAO,iBAKAsB,GAAgB,SAACnS,GAC5B,IAAInD,EAAOmD,EAAOnD,KACduD,EAAeJ,EAAOC,OAAOpD,EAAKmD,OAAOI,cACzCV,EAAMU,EAAaV,IAEnBmS,EAAS,IAAI7F,GAAS,CACxBE,YAAa9L,EACbV,MACAuD,SAAU,CACR1C,UAAW,SACX2C,MAAO,QACP5C,WAAY,IAEdO,KAAM,SACNhE,OACAuO,OAAQmG,GAAwBvR,EAAQI,KAE1CJ,EAAO0Q,mBAAmBmB,GAC1B7R,EAAOnD,KAAKgL,gBAAgBgK,GAC5B7R,EAAOnD,KAAKsD,QC1HDiS,GAAO,SAAClO,EAAWlE,GAC9B,IAAI0D,EAAQ1D,EAAOC,OAAOD,EAAOI,cAC7BiR,EAAO3N,EAAMhE,IAAIhD,EAAIwH,EAAU,GAC/BoN,EAAO5N,EAAMhE,IAAI/C,EAAIuH,EAAU,GACnCR,EAAMyE,cAAc,IAAIL,GAAK,CAC3BhL,UAAW,CAAEJ,EAAG2U,EAAM1U,EAAG2U,GACzBzU,KAAMmD,EAAOnD,KACb6G,QACAC,WVT4B,QW+DnBqG,GAAW,SAACnN,GACvB,IAAI0O,EAAe1O,EAAKmD,OAAOC,OAAOpD,EAAKmD,OAAOI,cAC9CV,EAAME,EAAoB/C,EAAKI,KAAKiB,YAClCmU,EAjEe,WACrB,IAAIC,EAAe,CACjB,CACEzR,KAAM,OACNoC,SAAU,CACR1C,UAAWX,EAAwB,CAAC,WACpCsD,MAAO,QACP5C,WAAY,IAEdmL,WAAY,EACZtB,aAAc,EACdU,MAAO,KAET,CACEhK,KAAM,QACNoC,SAAU,CACR1C,UAAWX,EAAwB,CAAC,WACpCsD,MAAO,QACP5C,WAAY,IAEdmL,WAAY,EACZtB,aAAc,EACdU,MAAO,KAET,CACEhK,KAAM,QACNoC,SAAU,CACR1C,UAAWX,EAAwB,CAAC,WACpCsD,MAAO,OACP5C,WAAY,IAEdmL,WAAY,EACZtB,aAAc,EACdU,MAAO,KAET,CACEhK,KAAM,QACNoC,SAAU,CACR1C,UAAWX,EAAwB,CAAC,WACpCsD,MAAO,MACP5C,WAAY,IAEdmL,WAAY,EACZtB,aAAc,EACdU,MAAO,KAET,CACEhK,KAAM,QACNoC,SAAU,CACR1C,UAAWX,EAAwB,CAAC,WACpCsD,MAAO,SACP5C,WAAY,IAEdmL,WAAY,GACZtB,aAAc,GACdU,MAAO,MAGX,OAAOjL,EAAwB0S,GAOXC,GAChB7O,EAAQ,IAAI8I,GAAO,CACrBjB,eACA7L,MACAuD,SAAUoP,EAAYpP,SACtBpC,KAAMwR,EAAYxR,KAClBhE,OACA+N,QAAS,GACTT,aAAckI,EAAYlI,aAC1BsB,WAAY4G,EAAY5G,WACxBZ,MAAOwH,EAAYxH,QAGjBhO,EAAK2V,wBAAwB9O,KAC/B7G,EAAKmD,OAAOgK,SAAStG,GACrB7G,EAAKsD,SC/EIsS,GAAe,SAACzS,GAC3B,IAAI0D,EAAQ1D,EAAOC,OAAOD,EAAOI,cAC7BP,EAAWG,EAAOnD,KAAKI,IAAIT,EAAekH,EAAMhE,MAAMG,SAAStB,OAAO,SAACuB,GAAD,OAAOA,EAAEC,KAAO2D,EAAM3D,KAC5FF,EAAStD,OAAS,EACpBmH,EAAMyE,cAAc,IAAIvC,GAAW,CACjCxD,KAAMlG,EAAiB2D,GACvBhD,KAAMmD,EAAOnD,KACb6G,QACAC,WZV0B,OYc5BU,QAAQC,IAAI,uBCZHS,GAAO,SAACA,EAAM/E,GACzB,IAAI0D,EAAQ1D,EAAOC,OAAOD,EAAOI,cACjCsD,EAAMyE,cAAc,IAAI7B,GAAK,CAC3BvB,OACAlI,KAAMmD,EAAOnD,KACb6G,QACAC,WbR4B,Q,6NcChC,IAAM+O,GAAc,SAACxO,EAAWgE,EAAWvE,EAAY4E,EAAwBvI,GAC7E,IAAI0D,EAAQ1D,EAAOC,OAAOD,EAAOI,cACjCsD,EAAMyE,cAAc,IAAIG,GAAO,CAC7BpE,YACAgE,YACArL,KAAMmD,EAAOnD,KACb6G,QACA6E,yBACA5E,aACAG,iBAAkBf,EAAmBM,SA6C5BsP,GAAsB,SAAC3S,GAClC,IAAII,EAAeJ,EAAOC,OAAOD,EAAOI,cACxCA,EAAagL,OA3CW,SAACpL,EAAQkM,EAAa0G,GAC9C,IAAMjP,EAAavH,KAAKC,MAAMwW,IACxB3K,EAAY9L,KAAKC,MAAM6P,EAAYzM,OAASkE,GAAc,EAC1D4E,EAAyBL,EACzB4K,EAAqB,kBAAM5G,EAAYd,OAASwH,GACtD,MAAO,CACLjC,OAAQ,CACNC,SAAUkC,EACVjC,MAAO,SAETW,EAAG,CACDZ,SAAU,WACR8B,GAAYnR,EAAWC,EAAG0G,EAAWvE,EAAY4E,EAAwBvI,GACzE8S,KAEFjC,MAAO,cAETY,EAAG,CACDb,SAAU,WACR8B,GAAYnR,EAAWG,EAAGwG,EAAWvE,EAAY4E,EAAwBvI,GACzE8S,KAEFjC,MAAO,cAETa,EAAG,CACDd,SAAU,WACR8B,GAAYnR,EAAWE,EAAGyG,EAAWvE,EAAY4E,EAAwBvI,GACzE8S,KAEFjC,MAAO,cAETc,EAAG,CACDf,SAAU,WACR8B,GAAYnR,EAAWI,EAAGuG,EAAWvE,EAAY4E,EAAwBvI,GACzE8S,KAEFjC,MAAO,eAOWkC,CAAkB/S,EAAQI,E,uVAAT,IAA4BA,EAAagL,UC3DrE3H,GACX,cAUI,IATF5G,EASC,EATDA,KACA6G,EAQC,EARDA,MAQC,IAPD7C,YAOC,MAPM,SAON,MANDmS,gBAMC,MANU,IAMV,MALDC,oBAKC,MALc,IAKd,MAJDC,uBAIC,aAHDC,eAGC,MAHS,kBAAM,MAGf,MAFDC,cAEC,MAFQ,kBAAM,MAEd,MADDC,cACC,MADQ,kBAAM,MACd,sBACDrP,KAAKnH,KAAOA,EACZmH,KAAKN,MAAQA,EACbM,KAAKnD,KAAOA,EACZmD,KAAKgP,SAAWA,EAChBhP,KAAKsP,WAAaN,EAClBhP,KAAKiP,aAAeA,EACpBjP,KAAKkP,gBAAkBA,EACvBlP,KAAKuP,kBAAoB,EACzBvP,KAAKmP,QAAUA,EACfnP,KAAKoP,OAASA,EACdpP,KAAKqP,OAASA,GChBZG,GAAY,SAACtP,EAAWlE,GAC5B,IAAI0D,EAAQ1D,EAAOC,OAAOD,EAAOI,cAC7BqT,EAAiB,YAAOvP,GAE5B,GADa9H,KAAKE,SACL,GAAK,CAChB+H,QAAQC,IAAI,iBAEZ,IADA,IAAIoP,EAAQ,IACJxP,EAAU,KAAOuP,EAAkB,IAAMvP,EAAU,KAAOuP,EAAkB,IAAOC,EAAQ,GACjGA,GAAS,EACTxP,EAAY3C,EAAWrF,EAAiB6B,OAAOD,KAAKyD,KAEtD8C,QAAQC,IAAIoP,GAGd,IAAIrC,EAAO3N,EAAMhE,IAAIhD,EAAIwH,EAAU,GAC/BoN,EAAO5N,EAAMhE,IAAI/C,EAAIuH,EAAU,GACnCR,EAAMyE,cAAc,IAAIL,GAAK,CAC3BhL,UAAW,CAAEJ,EAAG2U,EAAM1U,EAAG2U,GACzBzU,KAAMmD,EAAOnD,KACb6G,QACAC,WhBxB4B,Q,8mCiBKhC,IAqBMgQ,GAAiB,SAAC3T,EAAQkM,EAAa0G,GAC3C,IAAME,EAAqB,WACzB,IAAIjB,EAAS7R,EAAOC,OAAOD,EAAOI,cAClCyR,EAAO1F,QAAS,EAChBnM,EAAOnD,KAAKyT,YAAYuB,IAE1B,MAAO,CACLlB,OAAQ,CACNC,SAAUkC,EACVjC,MAAO,SAETW,EAAG,CACDZ,SAAU,kBAAMQ,GAAWrN,EAAoBvC,EAAGxB,IAClD6Q,MAAO,QAETY,EAAG,CACDb,SAAU,kBAAMQ,GAAWrN,EAAoBrC,EAAG1B,IAClD6Q,MAAO,QAETa,EAAG,CACDd,SAAU,kBAAMQ,GAAWrN,EAAoBtC,EAAGzB,IAClD6Q,MAAO,QAETc,EAAG,CACDf,SAAU,kBAAMQ,GAAWrN,EAAoBpC,EAAG3B,IAClD6Q,MAAO,QAET+C,EAAG,CACDhD,SAAU,YAjDQ,SAAC5Q,EAAQ0D,GAC/B,IAAImO,EAAS7R,EAAOC,OAAOD,EAAOI,cAE9ByT,EAAQ9B,GAAc,CACxB/R,SACA0D,QACA5G,UAAU,MAAM+U,EAAOnS,OAErBmU,GACFnQ,EAAMyE,cACJ,IAAIH,GAAkB,CACpBlL,UAAU,MAAM+U,EAAOnS,KACvBlB,OAAQqV,EACRhX,KAAMmD,EAAOnD,KACb6G,QACAC,WjBpBwB,OiBuDxBmQ,CAAgB9T,EAAQkM,GACxB4G,KAEFjC,MAAO,c,6NCxDb,IAAMkD,GAAmB,SAAC7P,EAAWR,EAAO1D,GAC1C,IAAI6T,EfkIuB,SAAC,GAAD,IAC3B7T,EAD2B,EAC3BA,OACA0D,EAF2B,EAE3BA,MACA5G,EAH2B,EAG3BA,UACAqS,EAJ2B,EAI3BA,eAJ2B,OAKvBD,GAAsB,CAC1BlP,SACA0D,QACA5G,YACAqS,iBACAtE,MAAO,IACPuE,cAAe,cACfC,iBAAkBQ,Ke9INmE,CAAc,CACxBhU,SACA0D,QACAyL,eAAgB,CACdzS,EAAGwH,EAAU,GACbvH,EAAGuH,EAAU,IAEfpH,UAAW,CACTJ,EAAGgH,EAAMhE,IAAIhD,EAAoB,GAAfwH,EAAU,GAC5BvH,EAAG+G,EAAMhE,IAAI/C,EAAoB,GAAfuH,EAAU,MAI5B2P,GACFnQ,EAAMyE,cACJ,IAAId,GAAW,CACbvK,UAAW,CACTJ,EAAGgH,EAAMhE,IAAIhD,EAAIwH,EAAU,GAC3BvH,EAAG+G,EAAMhE,IAAI/C,EAAIuH,EAAU,IAE7B1F,OAAQqV,EACRhX,KAAMmD,EAAOnD,KACb6G,QACAC,WlB1BwB,QkBsEnBsQ,GAAY,SAACjU,GACxB,IAAII,EAAeJ,EAAOC,OAAOD,EAAOI,cACxCA,EAAagL,OAxCS,SAACpL,EAAQkM,EAAa0G,GAC5C,IAAME,EAAqB,kBAAM5G,EAAYd,OAASwH,GACtD,MAAO,CACLjC,OAAQ,CACNC,SAAUkC,EACVjC,MAAO,SAETW,EAAG,CACDZ,SAAU,WACRmD,GAAiBxS,EAAWC,EAAG0K,EAAalM,GAC5C8S,KAEFjC,MAAO,cAETY,EAAG,CACDb,SAAU,WACRmD,GAAiBxS,EAAWG,EAAGwK,EAAalM,GAC5C8S,KAEFjC,MAAO,cAETa,EAAG,CACDd,SAAU,WACRmD,GAAiBxS,EAAWE,EAAGyK,EAAalM,GAC5C8S,KAEFjC,MAAO,cAETc,EAAG,CACDf,SAAU,WACRmD,GAAiBxS,EAAWI,EAAGuK,EAAalM,GAC5C8S,KAEFjC,MAAO,eAOWqD,CAAgBlU,EAAQI,E,uVAAT,IAA4BA,EAAagL,U,ujBCpEhF,IAAM+I,GAAiB,SAACnU,EAAQN,GAAT,OAAiB,IAAI0M,GAAK,CAC/CvP,KAAMmD,EAAOnD,KACb2D,UAAU,EACVd,IAAK,CAAEhD,EAAGgD,EAAIhD,EAAGC,EAAG+C,EAAI/C,GACxBsG,SAAU,CAER1C,UAAW,eACX2C,MAAO,UACP5C,WAAY,WAEdO,KAAMoO,GACNxD,WAAY,KAGR2I,GAAkB,SAAClQ,EAAWlE,GAClC,IAAI0D,EAAQ1D,EAAOC,OAAOD,EAAOI,cAC7BqH,EAAkB,GAEtB,OnB0E6B,SAACvD,GAC9B,IAAImQ,EAAe,UAAMnQ,GACrBpG,EAAOC,OAAOD,KAAKyD,GACnBgL,GAAS,EAMb,OALAzO,EAAK+G,QAAQ,SAAC7G,GACR,UAAGuD,EAAWvD,MAAWqW,IAC3B9H,EAASvO,KAGNuO,EmBpFY+H,CAAgBpQ,IAEjC,IAAK,IACHuD,EAAkBA,EAAgBd,OAAO,CACvC,CACEjK,EAAGgH,EAAMhE,IAAIhD,EAAI,EACjBC,EAAG+G,EAAMhE,IAAI/C,EAAI,GAEnB,CACED,EAAGgH,EAAMhE,IAAIhD,EACbC,EAAG+G,EAAMhE,IAAI/C,EAAI,GAEnB,CACED,EAAGgH,EAAMhE,IAAIhD,EAAI,EACjBC,EAAG+G,EAAMhE,IAAI/C,EAAI,KAGrB,MACF,IAAK,IACH8K,EAAkBA,EAAgBd,OAAO,CACvC,CACEjK,EAAGgH,EAAMhE,IAAIhD,EAAI,EACjBC,EAAG+G,EAAMhE,IAAI/C,EAAI,GAEnB,CACED,EAAGgH,EAAMhE,IAAIhD,EACbC,EAAG+G,EAAMhE,IAAI/C,EAAI,GAEnB,CACED,EAAGgH,EAAMhE,IAAIhD,EAAI,EACjBC,EAAG+G,EAAMhE,IAAI/C,EAAI,KAGrB,MACF,IAAK,IACH8K,EAAkBA,EAAgBd,OAAO,CACvC,CACEjK,EAAGgH,EAAMhE,IAAIhD,EAAI,EACjBC,EAAG+G,EAAMhE,IAAI/C,EAAI,GAEnB,CACED,EAAGgH,EAAMhE,IAAIhD,EAAI,EACjBC,EAAG+G,EAAMhE,IAAI/C,GAEf,CACED,EAAGgH,EAAMhE,IAAIhD,EAAI,EACjBC,EAAG+G,EAAMhE,IAAI/C,EAAI,KAGrB,MACF,IAAK,IACH8K,EAAkBA,EAAgBd,OAAO,CACvC,CACEjK,EAAGgH,EAAMhE,IAAIhD,EAAI,EACjBC,EAAG+G,EAAMhE,IAAI/C,EAAI,GAEnB,CACED,EAAGgH,EAAMhE,IAAIhD,EAAI,EACjBC,EAAG+G,EAAMhE,IAAI/C,GAEf,CACED,EAAGgH,EAAMhE,IAAIhD,EAAI,EACjBC,EAAG+G,EAAMhE,IAAI/C,EAAI,KAOzB+G,EAAMyE,cAAc,IAAIX,GAAW,CACjCC,kBACAjJ,OAAQ2V,GAAenU,EAAD,MAAc0D,EAAMhE,MAC1C7C,KAAMmD,EAAOnD,KACb6G,QACAC,WnB/F4B,QmByInB4Q,GAAW,SAACvU,GACvB,IAAII,EAAeJ,EAAOC,OAAOD,EAAOI,cACxCA,EAAagL,OAxCQ,SAACpL,EAAQkM,EAAa0G,GAC3C,IAAME,EAAqB,kBAAM5G,EAAYd,OAASwH,GACtD,MAAO,CACLjC,OAAQ,CACNC,SAAUkC,EACVjC,MAAO,SAETW,EAAG,CACDZ,SAAU,WACRwD,GAAgB7S,EAAWC,EAAGxB,GAC9B8S,KAEFjC,MAAO,cAETY,EAAG,CACDb,SAAU,WACRwD,GAAgB7S,EAAWG,EAAG1B,GAC9B8S,KAEFjC,MAAO,cAETa,EAAG,CACDd,SAAU,WACRwD,GAAgB7S,EAAWE,EAAGzB,GAC9B8S,KAEFjC,MAAO,cAETc,EAAG,CACDf,SAAU,WACRwD,GAAgB7S,EAAWI,EAAG3B,GAC9B8S,KAEFjC,MAAO,eAOW2D,CAAexU,EAAQI,EAAT,MAA4BA,EAAagL,UC7IlEqJ,GAAM,SAACzU,GACNA,EAAOC,OAAOD,EAAOI,cAC3B2F,W,6NCIO,gBAAU/F,GAEvB,IAsEI0D,EAAQ,IAAI4F,GAAc,CAC5B5J,IAAK,CAAEhD,EAAG,GAAIC,EAAG,GACjBsG,SAAU,CACR1C,UAAW,IACX2C,MAAO,UACP5C,WAAY,WAEdO,KAAM,WACN+J,QAAS,GACTC,MAAO,IACPY,WAAY,GACZL,OAjFa,SAACpL,GACd,MAAO,CACLwR,EAAG,CACDZ,SAAU,kBAAM8D,GAAY3Q,EAAoBvC,EAAGxB,IACnD6Q,MAAO,QAETY,EAAG,CACDb,SAAU,kBAAM8D,GAAY3Q,EAAoBrC,EAAG1B,IACnD6Q,MAAO,QAETa,EAAG,CACDd,SAAU,kBAAM8D,GAAY3Q,EAAoBtC,EAAGzB,IACnD6Q,MAAO,QAETc,EAAG,CACDf,SAAU,kBAAM8D,GAAY3Q,EAAoBpC,EAAG3B,IACnD6Q,MAAO,QAET8D,EAAG,CACD/D,SAAU,kBAAM8D,GAA2B1U,IAC3C6Q,MAAO,gBAET+C,EAAG,CACDhD,SAAU,kBC5BW,SAAC5Q,GAAgD,IAAxC4U,EAAuC,uDAA1B,IAAKC,EAAqB,uDAAN,EACjEzU,EAAeJ,EAAOC,OAAOD,EAAOI,cAEpCsE,EAAS,IAAIoQ,GAAkB,CACjCjY,KAAMmD,EAAOnD,KACb6G,MAAOtD,EACPS,KAAM,0BACNmS,SAAU,IACVC,aAAc,IACdC,iBAAiB,EACjBC,QAAS,WACP/S,EAAayK,OAAS+J,EACtBxU,EAAa+J,aAAe/N,KAAKyK,IAAI,EAAGzG,EAAa+J,aAAe0K,GACpEzU,EAAaX,QAAUmV,EACvBxU,EAAa6C,SAAS1C,UAAY,SAClC8D,QAAQC,IAAR,UAAelE,EAAaS,KAA5B,8BAEFwS,OAAQ,WACNjT,EAAayK,OAAS+J,EACtBxU,EAAa+J,cAAgB0K,EAC7BzU,EAAa6C,SAAS1C,UAAY,IAClC8D,QAAQC,IAAR,UAAelE,EAAaS,KAA5B,2BAGJT,EAAa+H,cAAc,IAAI1D,EAAgB,CAC7CC,SACAhB,MAAOtD,EACPvD,KAAMmD,EAAOnD,KACbiH,iBAAkB,CAChBb,SAAU,CACRC,MAAO,UACP5C,WAAY,UACZC,UAAW,cDJKmU,CAAqB1U,EAAQ,MAC7C6Q,MAAO,gBAETkE,EAAG,CACDnE,SAAU,kBLLS,SAAC5Q,GAA4B,IAApBoN,EAAmB,uDAAN,EAC3ChN,EAAeJ,EAAOC,OAAOD,EAAOI,cAEpCsE,EAAS,IAAIoQ,GAAkB,CACjCjY,KAAMmD,EAAOnD,KACb6G,MAAOtD,EACPS,KAAM,QACNmS,SAAU,IACVC,aAAc,IACdC,iBAAiB,EACjBC,QAAS,WACP/S,EAAa+J,cAAgBiD,EAC7BhN,EAAa6C,SAAS1C,UAAY,IAClC8D,QAAQC,IAAR,UAAelE,EAAaS,KAA5B,yBACAT,EAAagL,OAAOoG,EAAI,CACtBZ,SAAU,kBAAM4C,GAAUjS,EAAWC,EAAGxB,IACxC6Q,MAAO,gBAETzQ,EAAagL,OAAOuG,EAAI,CACtBf,SAAU,kBAAM4C,GAAUjS,EAAWI,EAAG3B,IACxC6Q,MAAO,gBAETzQ,EAAagL,OAAOsG,EAAI,CACtBd,SAAU,kBAAM4C,GAAUjS,EAAWE,EAAGzB,IACxC6Q,MAAO,gBAETzQ,EAAagL,OAAOqG,EAAI,CACtBb,SAAU,kBAAM4C,GAAUjS,EAAWG,EAAG1B,IACxC6Q,MAAO,iBAGXwC,OAAQ,WACNjT,EAAa+J,cAAgBiD,EAC7BhN,EAAa6C,SAAS1C,UAAY,IAClC8D,QAAQC,IAAR,UAAelE,EAAaS,KAA5B,gCACAT,EAAagL,OAAOoG,EAAI,CACtBZ,SAAU,kBAAMwB,GAAK7Q,EAAWC,EAAGxB,IACnC6Q,MAAO,QAETzQ,EAAagL,OAAOuG,EAAI,CACtBf,SAAU,kBAAMwB,GAAK7Q,EAAWI,EAAG3B,IACnC6Q,MAAO,QAETzQ,EAAagL,OAAOsG,EAAI,CACtBd,SAAU,kBAAMwB,GAAK7Q,EAAWE,EAAGzB,IACnC6Q,MAAO,QAETzQ,EAAagL,OAAOqG,EAAI,CACtBb,SAAU,kBAAMwB,GAAK7Q,EAAWG,EAAG1B,IACnC6Q,MAAO,WAIbzQ,EAAa+H,cAAc,IAAI1D,EAAgB,CAC7CC,SACAhB,MAAOtD,EACPvD,KAAMmD,EAAOnD,KACb+G,aAAc,IACdE,iBAAkB,CAChBb,SAAU,CACRC,MAAO,UACP5C,WAAY,UACZC,UAAW,SKzDKmU,CAAmB1U,IACnC6Q,MAAO,YAETmE,EAAG,CACDpE,SAAU,kBEpCW,SAAC5Q,GAC5B,IAAI0D,EAAQ1D,EAAOC,OAAOD,EAAOI,cAC7BqH,EAAkB,CACpB,CACE/K,EAAGgH,EAAMhE,IAAIhD,EAAI,EACjBC,EAAG+G,EAAMhE,IAAI/C,GAEf,CACED,EAAGgH,EAAMhE,IAAIhD,EAAI,EACjBC,EAAG+G,EAAMhE,IAAI/C,EAAI,GAEnB,CACED,EAAGgH,EAAMhE,IAAIhD,EACbC,EAAG+G,EAAMhE,IAAI/C,EAAI,GAEnB,CACED,EAAGgH,EAAMhE,IAAIhD,EAAI,EACjBC,EAAG+G,EAAMhE,IAAI/C,EAAI,GAEnB,CACED,EAAGgH,EAAMhE,IAAIhD,EAAI,EACjBC,EAAG+G,EAAMhE,IAAI/C,GAEf,CACED,EAAGgH,EAAMhE,IAAIhD,EAAI,EACjBC,EAAG+G,EAAMhE,IAAI/C,EAAI,GAEnB,CACED,EAAGgH,EAAMhE,IAAIhD,EACbC,EAAG+G,EAAMhE,IAAI/C,EAAI,GAEnB,CACED,EAAGgH,EAAMhE,IAAIhD,EAAI,EACjBC,EAAG+G,EAAMhE,IAAI/C,EAAI,IAIrB+G,EAAMyE,cAAc,IAAIS,GAAkB,CACxCnB,kBACA5K,KAAMmD,EAAOnD,KACb6G,QACAC,WAAakP,IACb/O,iBAAkBf,EAAmBM,QFNjBqR,CAAqB1U,IACrC6Q,MAAO,kBAEToE,EAAG,CACDrE,SAAU,kBGxCW,SAAC5Q,GAC5B,IAAII,EAAeJ,EAAOC,OAAOD,EAAOI,cACpCmN,EAAWnN,EAAa8U,cAC5B,GAAI3H,EAAU,CACZ,IAAI7I,EAAS,IAAIoQ,GAAkB,CACjCjY,KAAMmD,EAAOnD,KACb6G,MAAOtD,EACPS,KAAM0M,EAAS1M,KACfmS,UAAW,EACXC,aAAc,IACdC,iBAAiB,EACjBC,QAAS,WACP/S,EAAayK,OAAS0C,EAASF,UAC/BjN,EAAaX,QAAU8N,EAASF,UAChCjN,EAAa+J,cAAgBoD,EAASH,WACtC/I,QAAQC,IAAR,UAAelE,EAAaS,KAA5B,uBAA+C0M,EAAS1M,KAAxD,MACA,IAAIsU,EAAkB/U,EAAagV,cAC/BD,EACF/U,EAAagL,OAAO6J,EAAEpE,MAAQsE,EAAgBtU,YAEvCT,EAAagL,OAAO6J,GAG/B7B,OAAQ,WACNhT,EAAasK,mBAAmB6C,EAASD,kBACzClN,EAAasK,mBAAmB,GAChCrG,QAAQC,IAAR,UAAelE,EAAaS,KAA5B,oBAA4C0M,EAASD,iBAArD,qCAGJlN,EAAa+H,cAAc,IAAI1D,EAAgB,CAC7CC,SACAhB,MAAOtD,EACPvD,KAAMmD,EAAOnD,KACb+G,aAAc,GACdE,iBAAkB,CAChBb,SAAU,CACRC,MAAO,UACP5C,WAAY,UACZC,UAAW,UHEGmU,CAAqB1U,IACrC6Q,MAAO,mBAET1R,EAAG,CACDyR,SAAU,kBAAM8D,GAAyB1U,IACzC6Q,MAAO,kBAETwE,EAAG,CACDzE,SAAU,kBAAM8D,GAAyB1U,IACzC6Q,MAAO,kBAETyE,EAAG,CACD1E,SAAU,kBAAM8D,GAAwB1U,IACxC6Q,MAAO,aAET0E,EAAG,CACD3E,SAAU,kBAAM8D,GAAoB1U,IACpC6Q,MAAO,UAETe,EAAG,CACDhB,SAAU,kBAAM8D,GAAqB1U,IACrC6Q,MAAO,SAGTlU,EAAG,CACDiU,SAAU,kBAAM8D,GAAgB1U,EAAOnD,OACvCgU,MAAO,WAET/C,EAAG,CACD8C,SAAU,kBAAM8D,GAAW1U,IAC3B6Q,MAAO,QAgBHzF,CAAOpL,KAQjB,OAJA0D,EAAMkJ,UAAN,YACK4I,MAAM,KAAKC,KAAK,IAAIxY,IAAI,kBAAM8U,GAAW/R,E,uVAAX,IAAwB0D,EAAMhE,SAG1DgE,G,ujBI5FF,IAAMgG,GAAb,WACE,cAMI,IAAD,IALDgM,qBAKC,MALe,GAKf,MAJDzV,cAIC,MAJQ,GAIR,MAHDG,oBAGC,MAHc,EAGd,MAFDuV,iBAEC,aADD9Y,YACC,MADM,KACN,sBACDmH,KAAK0R,cAAgBA,EACrB1R,KAAK/D,OAASA,EACd+D,KAAK5D,aAAeA,EACpB4D,KAAK2R,UAAYA,EACjB3R,KAAKnH,KAAOA,EAZhB,8KAgBQ6G,EAAQM,KAAK/D,OAAO+D,KAAK5D,eACvBwV,WAAWlS,EAAMmH,QACnBnH,EAAMmS,kBAlBd,oBAmBU/K,EAASpH,EAAMoS,UAAU9R,KAAKnH,MAnBxC,0CAoB4B,GApB5B,cAsBY0P,EAASzB,EAAOiL,UACpB/R,KAAKnH,KAAKsD,OAvBlB,UAwBcP,EAAakL,EAAOlH,cAxBlC,WAyBa2I,EAAOhI,QAzBpB,2CAyBoC,GAzBpC,WA0BmC,OAAvBgI,EAAO/H,YA1BnB,qDA2BQsG,EAASyB,EAAO/H,YA3BxB,8BA8BIR,KAAK5D,cAAgB4D,KAAK5D,aAAe,GAAK4D,KAAK/D,OAAO1D,OA9B9D,mBA+BW,GA/BX,2PAmCQmH,EAAQM,KAAK/D,OAAO+D,KAAK5D,cACzB4V,GAAS,EApCjB,WAqCWA,EArCX,oBAsCWtS,EAtCX,0CAsCyB,GAtCzB,UAuCUuS,EAAa,GACbvS,EAAMmS,kBAxChB,oBAyCY/K,EAASpH,EAAMoS,UAAU9R,KAAKnH,MAzC1C,2CA0C8B,GA1C9B,QA2CQoZ,GAAcnL,EAAOnH,WA3C7B,yBA6C6BmH,EAAOiL,UA7CpC,eA6CcxJ,EA7Cd,iBA8CqBvI,KAAKkS,gBAAgBpL,EAAQyB,EAAOhI,SA9CzD,oDA+CoB3E,EAAakL,EAAOlH,cA/CxC,QAgDcI,KAAKnH,KAAKsD,OAhDxB,WAkDeoM,EAAOhI,QAlDtB,2CAkDsC,GAlDtC,WAmDqC,OAAvBgI,EAAO/H,YAnDrB,qDAoDUsG,EAASyB,EAAO/H,YApD1B,wBAsDQR,KAAKmS,qBAAqBF,GAtDlC,wBAwDQvS,EAAMkS,WAAWlS,EAAMmH,OACvBmL,GAAS,EAzDjB,sCA4DIhS,KAAK5D,cAAgB4D,KAAK5D,aAAe,GAAK4D,KAAK/D,OAAO1D,OA5D9D,mBA6DW,GA7DX,iPAiEIyH,KAAK2R,WAAY,EAjErB,WAkEW3R,KAAK2R,UAlEhB,gCAmE6B3R,KAAKoS,UAnElC,OAmEMpS,KAAK2R,UAnEX,gCAqEQjS,EAAQM,KAAK/D,OAAO+D,KAAK5D,cArEjC,wBAwEM4D,KAAKnH,KAAKwZ,cAxEhB,kCA4EQ3S,EAAM0H,SACRpH,KAAKnH,KAAKyZ,cAAgB5S,EAAM0H,QAElCpH,KAAKnH,KAAK0Z,aA/Ed,UAgFUvS,KAAKnH,KAAK2Z,YAAYxS,KAAKnH,MAhFrC,kIAoFImH,KAAK2R,WAAY,IApFrB,sCAuFkBc,GACd,OAAKA,EAAUvD,iBACTlP,KAAK0R,cAAcnX,OAAO,SAACmG,GAAD,OAC5BA,EAAOhB,MAAM3D,KAAO0W,EAAU/S,MAAM3D,IACpC2E,EAAO7D,OAAS4V,EAAU5V,OACzBtE,OAAS,GACV8H,QAAQC,IAAR,UAAemS,EAAU5V,KAAzB,uCAA4D4V,EAAU/S,MAAM7C,QACrE,IAGX4V,EAAUtD,UACVnP,KAAK0R,cAAcjY,KAAKgZ,IACjB,KAnGX,6CAsG0B1W,GACtBiE,KAAK0R,cAAgB1R,KAAK0R,cAAcnX,OAAO,SAACmG,GAC9C,OAAIA,EAAO3E,KAAOA,IAClB2E,EAAO2O,UACA,OA1Gb,kDA8G+BqD,GAC3B1S,KAAK0R,cAAgB1R,KAAK0R,cAAcnX,OAAO,SAACmG,GAC9C,OAAIA,EAAOhB,MAAM3D,KAAO2W,IACxBhS,EAAO2O,UACA,OAlHb,gDAuHIrP,KAAK0R,cAAgB1R,KAAK0R,cAAcnX,OAAO,SAACmG,GAC9C,QAAIA,EAAOsO,UAAY,GAAKtO,EAAO4O,YAAc,KAC/C5O,EAAO2O,UACA,OA1Hf,2CAgIwB4C,GACpBjS,KAAK0R,cAAc7Q,QAAQ,SAACH,GAC1BA,EAAO6O,mBAAqB0C,EAC5BvR,EAAO4O,YAAc2C,EACjBvR,EAAO6O,mBAAqB7O,EAAOuO,eACrCvO,EAAO0O,SACP1O,EAAO6O,kBAAoB,KAG/BvP,KAAK2S,4BAzIT,8EA4IyB7L,EAAQ8L,GA5IjC,gFA4JSA,EA5JT,wBA+JYzS,EAAW,IAAIC,GAAS,CAC5BvH,KAAMmH,KAAKnH,KACXgE,KAAM,WACNL,UAAU,EACVd,IAAI,MAAKoL,EAAOpH,MAAMhE,KACtBuD,SAAUF,EAAmBI,KAAKF,WAEpCe,KAAKnH,KAAKgL,gBAAgB1D,GAC1BH,KAAKnH,KAAKsD,OAvKhB,SAwKYP,EAAa,KAxKzB,cAyKMoE,KAAKnH,KAAKga,mBAAmB1S,GAC7BA,EAAS2S,OAAO,GAChB9S,KAAKnH,KAAKsD,OACV2K,EAAOiM,sBA5Kb,mBA6Ka,GA7Kb,YAgLQjM,EAAOjH,UAAUtH,OAhLzB,8BAiLauO,EAAOjH,UAAUtH,OAAS,GAjLvC,wBAkLQuO,EAAOjH,UAAUgB,QAAQ,SAACV,GACxB,EAAKtH,KAAKgL,gBAAgB1D,KAE5BH,KAAKnH,KAAKsD,OArLlB,UAwLcP,EAAakL,EAAOlH,cAxLlC,QAyLQkH,EAAOjH,UAAUgB,QAAQ,SAACV,GACxB,EAAKtH,KAAKga,mBAAmB1S,GAC7BA,EAAS2S,OAAO,KAGlB9S,KAAKnH,KAAKsD,OACV2K,EAAOiM,sBA/Lf,kDAkMa,GAlMb,kCAoMW,GApMX,uIAuMYvY,GACRwF,KAAK/D,OAAOxC,KAAKe,KAxMrB,yCA2MsBA,GAClBwF,KAAK/D,OAAO+N,OAAOhK,KAAK5D,aAAc,EAAG5B,KA5M7C,qCA+MkBA,GACdwF,KAAK/D,OAAO+N,OAAOhK,KAAK5D,aAAe,EAAG,EAAG5B,KAhNjD,yCAmNsBA,GAClBwF,KAAK5D,cAAgB,EACjB4D,KAAK5D,eAAiB,IAAG4D,KAAK5D,aAAe4D,KAAK/D,OAAO1D,OAAS,KArN1E,qCAwNkBiC,GACdwF,KAAK5D,cAAgB4D,KAAK5D,aAAe,GAAK4D,KAAK/D,OAAO1D,WAzN9D,KA+Na6M,GAAb,sSAEQ1F,EAAQM,KAAK/D,OAAO+D,KAAK5D,cACzB4V,GAAS,EAHjB,WAIWA,EAJX,qBAKUtS,EAAMmS,kBALhB,oBAMY/K,EAASpH,EAAMoS,UAAU9R,KAAKnH,MAN1C,0CAO8B,GAP9B,cASUmH,KAAKnH,KAAKsD,OATpB,UAU6B2K,EAAOiL,UAVpC,eAUcxJ,EAVd,iBAWgB3M,EAAakL,EAAOlH,cAXpC,WAYe2I,EAAOhI,QAZtB,2CAYsC,GAZtC,WAaqC,OAAvBgI,EAAO/H,YAbrB,qDAcUsG,EAASyB,EAAO/H,YAd1B,+CAkBQwR,GAAS,EAlBjB,kCAsBIhS,KAAK5D,cAAgB,IACjB4D,KAAK5D,aAAe,GAAK4D,KAAK/D,OAAO1D,QAvB7C,wBAwBMyH,KAAK5D,aAAe,EACpB4D,KAAK/D,OAAO4E,QAAQ,SAACnB,GAAD,OAAWA,EAAMkS,WAAWlS,EAAMmH,SAzB5D,mBA0Ba,GA1Bb,kCA4BW,GA5BX,iPAgCI7G,KAAK2R,WAAY,EAhCrB,WAiCW3R,KAAK2R,UAjChB,gCAkC6B3R,KAAKoS,UAlClC,OAkCMpS,KAAK2R,UAlCX,oCAoCQjS,EAAQM,KAAK/D,OAAO+D,KAAK5D,eACnBgL,SACRpH,KAAKnH,KAAKyZ,cAAgB5S,EAAM0H,QAElCpH,KAAKnH,KAAK0Z,aAxCd,UAyCUvS,KAAKnH,KAAK2Z,YAAYxS,KAAKnH,MAzCrC,0GAAiC6M,I,ujBC9NjC,IAAMsN,GAAkB,CAACC,KAAM,GAElBC,GAAb,WACE,cAkBI,IAAD,IAjBDlX,cAiBC,MAjBQ,KAiBR,MAhBD/C,WAgBC,MAhBK,GAgBL,MAfDka,eAeC,MAfS,IAAI9Z,IAAY,CAExB+Z,MAAO,GAEPC,SAAU,GACVC,GAAI,YAUL,MARDC,eAQC,MARSxT,EAQT,MAPDyT,YAOC,MAPM,CACLra,KAAM6Z,GAAgBC,KACtBQ,KAAM,CACJC,MAAO,EACPC,aAAc,OAGjB,sBACD3T,KAAKhE,OAASA,EACdgE,KAAK/G,IAAMA,EACX+G,KAAKmT,QAAUA,EACfnT,KAAKuT,QAAUA,EACfvT,KAAKwT,KAAOA,EAxBhB,6DA4BI,GAAIxT,KAAKwT,KAAKra,OAAS6Z,GAAgBC,KAAM,CAC3C,IAAIU,EAAeC,aAAaC,QAAQ,gCAItCF,EAHGA,EAGYvb,KAAKyK,IAAI8Q,EAAe3T,KAAKwT,KAAKC,KAAKC,OAFvC1T,KAAKwT,KAAKC,KAAKC,MAIhCE,aAAaE,QAAQ,+BAAgCH,GACrD3T,KAAKwT,KAAKC,KAAKE,aAAeA,EAC9B,IAAK,IAAIxY,EAAI,EAAGA,EAAI/C,KAAKwC,IAAIoF,KAAKwT,KAAKC,KAAKC,MAAO,GAAIvY,IACrD4Y,GAAa/T,SAtCrB,mCA4CQA,KAAKwT,KAAKra,OAAS6Z,GAAgBC,OACTjT,KAAKhE,OAAOC,OAAO1B,OAAO,SAACmF,GAAD,OAAYA,EAAMgF,YAAYC,SAAS,aACpEpM,SACvByH,KAAKgU,gBACLhU,KAAKiU,qBAhDb,mCAqDgBP,GACZ1T,KAAKwT,KAAKC,KAAKC,MAAQA,IAtD3B,sCA0DI1T,KAAKkU,aAAalU,KAAKwT,KAAKC,KAAKC,MAAQ,KA1D7C,kCA8DI1T,KAAKkU,aAAa,GAClBlU,KAAKiU,mBA/DT,8CAkE0BvU,GAGtB,IAFA,IAAIyU,EAAO,EACPC,GAAS,GACLA,GAAQ,CACd,IAAI1Y,EAAME,EAAoBoE,KAAK/G,KAAKiB,YACxC,GAAI8F,KAAKsD,kBAAkB5H,EAAKgE,GAAQ,CACtC,IAAI/D,EAAOqE,KAAK/G,IAAI2C,EAAsBF,IAC1CgE,EAAMhE,IAAN,MAAiBA,GACjBC,EAAKE,SAASpC,KAAKiG,GACnB0U,GAAS,GAEXD,GAAQ,IACI,MACVC,GAAS,GAGb,OAAOA,IAlFX,oDAqFiC,IAAD,OAC5BpU,KAAKhE,OAAOC,OAAO4E,QAAQ,SAACnB,GAC1B,EAAK8O,wBAAwB9O,OAvFnC,yCA2FsB,IAAD,OACjBM,KAAKhE,OAAOC,OAAO4E,QAAQ,SAACnB,GAC1B,IAAI/D,EAAO,EAAK1C,IAAI2C,EAAsB8D,EAAMhE,MAC5CC,EACFA,EAAKE,SAASpC,KAAKiG,GAEnBW,QAAQC,IAAR,0BAA+BZ,EAAM3D,GAArC,aAA4C2D,EAAM7C,KAAlD,gBAjGR,sCAsGkB6C,GACd,IAAI/D,EAAOqE,KAAK/G,IAAI2C,EAAsB8D,EAAMhE,MAChD,OAAIC,GACFA,EAAKE,SAASpC,KAAKiG,IACZ,IAEPW,QAAQC,IAAR,0BAA+BZ,EAAM3D,GAArC,aAA4C2D,EAAM7C,KAAlD,aACO,KA7Gb,yCAiHsB6C,GAClB,IAAI/D,EAAOqE,KAAK/G,IAAI2C,EAAsB8D,EAAMhE,MAChD,QAAKC,IACLqE,KAAK/G,IAAI2C,EAAsB8D,EAAMhE,MAAMG,SAAWF,EAAKE,SAAStB,OAAO,SAAC8Z,GAAD,OAAQA,EAAGtY,KAAO2D,EAAM3D,MAC5F,KArHX,oCAgII,IAAIuY,EAAS,IAAIjb,IAAQkb,QACrBC,EAAY,GAqBhBF,EAAOG,OApBW,SAAU/b,EAAGC,EAAGoO,GAChC,I5BjIuBgB,EAAKlF,E4BiIxB7I,EAAMtB,EAAI,IAAMC,EAChBQ,EAAO,SACPub,EAAe,EACf3N,IACF5N,EAAO,QAIL4G,EAAkB5G,GAAMsD,Y5BzILsL,E4B0Ic,E5B1ITlF,E4B0IY9C,EAAkB5G,GAAMsD,UAAUlE,O5BzI9EwP,EAAM3P,KAAKuc,KAAK5M,GAChBlF,EAAMzK,KAAKC,MAAMwK,G4BwIX6R,E5BvICtc,KAAKC,MAAMD,KAAKE,UAAYuK,EAAMkF,IAAQA,G4B0I7C/H,KAAK/G,IAAIe,GAAO,CACdb,OACAub,eACA7Y,SAAU,IAEZ2Y,EAAU/a,KAAKO,IAES+L,KAAK/F,OAC/BA,KAAK4U,gCAvJT,wCA0JqBlZ,GAAkC,IAA7BlB,EAA4B,uDAAnB,CAACgC,UAAU,GACtC+L,GAAS,EACTtB,EAAajH,KAAK/G,IAAI2C,EAAsBF,IAChD,GAAIuL,EAAY,CACd,IAAI4N,EAAsB5N,EAAWpL,SAAStB,OAAO,SAACC,GAAD,OAAaA,EAAOgC,WAAUjE,OAAS,EAC5F,IAAKsc,GAAuBra,EAAOgC,SAAU,CAC3C,IAAIb,EAAOqE,KAAK/G,IAAI2C,EAAsBF,IACtCsE,KAAKuT,QAAQ5X,EAAKxC,MAAMqD,WAC1B+L,GAAS,IAKf,OAAOA,IAvKX,8CA0K0B7M,GACtB,IAAI6M,GAAS,EAMb,OALiBvI,KAAK/G,IAAI2C,EAAsBF,MAE9C6M,GAAS,GAGJA,IAjLX,6BAqLYuM,SAASC,eAAe,WAC9BC,YAAYhV,KAAKmT,QAAQ8B,kBAtL/B,6BA0LI,IAAK,IAAIjb,KAAOgG,KAAK/G,IAAK,CACxB,IAAIic,EAAQlb,EAAIC,MAAM,KAClBvB,EAAIyB,SAAS+a,EAAM,IACnBvc,EAAIwB,SAAS+a,EAAM,IACnBvZ,EAAOqE,KAAK/G,IAAIe,GAJI,EAKoBgG,KAAKuT,QAAQ5X,EAAKxC,MAAxDoD,EALkB,EAKlBA,UAAWG,EALO,EAKPA,WAAYJ,EALL,EAKKA,WAGzB6Y,EAAenV,KAAKuT,QAAQ5X,EAAKxC,MACrC,GAAIgc,EAAa1Y,UAAW,CAC1B,IAAI2Y,EAAQD,EAAa1Y,UAAUd,EAAK+Y,cAExCnY,EAAY6Y,EAAM7Y,UAClBG,EAAa0Y,EAAM1Y,WACnBJ,EAAa8Y,EAAM9Y,WACnBX,EAAK+Y,cAAgB/Y,EAAK+Y,aAAe,GAAKS,EAAa1Y,UAAUlE,OAGvE,GAAIoD,EAAKE,SAAStD,OAAS,EAAG,CAC5B,IAAIiC,EAASmB,EAAKE,SAASF,EAAKE,SAAStD,OAAS,GAClDgE,EAAY/B,EAAOyE,SAAS1C,UAC5BG,EAAalC,EAAOyE,SAASC,MACzB1E,EAAOyE,SAAS3C,aAClBA,EAAa9B,EAAOyE,SAAS3C,YAGjC0D,KAAKmT,QAAQhX,KAAKzD,EAAGC,EAAG4D,EAAWG,EAAYJ,MApNrD,+BAwNYoD,GAA8B,IAAvB1D,EAAsB,uDAAbgE,KAAKhE,OACzBqZ,EAAWrV,KAAK6D,gBAAgBnE,GACpC,QAAK2V,IACLrZ,EAAOC,OAAOxC,KAAKiG,GACnBM,KAAK7D,QACE,KA7NX,wCAgOqBuD,GACjBM,KAAKiO,mBACLjO,KAAK7D,SAlOT,kCAqOeuD,GACXM,KAAKhE,OAAOC,OAAS+D,KAAKhE,OAAOC,OAAO1B,OAAO,SAAC8Z,GAAD,OAAQA,EAAGtY,KAAO2D,EAAM3D,KAIvEiE,KAAK6S,mBAAmBnT,GACxBM,KAAK7D,SA3OT,iCA8OcmZ,GAAa,IAAD,OACtBtV,KAAKhE,OAAOnD,KAAOmH,KACnBA,KAAKhE,OAAOC,OAAO4E,QAAQ,SAACnB,GAC1BA,EAAM7G,KAAO,IAEfmH,KAAKuV,OACLvV,KAAKwV,cACLxV,KAAK7D,OACLmZ,EAAW1N,QAAQ6N,QACnBzV,KAAKiU,qBAvPT,KA4PayB,GAAiB,SAACC,EAAO3Z,GACpC,IAAKA,EAAO2V,UAAW,CACrB,IACIvK,EADQpL,EAAOC,OAAOD,EAAOI,cACdgL,OACfwO,EAAOD,EAAM3b,IACjB,KAAM4b,KAAQxO,GAAW,OACzBA,EAAOwO,GAAP,WACA5Z,EAAOqJ,UC5PIwQ,OAbf,SAAgBC,GACd,IAAI5W,EAAQ4W,EAAK,MAEjB,OADK5W,IAAOA,EAAQ,QAElB,4BACE6W,QAASD,EAAMC,QACfC,UAAS,cAAS9W,EAAT,cAER4W,EAAMrQ,WCcEwQ,G,iLAnBX,OACE,yBAAKD,UAAU,kBACb,yBAAKA,UAAU,aAAf,eAEEhW,KAAK8V,MAAMrC,MACTzT,KAAK8V,MAAMrC,KAAKxa,IAAI,SAACmF,EAAMyL,GACzB,OACE,kBAAC,GAAD,CAAQ7P,IAAK6P,EAAO3K,MAAOd,EAAI,MAAW2X,QAAS,kBAAM,OAAzD,UACM3X,EAAKyO,MADX,aACqBzO,EAAK2I,e,GAVhBmP,IAAMC,WCqBjBC,G,iLAnBX,OACE,yBAAKJ,UAAU,gBACb,yBAAKA,UAAU,aAAf,aAEEhW,KAAK8V,MAAMtP,WACTxG,KAAK8V,MAAMtP,UAAUvN,IAAI,SAACwN,EAAMoD,GAC9B,OACE,kBAAC,GAAD,CAAQ7P,IAAK6P,EAAOkM,QAAS,kBAAM,OAChCtP,EAAK5J,KADR,IACe4J,EAAKrI,KAAOqI,EAAKrI,KAAKa,SAAS1C,UAAY,W,GAVlD2Z,IAAMC,WCqBfE,G,iLAnBX,OACE,yBAAKL,UAAU,gBACb,yBAAKA,UAAU,aAAf,aAEEhW,KAAK8V,MAAMQ,WACTtW,KAAK8V,MAAMQ,UAAUrd,IAAI,SAACmF,EAAMyL,GAC9B,OACE,kBAAC,GAAD,CAAQ7P,IAAK6P,EAAOkM,QAAS,kBAAM,OAChClM,EADH,IACWzL,EAAKvB,KADhB,IACuBuB,EAAKa,SAAS1C,kB,GAV7B2Z,IAAMC,W,SCsBfzF,G,iLApBX,OACE,yBAAKsF,UAAU,aACb,yBAAKA,UAAU,aAAf,UAGEhW,KAAK8V,MAAM1O,QACTrN,OAAOwc,QAAQvW,KAAK8V,MAAM1O,QAAQnO,IAAI,WAAe4Q,GAAW,IAAD,oBAAvB7P,EAAuB,KAAlB+M,EAAkB,KAC7D,OACE,kBAAC,GAAD,CAAQ/M,IAAK6P,EAAOkM,QAAS,kBAAM,OAChC/b,EADH,IACS+M,EAAM8F,c,GAXVqJ,IAAMC,W,6NCI3B,IAAM/O,GAAS,SAACpL,GACd,MAAO,CACLwR,EAAG,CACDZ,SAAU,kBAAM8D,GAAY3Q,EAAoBvC,EAAGxB,IACnD6Q,MAAO,QAETY,EAAG,CACDb,SAAU,kBAAM8D,GAAY3Q,EAAoBrC,EAAG1B,IACnD6Q,MAAO,QAETa,EAAG,CACDd,SAAU,kBAAM8D,GAAY3Q,EAAoBtC,EAAGzB,IACnD6Q,MAAO,QAETc,EAAG,CACDf,SAAU,kBAAM8D,GAAY3Q,EAAoBpC,EAAG3B,IACnD6Q,MAAO,QAET1R,EAAG,CACDyR,SAAU,kBAAM8D,GAAyB1U,IACzC6Q,MAAO,kBAETwE,EAAG,CACDzE,SAAU,kBAAM8D,GAAyB1U,IACzC6Q,MAAO,kBAET+C,EAAG,CACDhD,SAAU,kBChCS,SAAC5Q,GAAiC,IAAzBwa,EAAwB,uDAAP,GAC7C9W,EAAQ1D,EAAOC,OAAOD,EAAOI,cACjCsD,EAAMyE,cAAc,IAAInC,GAAU,CAChCnJ,KAAMmD,EAAOnD,KACb6G,QACAuC,UAAWuU,KD2BO9F,CAAiB1U,IACjC6Q,MAAO,cAETyE,EAAG,CACD1E,SAAU,kBAAM8D,GAAwB1U,IACxC6Q,MAAO,aAET0E,EAAG,CACD3E,SAAU,kBAAM8D,GAAoB1U,IACpC6Q,MAAO,UAETe,EAAG,CACDhB,SAAU,kBAAM8D,GAAqB1U,IACrC6Q,MAAO,SAETlU,EAAG,CACDiU,SAAU,kBAAM8D,GAAgB1U,EAAOnD,OACvCgU,MAAO,WAET/C,EAAG,CACD8C,SAAU,kBEnDM,SAAC5Q,EAAQoG,GAC7B,IAAI1C,EAAQ1D,EAAOC,OAAOD,EAAOI,cACjCsD,EAAMyE,cAAc,IAAIhC,GAAO,CAC7BC,eACAvJ,KAAMmD,EAAOnD,KACb6G,QACAC,WlCP4B,OgCoDV+Q,CAAc1U,EAAQ,IACtC6Q,MAAO,UAET,EAAK,CACHD,SAAU,kBAAM8D,GAAY3Q,EAAoBnD,MAAOZ,IACvD6Q,MAAO,gBAET,EAAK,CACHD,SAAU,kBAAM8D,GAAY3Q,EAAoB9C,QAASjB,IACzD6Q,MAAO,kBAET,EAAK,CACHD,SAAU,kBAAM8D,GAAY3Q,EAAoBzC,SAAUtB,IAC1D6Q,MAAO,qBAET7R,EAAG,CACD4R,SAAU,kBnBxDW,SAAC5Q,GAC1B,IAAI0D,EAAQ1D,EAAOC,OAAOD,EAAOI,cACjCsD,EAAMyE,cAAc,IAAI3B,GAAY,CAClCC,iBAAkB,CAChB9F,EAAWC,MACXD,EAAWM,SAEbpE,KAAMmD,EAAOnD,KACb6G,QACAC,WbrB4B,OgCoEV+Q,CAAmB1U,IACnC6Q,MAAO,aAKE,YAAU7Q,GACvB,IAAI0D,EAAQ,IAAI4F,GAAc,CAC5B5J,IAAK,CAAEhD,EAAG,GAAIC,EAAG,GACjBsG,SAAU,CACR1C,UAAW,IACX2C,MAAO,QACP5C,WAAY,UAEdO,KAAM,iBACN+J,QAAS,GACTC,MAAO,IACPY,WAAY,EACZL,OAAQA,GAAOpL,KAUjB,OAPA0D,EAAMkJ,UAAN,CACEmF,GAAW/R,GACX+R,GAAW/R,GACX+R,GAAW/R,IAHb,mBAIKwV,MAAM,IAAIC,KAAK,IAAIxY,IAAI,kBAAM8U,GAAW/R,E,uVAAX,IAAwB0D,EAAMhE,UAGzDgE,G,6NG3FM,gBAAU1D,GAEvB,IAuEI0D,EAAQ,IAAI4F,GAAc,CAC5B5J,IAAK,CAAEhD,EAAG,GAAIC,EAAG,GACjBsG,SAAU,CACR1C,UAAW,IACX2C,MAAO,UACP5C,WAAY,WAEdO,KAAM,QACN+J,QAAS,GACTC,MAAO,IACPY,WAAY,GACZkC,WAAY,EACZvC,OAnFa,SAACpL,GACd,MAAO,CACLwR,EAAG,CACDZ,SAAU,kBAAM8D,GAAY3Q,EAAoBvC,EAAGxB,IACnD6Q,MAAO,QAETY,EAAG,CACDb,SAAU,kBAAM8D,GAAY3Q,EAAoBrC,EAAG1B,IACnD6Q,MAAO,QAETa,EAAG,CACDd,SAAU,kBAAM8D,GAAY3Q,EAAoBtC,EAAGzB,IACnD6Q,MAAO,QAETc,EAAG,CACDf,SAAU,kBAAM8D,GAAY3Q,EAAoBpC,EAAG3B,IACnD6Q,MAAO,QAET8D,EAAG,CACD/D,SAAU,kBCzBO,SAAC5Q,GACxB,IAAI0D,EAAQ1D,EAAOC,OAAOD,EAAOI,cAC7Bqa,EAAc9S,oBAAUjE,EAAM0H,eAC3BqP,EAAW,SACXA,EAAW,SACXA,EAAW,EAClB,IAAIxU,EAAY,CACd,CACEkI,UAAW,WACXpD,MAAM,MAAMrH,EAAMT,SAAb,CAAuB3C,WAAY,aAE1C,CACE6N,UAAW,SACXpD,MAAO0P,IAGX/W,EAAMyE,cAAc,IAAInC,GAAU,CAChCnJ,KAAMmD,EAAOnD,KACb6G,QACAuC,eDMoByO,CAAiB1U,IACjC6Q,MAAO,cAET+C,EAAG,CACDhD,SAAU,kBlBiCM,SAAC5Q,GACvB,IAAII,EAAeJ,EAAOC,OAAOD,EAAOI,cACpCvD,EAAOmD,EAAOnD,KACd6C,EAAMU,EAAaV,IAEnBmS,EAAS,IAAI7F,GAAS,CACxBE,YAAa9L,EACbV,MACAuD,SAAU,CACR1C,UAAW,SACX2C,MAAO,QACP5C,WAAY,IAEdO,KAAM,SACNhE,OACAuO,OAAQuI,GAAe3T,EAAQI,EAAT,MAA4BA,EAAagL,WAEjEpL,EAAO0Q,mBAAmBmB,GAC1BhV,EAAKgL,gBAAgBgK,GACrBhV,EAAKsD,OkBpDiBuU,CAAgB1U,IAChC6Q,MAAO,aAETkE,EAAG,CACDnE,SAAU,kBEjCM,SAAC5Q,GAA6B,IAArB0a,EAAoB,uDAAN,EACzCta,EAAeJ,EAAOC,OAAOD,EAAOI,cACpCsE,EAAS,IAAIoQ,GAAkB,CACjCjY,KAAMmD,EAAOnD,KACb6G,MAAOtD,EACPS,KAAM,YACNmS,SAAU,IACVC,aAAc,IACdC,iBAAiB,EACjBC,QAAS,WACP/S,EAAasL,SAAWgP,EACxBrW,QAAQC,IAAR,UAAelE,EAAaS,KAA5B,qCACAT,EAAa6C,SAAS3C,WAAa,WAErC+S,OAAQ,WACNjT,EAAasL,QAAUtP,KAAKyK,IAAI,EAAGzG,EAAasL,QAAUgP,GAC1DrW,QAAQC,IAAR,UAAelE,EAAaS,KAA5B,qCACAT,EAAa6C,SAAS3C,WAAa,aAGvCF,EAAa+H,cAAc,IAAI1D,EAAgB,CAC7CC,SACAhB,MAAOtD,EACPvD,KAAMmD,EAAOnD,KACbiH,iBAAkB,CAChBb,SAAU,CACR1C,UAAW,eACX2C,MAAO,UACP5C,WAAY,eFKIoU,CAAgB1U,EAAQ,IACxC6Q,MAAO,aAETmE,EAAG,CACDpE,SAAU,kBAAM8D,GAAgB1U,IAChC6Q,MAAO,aAEToE,EAAG,CACDrE,SAAU,kBAAM8D,GAAiB1U,IACjC6Q,MAAO,cAET1R,EAAG,CACDyR,SAAU,kBAAM8D,GAAyB1U,IACzC6Q,MAAO,kBAETwE,EAAG,CACDzE,SAAU,kBAAM8D,GAAyB1U,IACzC6Q,MAAO,kBAETyE,EAAG,CACD1E,SAAU,kBAAM8D,GAAwB1U,IACxC6Q,MAAO,aAET0E,EAAG,CACD3E,SAAU,kBAAM8D,GAAoB1U,IACpC6Q,MAAO,UAETe,EAAG,CACDhB,SAAU,kBAAM8D,GAAqB1U,IACrC6Q,MAAO,SAGTlU,EAAG,CACDiU,SAAU,kBAAM8D,GAAgB1U,EAAOnD,OACvCgU,MAAO,WAET8J,EAAG,CACD/J,SAAU,kBAAM8D,GAAW1U,IAC3B6Q,MAAO,iBAkBHzF,CAAOpL,GACf0L,QAAS,IAUX,OAPAhI,EAAMkJ,UAAN,CACEmF,GAAW/R,IADb,mBAEKwV,MAAM,KAAKC,KAAK,IAAIxY,IAAI,kBAAM8U,GAAkB/R,E,uVAAlB,IAA+B0D,EAAMhE,UAKjEgE,GG7BMkX,G,YA7Db,WAAYd,GAAQ,IAAD,sBACjB,4CAAMA,IACN,IAAIe,EAAS,IAAInR,GAAc,IAC3BhG,EAAQ,EAAKoW,MAAMgB,kBAAkB7Q,WAAW4Q,GACpDA,EAAO5a,OAAOxC,KAAKiG,GACnB,IAAI7G,EAAO,IAAIqa,GAAU,CAAElX,OAAQ6a,IALlB,OAOjB,EAAKE,MAAQ,CACXle,KAAMA,GAER,EAAKyc,WAAaY,IAAMc,YAVP,E,oMAcjBhX,KAAK+W,MAAMle,KAAKoN,WAAWjG,KAAKsV,YAChCtV,KAAK+W,MAAMle,KAAX,YAAiC,kBAAM,EAAKid,MAAMmB,gBAAgBvf,EAAQC,QAC1EqI,KAAK+W,MAAMle,KAAK2Z,YAAc,SAAC0E,GAAmB,EAAKC,SAAS,CAACte,KAAMqe,KACvElX,KAAK+W,MAAMle,KAAKmD,OAAOqJ,Q,mIAGf,IZ+OmBiQ,EAAYI,EAAgB1Z,EY/OhD,OAEHyX,GADezT,KAAK+W,MAAMle,KAAKmD,OAAOC,OAAO+D,KAAK+W,MAAMle,KAAKmD,OAAOI,cAC7D,CACT,CACEyQ,MAAO,OACP9F,MAAM,YAAD,OAAc/G,KAAK+W,MAAMle,KAAK2a,KAAKC,KAAKC,MAAxC,sBAA2D1T,KAAK+W,MAAMle,KAAK2a,KAAKC,KAAKE,iBAoB9F,OAhBAF,EAAOA,EAAK9Q,OAAL,YAEA3C,KAAK+W,MAAMle,KAAKmD,OAAOC,OAAOhD,IAAI,SAACyG,EAAOmK,GAC3C,IAAItB,EAAM,aACRsE,MAAOnN,EAAM7C,KACbkK,MAAO8C,GAFC,sBAGMnK,EAAM+H,WAHZ,oBAGkC/H,EAAMjE,OAHxC,YAGkDiE,EAAMmH,QAKlE,OAHIgD,IAAU,EAAKkN,MAAMle,KAAKmD,OAAOI,eACnCmM,EAAM,MAAY,OAEbA,MAMX,yBAAKyN,UAAU,SACb,yBAAKA,UAAU,aAAf,gBACA,4BAAQA,UAAU,MAAMD,QAAS,kBAAM,EAAKD,MAAMmB,gBAAgBvf,EAAQC,SAA1E,QACA,yBAAKqe,UAAU,OACb,kBAAC,GAAD,CAAavC,KAAMA,IACnB,kBAAC,GAAD,CAAWjN,UAAWxG,KAAK+W,MAAMle,KAAKmU,mBACtC,kBAAC,GAAD,CAAWsJ,UAAWtW,KAAK+W,MAAMle,KAAK2T,mBACtC,kBAAC,GAAD,CAAUpF,OAAQpH,KAAK+W,MAAMle,KAAKyZ,iBZ8MbgD,EY7MAtV,KAAKsV,WZ6MOI,EY7MKxC,GZ6MWlX,EY7MUgE,KAAK+W,MAAMle,KAAKmD,OZ+MjF,yBACED,GAAG,UACHqb,IAAK9B,EACL+B,UAAW,SAAC1B,GAAD,OAAWD,EAAeC,EAAO3Z,IAC5Csb,SAAS,a,GY1QKpB,IAAMC,WCVpBoB,GAAkB,SAACzB,GACvB,OACE,yBAAKE,UAAU,mBAEXF,EAAM0B,WAAWve,IAAI,SAACsD,EAAWsN,GAC/B,IAAI3K,EAAQ,GAKZ,OAJI4W,EAAMgB,oBACR5X,EAAQ4W,EAAMgB,kBAAkBja,OAASN,EAAUM,KAAO,MAAQ,IAIlE,4BACE7C,IAAK6P,EACLmM,UAAS,sCAAiC9W,GAC1C6W,QAAS,kBAAMD,EAAM2B,qBAAqBlb,KAEzCA,EAAUM,UA4CV6a,G,YAlCb,WAAY5B,GAAQ,IAAD,8BACjB,4CAAMA,KACDiB,MAAQ,GAFI,E,sEAKT,IAAD,OACP,OACE,yBAAKf,UAAU,SACb,yBACE2B,MAAO,CACLvE,MAAO,QACPwE,OAAQ,QACRC,gBAAiB,YAGnB,yBAAKC,MAAM,uBAAX,kBACA,kBAAC,GAAD,CACEN,WAAYxX,KAAK8V,MAAM0B,WACvBV,kBAAmB9W,KAAK8V,MAAMgB,kBAC9BW,qBAAsBzX,KAAK8V,MAAM2B,uBAEnC,4BACEK,MAAM,MACN/B,QAAS,kBAAM,EAAKD,MAAMmB,gBAAgBvf,EAAQE,QAClDmgB,UAAW/X,KAAK8V,MAAMgB,mBAHxB,c,GAtBUZ,IAAMC,WCfX6B,GARE,WACf,MAAO,CACLC,WACAC,SACAC,mB,2jBCsEWC,G,YAtEb,aAAe,IAAD,sBACZ,8CACA,IAAIC,EAAeL,KACfR,EAAazd,OAAOD,KAAKue,GAAcpf,IAAI,SAACe,EAAKmB,GACnD,MAAO,CAEL8K,WAAYoS,EAAare,GACzBse,UAAU,EACVzb,KAAM7C,KARE,OAWZ,EAAK+c,MAAQ,CACXwB,aAAc7gB,EAAQC,MACtB6f,aACAV,kBAAmB,MAdT,E,6EAkBGyB,GACfvY,KAAKmX,SAAS,CAACoB,mB,2CAGKhc,GACpByD,KAAKmX,SAAS,CAACL,kBAAkB,MAAKva,O,wCAItC,IAAMic,EAAc,kBAAC,GAAD,CAClBxe,IAAKtC,EAAQC,MACbsf,gBAAiBjX,KAAKiX,gBAAgBlR,KAAK/F,MAC3CyX,qBAAsBzX,KAAKyX,qBAAqB1R,KAAK/F,MACrD8W,kBAAmB9W,KAAK+W,MAAMD,kBAC9BU,WAAYxX,KAAK+W,MAAMS,aAEnBiB,EAAc,kBAAC,GAAD,CAClBze,IAAKtC,EAAQE,MACbqf,gBAAiBjX,KAAKiX,gBAAgBlR,KAAK/F,MAC3C8W,kBAAmB9W,KAAK+W,MAAMD,oBAGhC,OAAQ9W,KAAK+W,MAAMwB,cACjB,KAAK7gB,EAAQC,MACX,OAAO6gB,EACT,KAAK9gB,EAAQE,MACX,OAAO6gB,EACT,QACE,OAAOD,K,+BAKX,IAAMD,EAAevY,KAAK0Y,kBAC1B,OACE,yBAAK1C,UAAU,WACb,kBAAC,IAAD,CACE2C,eAAe,OACfC,kBAAkB,EAClBC,iBAAiB,EACjBC,iBAAiB,EACjBC,wBAAyB,IACzBC,uBAAwB,IACxBC,uBAAwB,KAEtBV,Q,GAhEUrC,IAAMC,WCQf+C,GAAO,SAACjgB,EAAKka,GACxB,IAAK,IAAInZ,KAAOf,EAAK,CACnB,IAAIic,EAAQlb,EAAIC,MAAM,KAClBvB,EAAIyB,SAAS+a,EAAM,IACnBvc,EAAIwB,SAAS+a,EAAM,IACnBvZ,EAAO1C,EAAIe,GAJI,EAbd,CACL,OAAU,CACRsC,WAAY,OACZI,WAAY,OACZH,UAAW,IACXC,UAAU,IAa2Cb,EAAKxC,MAAtDoD,EALa,EAKbA,UAAWG,EALE,EAKFA,WAAYJ,EALV,EAKUA,WAC7B,GAAIX,EAAKE,SAAStD,OAAS,EAAG,CAC5B,IAAIiC,EAASmB,EAAKE,SAASF,EAAKE,SAAStD,OAAS,GAClDgE,EAAY/B,EAAO2e,WAAWla,SAAS1C,UACvCG,EAAalC,EAAO2e,WAAWla,SAASC,MACpC1E,EAAO2e,WAAWla,SAAS3C,aAC7BA,EAAa9B,EAAO2e,WAAWla,SAAS3C,YAG5C6W,EAAQhX,KAAKzD,EAAGC,EAAG4D,EAAWG,EAAYJ,KAMjC9D,GAAiB,SAACC,GAAD,gBAAeA,EAAOC,EAAtB,YAA2BD,EAAOE,IAEnDygB,GAAwB,SAACvd,GACpC,OAAOA,EAAStB,OAAO,SAACuB,GAAD,OAAOA,EAAEqd,WAAW1e,eAAe,aAAeqB,EAAEqd,WAAWE,QAAQ7c,YAOnF3E,GAAQ,WAAwB,IAAvBC,EAAsB,uDAAR,IAClC,OAAO,IAAIC,QAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,M,ujBC7C7C,IAAMwhB,GAAe,WAAwD,IAAvDvd,EAAsD,uDAAjD,KAAMc,EAA2C,uDAApC,QAASsc,EAA2B,uDAAd,GAAII,EAAU,uCAC7E/e,EAAS,CACXuB,KACAc,OACAsc,aACAI,QACAC,UAAW,SAAClT,EAAQmT,EAAWC,GAApB,OAAmCF,GAAUlT,EAAQmT,EAAWC,EAAYH,KAEzF,OAAO/e,GAGIgf,GAAS,sCAAG,oDAAA7L,EAAA,qDAAOrH,EAAP,+BAAgB,KAAMmT,EAAtB,+BAAkC,KAAMC,EAAxC,+BAAqD,KAAMH,EAA3D,+BAAmE,KACtFhZ,GAAU,EADS,OAAAoN,EAAA,KAEPrH,EAAO6S,YAFA,iDAEdnf,EAFc,aAGjB2f,EAAYrT,EAAO6S,WAAWnf,IACpBS,eAAegf,GAJR,oBAKnBpZ,QAAQC,IAAI,qBAAsBmZ,GAClClZ,GAAU,EACQ,mBAAdkZ,EAPe,kCAQX7d,KARW,QAUnB+d,EAAUF,GAAV,MAA0BC,EAA1B,CAAsCE,KAAMtT,EAAQqT,UAAWA,KAC/D/d,GAAY2d,EAAMtgB,IAAKsgB,EAAMpG,SAXV,+BAclB5S,GACHF,QAAQC,IAAI,gBAfS,0CAAH,qD,ujBCXf,IAcM+Y,GAAU,WAAuB,IAAtB7c,EAAqB,wDAC3C,MAAO,CACLA,WACAqd,cAAe,SAACH,GACMA,EAAdC,UACInd,UAAW,GAEvBsd,gBAAiB,SAACJ,GACIA,EAAdC,UACInd,UAAW,KAKdud,GAAO,SAACR,GAAiC,IAA1B7d,EAAyB,uDAAnB,CAAEhD,EAAG,EAAGC,EAAG,GAC3C,OAAI4gB,EACK,CACL7d,MACAse,KAAM,SAACN,GAAgB,IACfE,EAA2CF,EAA3CE,KAAMD,EAAqCD,EAArCC,UAAW5gB,EAA0B2gB,EAA1B3gB,WAAYD,EAAc4gB,EAAd5gB,UACnC,GAAIygB,EAAMU,UAAUV,EAAMtgB,IAAKH,GAAY,CACzC6gB,EAAUje,IAAM5C,EAChB,IAAI6C,EAAO4d,EAAMtgB,IAAI2C,GAAsB7C,IAC3CwgB,EAAMtgB,IAAI2C,GAAsB7C,IAAhC,MAAmD4C,EAAnD,CAAyDE,SAAU,KACnE+d,EAAKJ,UAAUI,EAAM,uBAGrBvZ,QAAQC,IAAI,uBAKpBD,QAAQC,IAAI,sBACL,KAGI4Z,GAAe,SAACX,GAA2B,IAApB9R,EAAmB,uDAAN,EAC/C,MAAO,CACLA,aACA0S,oBAAqB,SAACT,GAAgB,IAC9BE,EAA2BF,EAA3BE,KAAMD,EAAqBD,EAArBC,UAAW5S,EAAU2S,EAAV3S,MACvB4S,EAAUlS,YAAcV,EACpB4S,EAAUlS,YAAc,GAC1BmS,EAAKJ,UAAUI,EAAM,YAGzBQ,oBAAqB,SAACV,GAAgB,IAC9BC,EAAqBD,EAArBC,UAAW5S,EAAU2S,EAAV3S,MACjB4S,EAAUlS,YAAcV,GAE1BsT,QAAS,SAACX,GAAgB,IAClBE,EAA2BF,EAA3BE,KACFje,GAD6B+d,EAArBC,UAAqBD,EAAV3S,MACZwS,EAAMtgB,IAAI2C,GAAsBge,EAAKT,WAAWY,KAAKre,OAChE6d,EAAMtgB,IAAI2C,GAAsBge,EAAKT,WAAWY,KAAKre,MAAMG,SAAWF,EAAKE,SAAStB,OAAO,SAACuB,GAAD,OAAOA,EAAEC,KAAO6d,EAAK7d,QA+CzGkD,GAAW,SAACsa,GAAgE,IAAzDhd,EAAwD,uDAA5C,GAAI2C,EAAwC,uDAAhC,QAAS5C,EAAuB,wDACtF,MAAO,CACLC,YACA2C,QACA5C,aACAge,eAAgB,SAACZ,GAAgB,IACzBE,EAASF,EAATE,KACFA,EAAKT,WAAW1e,eAAe,SACjC8e,EAAMtgB,IAAI2C,GAAsBge,EAAKT,WAAWY,KAAKre,MAAMG,SAASpC,KAAKmgB,M,ujBCrHjF,IDLyBle,GAgFC6d,GCvDtBgB,GAAY,IAAIlhB,IAAcmhB,OAG9BjB,GAAQ,CACVkB,QAAQ,EACRF,aACAve,OALW,IAAI3C,IAAWkhB,IAM1BthB,IAAK,GACLka,QAAS,IAAI9Z,IAAY,CAAEga,SAAU,GAAIC,GAAI,SAC7C2G,UAAW,SAAChhB,EAAKyC,GACf,IAAIzC,EAAIwB,eAAemB,GAAsBF,IAM3C,OAAO,EALP,IAAIC,EAAO1C,EAAI2C,GAAsBF,IACrC,SHpCG,CACL,OAAU,CACRY,WAAY,OACZI,WAAY,OACZH,UAAW,IACXC,UAAU,IG+BYb,EAAKxC,MAAMqD,UAAmE,IAAvDZ,GAA6BD,EAAKE,UAAUtD,cAAzF,IASFmiB,GAAM,MACLpV,GAAoB,EAAG,SAAU,CAClCqV,UDhDqBjf,GCgDS,CAAEhD,EAAG,GAAIC,EAAG,ID/CrC,CACLiiB,WAAW,EACXC,QAAS,SAACnB,GAAgB,IAClBE,EAA6BF,EAA7BE,KAAMD,EAAuBD,EAAvBC,UAAW1Y,EAAYyY,EAAZzY,QACvBZ,QAAQC,IAAIW,EAASvF,GAAIhD,EAAGgD,GAAI/C,GAC3BghB,EAAUiB,YACbjB,EAAUiB,WAAY,EACtBhB,EAAKJ,UAAUE,EAAWoB,OAAQ,QAAS,UAAW,CAAE7Z,QAAS,OAAQ6Z,OAAQlB,QCyCrFG,KAAMgB,GAAgBxB,GAAO,CAAE7gB,EAAG,GAAIC,EAAG,KACzCsG,SAAU8b,GAAoBxB,GAAO,IAAK,SAAU,UAEpDA,KAIAyB,GAAG,MACF1V,GAAoB,EAAG,MAAO,CAC/ByU,KAAMgB,GAAgBxB,GAAO,CAAE7gB,EAAG,GAAIC,EAAG,KACzCsG,SAAU8b,GAAoBxB,GAAO,IAAK,SAC1CF,QAAS0B,KACTb,aAAca,GAAwBxB,KAEtCA,KAIA0B,GAAI,MACH3V,GAAoB,EAAG,MAAO,CAC/ByU,KAAMgB,GAAgBxB,GAAO,CAAE7gB,EAAG,GAAIC,EAAG,KACzCsG,SAAU8b,GAAoBxB,GAAO,IAAK,SAC1CF,QAAS0B,KACTb,aAAca,GAAwBxB,KAEtCA,KAIA2B,GAAI,MACH5V,GAAoB,EAAG,MAAO,CAC/ByU,KAAMgB,GAAgBxB,GAAO,CAAE7gB,EAAG,GAAIC,EAAG,KACzCsG,SAAU8b,GAAoBxB,GAAO,IAAK,SAC1CF,QAAS0B,KACTb,aAAca,GAAwBxB,KAEtCA,KAIA3N,GAAK,MACJtG,GAAoB,EAAG,QAAS,CACjCyU,KAAMgB,GAAgBxB,GAAO,CAAE7gB,EAAG,GAAIC,EAAG,KACzCsG,SAAU8b,GAAoBxB,GAAO,KAAM,SAC3CW,aAAca,GAAwBxB,IACtC/U,ODpBkB,WAAiB,IAAhBpF,EAAe,uDAAN,EAC9B,MAAO,CACLA,UCkBQ2b,GACRI,WDfsB5B,GCeUA,GDd3B,CACL6B,MAAO,SAAC1B,GAAgB,IAChBE,EAA+BF,EAA/BE,KAAiB1Z,GAAcwZ,EAAzBC,UAAyBD,EAAdxZ,WAOnBnH,EAAa6gB,EAAKT,WAAWY,KAAKre,IAClCqP,EAAU,CAAErS,EAAGK,EAAWL,EAAIwH,EAAUxH,EAAGC,EAAGI,EAAWJ,EAAIuH,EAAUvH,GACvE0iB,EAAW9B,GAAMtgB,IAAI2C,GAAsBmP,IAC/C,GAAIwO,GAAMU,UAAUV,GAAMtgB,IAAK8R,GAC7B6O,EAAKJ,UACHI,EAAM,OAAQ,CACZ7gB,WAAYA,EACZD,UAAWiS,IAGf6O,EAAKJ,UAAUI,EAAM,QAAS,CAAC1Z,kBAC1B,CACL,GAAIqZ,GAAMtgB,IAAIwB,eAAemB,GAAsBmP,IAAW,CAC5D,IAAIuQ,EAAsE1f,GAA6Byf,EAASxf,UF9DxGtB,OAAO,SAACuB,GAAD,OAAOA,EAAEqd,WAAW1e,eAAe,kBE+D9C6gB,EAAqC/iB,OAAS,GAChDqhB,EAAKJ,UAAU8B,EAAqC,GAAI,sBAAuB,CAAEvU,MAAO,IAG5F6S,EAAKJ,UAAUI,EAAM,sBAAuB,CAAE7S,MAAO,SCXzDwS,KCnFWgC,IDuFQrF,IAAMC,U,iLChGzB,OACE,yBAAKH,UAAU,uBACb,kBAAC,GAAD,W,GAJUE,IAAMC,YCOJqF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAAShH,SAASC,eAAe,SD2H3C,kBAAmBgH,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.693b2937.chunk.js","sourcesContent":["export const SCREENS = {\n  TITLE: 0,\n  LEVEL: 1,\n}","import * as ROT from 'rot-js';\n\nexport const delay = (timeDelayed = 100) => {\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport const getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const calculatePath = (game, targetPos, currentPos, topology = 4) => {\n  let map = game.map\n  let isPassable = function (x, y) {\n    if (map[x + \",\" + y]) {\n      return (map[x + \",\" + y].type === 'GROUND');\n    } else {\n      return false\n    }\n  }\n  let astar = new ROT.Path.AStar(targetPos.x, targetPos.y, isPassable, { topology });\n  let path = [];\n  astar.compute(currentPos.x, currentPos.y, function (x, y) {\n    path.push({ x, y })\n  });\n\n  return path.slice(1);\n}\n\nexport const calculatePathWithRange = (game, targetPos, currentPos, topology, range) => {\n  let path = calculatePath(game, targetPos, currentPos, topology);\n  return path.slice(0, range + 1);\n}\n\nexport const getRandomPos = (map) => {\n  let keys = Object.keys(map);\n  let key = getRandomInArray(keys).split(',');\n  let pos = { x: parseInt(key[0]), y: parseInt(key[1])}\n  return {coordinates: pos, text: key}\n}\n\nexport const getDestructableEntities = (entites) => {\n  return entites.filter((entity) => entity.hasOwnProperty('durability'));\n}\n\nconst getGranularity = (radius) => {\n  let result = (2 / 3) * (Math.pow(radius, 3) - (9 * Math.pow(radius, 2)) + (32 * radius) - 18)\n  return result\n}\n\nexport const getPointsOnCircumference = (centerX = 0, centerY = 0, r = 3) => {\n  const n = getGranularity(r);\n  let list = [];\n  for (let i = 0; i < n; i++) {\n    let x = Math.round(centerX + (Math.cos(2 * Math.PI / n * i) * r))\n    let y = Math.round(centerY + (Math.sin(2 * Math.PI / n * i) * r))\n    list.push({ x, y });\n  }\n  return list\n}\n","import * as Helper from '../../helper';\n\nexport const destroyEntity = (entity) => {\n  entity.energy = 0;\n  if (entity.pos) {\n    let tile = entity.game.map[Helper.coordsToString(entity.pos)];\n    entity.game.map[Helper.coordsToString(entity.pos)].entities = tile.entities.filter((e) => e.id !== entity.id);\n  }\n  entity.game.engine.actors = entity.game.engine.actors.filter((e) => e.id !== entity.id);\n  entity.game.engine.removeStatusEffectByActorId(entity.id);\n  entity.game.draw()\n  entity.game.engine.currentActor = entity.game.engine.currentActor % entity.game.engine.actors.length; \n\n}","import * as Helper from '../helper'\n\nexport const ENERGY_THRESHOLD = 100;\n\nexport const TILE_KEY = {\n  'GROUND': {\n    background: '#424242',\n    character: '',\n    passable: true,\n  },\n  'WALL': {\n    background: '#66625b',\n    character: '',\n    passable: false,\n  },\n  'WATER': {\n    animation: [\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#8aa', character: '▒', passable: false, },\n      { background: '#424242', foreground: '#8aa', character: '▓', passable: false, },\n    ],\n    background: '#9dc3d3',\n    character: '░',\n    passable: false,\n  },\n  'WIN': {\n    background: 'white',\n    foreground: 'black',\n    character: 'W',\n    passable: true,\n  }\n}\n\nexport const HAND_SIGNS = {\n  Power: {\n    type: 'Power',\n    name: 'Rin',\n    description: 'Strength of mind, body, spirit',\n  },\n  Energy: {\n    type: 'Energy',\n    name: 'Pyo',\n    description: 'energy direction',\n  },\n  Harmony: {\n    type: 'Harmony',\n    name: 'To',\n    description: 'one- ness with the universe or self',\n  },\n  Healing: {\n    type: 'Healing',\n    name: 'Sha',\n    description: 'of self and others',\n  },\n  Intuition: {\n    type: 'Intuition',\n    name: 'Kai',\n    description: 'premonition of danger, feeling others intent',\n  },\n  Awareness: {\n    type: 'Awareness',\n    name: 'Jin',\n    description: 'feeling thoughts of others, perhaps hiding your own',\n  },\n  Dimension: {\n    type: 'Dimension',\n    name: 'Retsu',\n    description: 'control of time and space',\n  },\n  Creation: {\n    type: 'Creation',\n    name: 'Zai',\n    description: 'understanding nature',\n  },\n  Absolute: {\n    type: 'Absolute',\n    name: 'Zen',\n    description: 'enlightenment',\n  }, \n}\n\nexport const DIRECTIONS = {\n  N: [0, -1],\n  S: [0, 1],\n  E: [1, 0],\n  W: [-1, 0],\n}\n\nexport const getDirectionKey = (direction) => {\n  let directionString = `${direction}`;\n  let keys = Object.keys(DIRECTIONS);\n  let result = false\n  keys.forEach((key) => {\n    if (`${DIRECTIONS[key]}` === directionString) {\n      result = key\n    }\n  })\n  return result\n}\n\nexport const EQUIPMENT_TYPES = {\n  HEAD: 'HEAD',\n  TORSO: 'TORSO',\n  BACK: 'BACK',\n  HAND: 'HAND',\n  FEET: 'FEET',\n}\n\nexport const EQUIPMENT_LAYOUTS = {\n  human: () => {\n    return [\n      {type: EQUIPMENT_TYPES.HEAD, name: 'head', item: null},\n      {type: EQUIPMENT_TYPES.TORSO, name: 'torso', item: null},\n      {type: EQUIPMENT_TYPES.BACK, name: 'back', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'left_hand', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'right_hand', item: null},\n      {type: EQUIPMENT_TYPES.FEET, name: 'feet', item: null},\n    ]\n  }\n}\n\nexport const CLONE_PATTERNS = {\n  verticalLine: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n    ]\n  },\n  smallSquare: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n    ]\n  },\n  square: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n    ]\n  },\n  bigSquare: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 2, y: 2, taken: false, },\n      { x: 2, y: 0, taken: false, },\n      { x: 2, y: -2, taken: false, },\n      { x: 0, y: -2, taken: false, },\n      { x: -2, y: -2, taken: false, },\n      { x: -2, y: 0, taken: false, },\n      { x: -2, y: 2, taken: false, },\n    ],\n  },\n  circle: {\n    x_offset: 0,\n    y_offset: 0,\n    positions: Helper.getPointsOnCircumference(0, 0, 2)\n  },\n}\n\nexport const PARTICLE_TEMPLATES = {\n  default: {\n    renderer: {\n      character: '*',\n      color: 'black',\n      background: 'white',\n    }\n  },\n  fail: {\n    renderer: {\n      character: 'x',\n      color: 'black',\n      background: 'red',\n    }\n  },\n  damage: {\n    renderer: {\n      character: '*',\n      color: 'darkred',\n      background: 'red',\n    }\n  },\n  leaf: {\n    renderer: {\n      character: '✤',\n      color: '#36635b',\n      background: '#F0D8C0',\n    }\n  },\n}\n\nexport const PARTICLE_TYPE = {\n  directional: 0,\n  path: 1,\n}\n\nexport const ALPHABET = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];","import * as Helper from '../helper';\nimport * as Action from './actions';\nimport * as Constant from './constants';\nimport { destroyEntity } from './Entities/helper';\nimport { cloneDeep } from 'lodash';\nimport uuid from 'uuid/v1';\nimport { Particle } from './entites';\n\nexport class Base {\n  constructor({\n    game, \n    actor, \n    energyCost = 100, \n    processDelay = 50, \n    particles = [], \n    particleTemplate = Constant.PARTICLE_TEMPLATES.default,\n  }) {\n    this.actor = actor\n    this.game = game\n    this.energyCost = energyCost\n    this.processDelay = processDelay\n    this.particles = particles\n    this.particleTemplate = particleTemplate\n  }\n\n  addParticle(\n    life, \n    pos, \n    direction, \n    renderer = {...this.particleTemplate.renderer}, \n    type = Constant.PARTICLE_TYPE.directional, \n    path = null\n  ) {\n    let particle = new Particle({\n      game: this.game,\n      name: 'particle',\n      passable: true,\n      life,\n      pos,\n      direction,\n      energy: 100,\n      renderer,\n      type,\n      path,\n    })\n    this.particles.push(particle);\n  }\n\n  removeDeadParticles() {\n    this.particles = this.particles.filter((particle) => particle.life > 0);\n  }\n\n\n  perform() {\n    console.log(`${this.actor.name} performs`)\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n}\n\nexport class AddStatusEffect extends Base {\n  constructor({ effect, processDelay = 0, ...args }) {\n    super({ ...args });\n    this.effect = effect\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = this.game.engine.addStatusEffect(this.effect);\n    let positions = Helper.getPointsOnCircumference(this.actor.pos.x, this.actor.pos.y, 2);\n    positions.forEach((pos) => {\n      this.addParticle(\n        5, \n        {...pos}, \n        {\n          x: Math.sign(pos.x - this.actor.pos.x), \n          y: Math.sign(pos.y - this.actor.pos.y)\n        },\n      )\n    })\n    if (success) this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Say extends Base {\n  constructor({ message, processDelay = 50, ...args}) {\n    super({...args});\n    this.message = message\n    this.processDelay = processDelay\n  }\n  perform() {\n    console.log(`${this.actor.name} says ${this.message}`);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SayManyThings extends Base {\n  constructor({ messages, processDelay = 50, ...args}) {\n    super({...args});\n    this.messages = messages\n    this.processDelay = processDelay\n  }\n  perform() {\n    let message = this.messages.shift();\n    if (message) {\n      console.log(`${this.actor.name} says ${message}`);\n      this.actor.energy -= this.energyCost;\n    }\n    if (this.messages.length) {\n      this.actor.setNextAction(this);\n    }\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class EquipItemFromContainer extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.actor.addToContainer(itemInSlot);\n        this.actor.unequip(itemInSlot);\n      }\n      this.actor.removeFromContainer(this.item);\n      this.actor.equip(this.item.equipmentType, this.item);\n      console.log(`${this.actor.name} equips ${this.item.name}.`);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class EquipItemFromTile extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(itemInSlot);\n      }\n\n      let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n      this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n      \n      this.actor.equip(this.item);\n      console.log(`${this.actor.name} equips ${this.item.name}.`);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class UnequipItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    console.log(`${this.actor.name} puts ${this.item.name} away.`);\n    this.actor.unequip(this.item);\n    this.actor.addToContainer(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DropItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    console.log(`${this.actor.name} drops ${this.item.name}.`);\n    this.actor.removeFromContainer(this.item);\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class PickupItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    console.log(`${this.actor.name} picks up ${this.item.name}.`);\n    this.actor.addToContainer(this.item);\n    let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DestroySelf extends Base {\n  constructor({processDelay = 0, ...args}) {\n    super({...args});\n    this.processDelay = processDelay\n  }\n  perform() {\n    // console.log(`${this.actor.name} is self-destructing`);\n    this.actor.energy -= this.energyCost;\n    this.actor.destroy();\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class CloneSelf extends Base {\n  constructor({cloneArgs = [], ...args}) {\n    super({...args});\n    this.cloneArgs = cloneArgs;\n  }\n\n  perform() {\n    let success = false;\n    if (this.actor.createClone(this.cloneArgs)) {\n      success = true;\n      this.actor.energy -= this.energyCost;\n      console.log(`${this.actor.name} is cloning itself`);\n    }\n    // let clone = cloneDeep(this.actor);\n    // clone.game = this.actor.game;\n    // clone.id = uuid();\n    // this.cloneArgs.forEach((arg) => {\n    //   console.log(arg);\n      \n    //   clone[arg.attribute] = arg.value\n    // });\n    // if (this.game.placeActorOnMap(clone)) {\n    //   this.game.engine.addActorAsNext(clone);\n    //   this.game.draw();\n    //   success = true;\n    // };\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Charge extends Base {\n  constructor({chargeAmount, ...args}) {\n    super({...args});\n    this.chargeAmount = chargeAmount;\n  }\n  perform() {\n    console.log(`${this.actor.name} is charging up!`);\n    this.actor.energy -= this.energyCost;\n    this.actor.increaseCharge(this.chargeAmount);\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class Release extends Base {\n  constructor({ chargeCost, ...args }) {\n    super({ ...args });\n    this.chargeCost = chargeCost;\n  }\n  perform() {\n    let success = false;\n    if (this.actor.charge >= this.chargeCost) {\n      console.log(`${this.actor.name} is releasing ${this.chargeCost} volts!`);\n      this.actor.energy -= this.energyCost;\n      this.actor.decreaseCharge(this.chargeCost);\n      success = true;\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Sign extends Base {\n  constructor({ sign, ...args }) {\n    super({ ...args });\n    this.sign = sign;\n  }\n  perform() {\n    console.log(`${this.actor.name} threw a ${this.sign.name} sign.`);\n    this.actor.addSign(this.sign);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SignRelease extends Base {\n  constructor({requiredSequence = [], ...args}) {\n    super({...args});\n    this.requiredSequence = requiredSequence;\n  }\n\n  requiredSequenceIsFulfilled () {\n    let signHistory = this.actor.signHistory.concat();\n    let relevantHistory = signHistory.slice(\n      Math.max(signHistory.length - this.requiredSequence.length, 0)\n    )\n    let result = JSON.stringify(relevantHistory) === JSON.stringify(this.requiredSequence);\n    return result\n  }\n\n  perform() {\n    let success = false;\n    if (this.requiredSequenceIsFulfilled()) {\n      console.log(\n        `${this.actor.name} is releasing the power of ${this.requiredSequence.map(\n          (sign) => sign.type\n        ).join(' and ')}!`\n      );\n      this.actor.energy -= this.energyCost;\n      success = true;\n      this.actor.clearSigns();\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class CursorMove extends Base {\n  constructor({ targetPos, processDelay = 0, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    if (this.game.cursorCanOccupyPosition(this.targetPos)) {\n      let tile = this.game.map[Helper.coordsToString(this.actor.pos)]\n      this.game.map[Helper.coordsToString(this.actor.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.actor.id) }\n      this.actor.pos = this.targetPos\n      this.game.map[Helper.coordsToString(this.targetPos)].entities.push(this.actor);\n      success = true;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ParticleMove extends CursorMove {\n  constructor({...args}) {\n    super({...args})\n  }\n\n  perform () {\n    this.actor.energy -= this.energyCost;\n    if (this.actor.energy <= 0) {\n      this.actor.destroy();\n      return { success: false }\n    } \n    return super.perform();\n  }\n}\n\nexport class PlaceActor extends Base {\n  constructor({ targetPos, entity, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.entity = entity\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (this.game.canOccupyPosition(this.targetPos, this.entity)) {\n      this.entity.pos = this.targetPos;\n      // this.game.engine.actors.push(this.entity);\n      this.game.engine.addActorAsNext(this.entity);\n      success = true;\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItem extends Base {\n  constructor({ targetPos, entity, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.entity = entity\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (this.game.canOccupyPosition(this.targetPos, this.entity)) {\n      this.entity.pos = this.targetPos;\n      success = this.game.placeActorOnMap(this.entity)\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItems extends PlaceItem {\n  constructor({targetPositions = [], ...args}) {\n    super({...args});\n    this.targetPositions = targetPositions\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    console.log('actor ', this.actor.pos);\n    this.targetPositions.forEach((targetPos) => {\n      console.log('target ', targetPos);\n      \n      if (this.game.canOccupyPosition(targetPos, this.entity)) {\n        let clone = cloneDeep(this.entity);\n        clone.game = this.game;\n        clone.id = uuid();\n        clone.pos = targetPos;\n        let placementSuccess = this.game.placeActorOnMap(clone);\n        if (placementSuccess) success = true;\n      }\n    });\n\n    if (success) this.actor.energy -= this.energyCost;\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Move extends Base {\n  constructor({ targetPos, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class MoveMultiple extends Base {\n  constructor({ direction, stepCount, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.move(targetPos)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Shove extends Base {\n  constructor({ targetPos, direction, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos\n    this.direction = direction\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.shove(this.targetPos, this.direction)\n    \n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Tackle extends MoveMultiple {\n  constructor({ direction, stepCount, additionalAttackDamage = 0, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.additionalAttackDamage = additionalAttackDamage;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.shove(targetPos, this.direction)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      for (let i = 0; i < 3; i++) {\n        this.addParticle(\n          1,\n          {\n            x: this.actor.pos.x - (this.direction[0] * i),\n            y: this.actor.pos.y - (this.direction[1] * i),\n          },\n          { x: 0, y: 0 }\n        )\n      }\n      success = true;\n    } else {\n      success = true;\n      this.actor.attack(targetPos, this.additionalAttackDamage);\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Attack extends Base {\n  constructor({ targetPos, processDelay = 100, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.particleTemplate = Constant.PARTICLE_TEMPLATES.damage\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) { \n      return { \n        success: true, \n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      } \n    }\n    \n    success = this.actor.attack(this.targetPos);\n    if (success) {\n      this.addParticle(1, {...this.targetPos}, {x: 0, y:0})\n      this.actor.energy -= this.energyCost;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class MultiTargetAttack extends Base {\n  constructor({ targetPositions, processDelay = 25, ...args }) {\n    super({ ...args });\n    this.targetPositions = targetPositions\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) {\n      return {\n        success: true,\n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      }\n    }\n\n    let particlePath = [];\n    let particlePos = { x: this.actor.pos.x, y: this.actor.pos.y };\n    let renderer = this.particleTemplate.renderer;\n    this.targetPositions.forEach((targetPos) => {\n      let attackSuccess = this.actor.attack(targetPos);\n      particlePath.push(targetPos);\n      if (attackSuccess) success = true\n    })\n    this.addParticle(\n      particlePath.length + 1, \n      particlePos, \n      null, \n      renderer, \n      Constant.PARTICLE_TYPE.path, \n      particlePath\n    )\n    \n    if (success) { \n      this.actor.energy -= this.energyCost; \n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ThrowProjectile extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    }\n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      let attackSuccess = this.actor.attack(this.targetPos);\n      if (attackSuccess) {\n        alternative = new Action.DestroySelf({\n          game: this.game,\n          actor: this.actor,\n          energyCost: Constant.ENERGY_THRESHOLD,\n          processDelay: 0,\n        });\n      }\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class ThrowProjectileGas extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n    this.processDelay = 0\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    } \n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      this.actor.attack(this.targetPos)\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class CrankEngine extends Base {\n  constructor({ engine, ...args }) {\n    super({ ...args });\n    this.engine = engine;\n  }\n  async perform() {\n    let success = true;\n    let alternative = null;\n\n    console.log(`${this.actor.name} is cranking its engine.`);\n    try {\n      await this.engine.start();\n      this.actor.energy -= this.energyCost;\n    } catch (error) {\n      console.log('CrankEngine');\n      console.log(error);\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n      });\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n","import uuid from 'uuid/v1';\nimport pipe from 'lodash/fp/pipe';\nimport * as Helper from '../helper';\nimport { destroyEntity } from './Entities/helper';\nimport * as Constant from './constants';\nimport * as Action from './actions';\nimport * as Engine from './engine';\nimport { cloneDeep, cloneDeepWith } from 'lodash';\n\nexport class Entity {\n  constructor({ game = null, passable = false}) {\n    let id = uuid();\n    this.entityTypes = ['Entity']\n    this.id = id;\n    this.game = game;\n    this.passable = passable;\n  }\n}\n\nconst Parent = superclass => class extends superclass {\n  constructor({ children = [], engine = new Engine.CrankEngine({}), ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('PARENT');\n    this.children = children;\n    this.engine = engine;\n    this.isInitialized = false;\n  }\n\n  destroyChild(child) {\n    child.energy = 0;\n    let tile = this.game.map[Helper.coordsToString(child.pos)];\n    this.game.map[Helper.coordsToString(child.pos)].entities = tile.entities.filter((e) => e.id !== child.id);\n    this.engine.actors = this.engine.actors.filter((e) => e.id !== child.id);\n    this.game.draw()\n  }\n\n  canAttack (entity) {\n    const childIds = this.children.map((child) => child.id); \n    return !childIds.includes(entity.id)\n  }\n  \n  initialize() {\n    this.isInitialized = true;\n    this.engine.game = this.game;\n    this.engine.actors = this.children;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this.game;\n      actor.destroy = () => {this.destroyChild(actor)};\n      actor.canAttack = this.canAttack.bind(this);\n      // actor.canAttack = (entity) => {this.canAttack(entity)};\n      this.game.placeActorOnMap(actor)\n      this.engine.addActor(actor);\n      this.game.draw();\n    });\n  }\n\n  getAction(game) {\n    // crank engine one turn\n    if (!this.isInitialized) {\n      this.initialize()\n    }\n\n    let result = new Action.CrankEngine({\n      game,\n      actor: this,\n      engine: this.engine,\n      energyCost: Constant.ENERGY_THRESHOLD,\n      processDelay: 10\n    });\n\n    return result;\n  }\n\n}\n\nconst HasInnerGates = superclass => class extends superclass {\n  constructor({ currentGate = null, gates = [], ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('HAS_INNER_GATES');\n    this.currentGate = currentGate;\n    this.gates = [\n      {\n        name: 'Gate of Opening',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n      },\n      {\n        name: 'Gate of Healing',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n      },\n      {\n        name: 'Gate of Life',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n      },\n      {\n        name: 'Gate of Pain',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n      },\n      {\n        name: 'Gate of Limit',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n      },\n    ];\n  }\n\n  setNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n      this.currentGate = { ...nextGate };\n    } else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      console.log('next gate index ', nextGateIndex);\n\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n        this.currentGate = { ...nextGate };\n      }\n    }\n    return nextGate;\n  }\n\n  getNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n    } else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      console.log('next gate index ', nextGateIndex);\n\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n      }\n    }\n    return nextGate;\n  }\n}\n\nconst UI = superclass => class extends superclass {\n  constructor({ initiatedBy = null, ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('UI');\n    this.initiatedBy = initiatedBy;\n    this.active = true;\n  }\n\n  hasEnoughEnergy() {\n    return this.active;\n  }\n}\n\nexport const Attacking = superclass => class extends superclass {\n  constructor({attackDamage = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('ATTACKING')\n    this.attackDamage = attackDamage;\n  }\n\n  getAttackDamage (additional = 0) {\n    return this.attackDamage + additional;\n  }\n\n  canAttack (entity) {\n    return true;\n  }\n\n  attack (targetPos, additional = 0) {\n    let success = false;\n    let tile = this.game.map[Helper.coordsToString(targetPos)]\n    if (!tile) { return success }\n    let targets = Helper.getDestructableEntities(tile.entities);\n    if (targets.length > 0) {\n      let target = targets[0];\n      if (this.canAttack(target)) {\n        let damage = this.getAttackDamage(additional);\n        if (this.entityTypes.includes('EQUIPING')) {\n          this.equipment.forEach((slot) => {\n            if (slot.item) {\n              if (slot.item.entityTypes.includes('ATTACKING')) {\n                damage += slot.item.getAttackDamage();\n              }\n            }\n          });\n        }\n        console.log(`${this.name} does ${damage} to ${target.name}`);\n        target.decreaseDurability(damage);\n        success = true;\n      }\n    }\n\n    return success;\n  }\n}\n\nexport const Equipable = superclass => class extends superclass {\n  constructor({name = 'nameless', equipmentType = Constant.EQUIPMENT_TYPES.HAND, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('EQUIPABLE')\n    this.name = name;\n    this.equipmentType = equipmentType;\n  }\n}\n\nconst Acting = superclass => class extends superclass {\n  constructor({name, actions = [], speed = 100, energy = 0, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('ACTING')\n    this.name = name;\n    this.actions = actions;\n    this.speed = speed;\n    this.energy = speed;\n  }\n\n  getAction() {\n    let action = Helper.getRandomInArray(this.actions)\n    if (action) { return action }\n  }\n\n  gainEnergy(value = this.speed) {\n    this.energy += value;\n  }\n\n  hasEnoughEnergy() {\n    return this.energy > 0;\n  }\n}\n\nconst Rendering = superclass => class extends superclass {\n  constructor({pos = {x: 0, y: 0}, renderer, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('RENDERING')\n    this.pos = pos;\n    this.renderer = {...renderer};\n  }\n\n  getPosition () {\n    return this.pos;\n  }\n\n  move (targetPos) {\n    let success = false;\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      let tile = this.game.map[Helper.coordsToString(this.pos)]\n      this.game.map[Helper.coordsToString(this.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.id) }\n      this.pos = targetPos\n      this.game.map[Helper.coordsToString(targetPos)].entities.push(this);\n      success = true;\n    }\n    return success;\n  }\n\n  shove (targetPos, direction) {\n    let success = false;\n    let targetTile = this.game.map[Helper.coordsToString(targetPos)];\n    if (targetTile) {\n      targetTile.entities.map((entity) => { \n        if (!entity.passable) {\n          let newX = entity.pos.x + direction[0];\n          let newY = entity.pos.y + direction[1];\n          let newPos = { x: newX, y: newY };\n          entity.move(newPos);\n        }\n      });\n    }\n    success = this.move(targetPos);\n    return success;\n  }\n}\n\nconst Containing = superclass => class extends superclass {\n  constructor({container = [], ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CONTAINING')\n    this.container = container;\n  }\n\n  contains (itemType) {\n    let container = this.container;\n    let items = container.filter((item) => item.name === itemType);\n    return items.length > 0 ? items[0] : false;\n  }\n\n  addToContainer (item) {\n    this.container.push(item);\n  }\n  \n  removeFromContainer (item) {\n    this.container = this.container.filter((it) => it.id !== item.id);\n  }\n}\n\nconst Equiping = superclass => class extends superclass {\n  constructor({equipment = Constant.EQUIPMENT_LAYOUTS.human(), ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('EQUIPING')\n    this.equipment = equipment;\n  }\n\n  getItemInSlot (slotName) {\n    let openSlots = this.equipment.filter((slot) => {\n      return (slot.item === null && slot.type === slotName)\n    })\n    if (openSlots.length > 0) { return false; }\n    let slot = this.equipment.find((slot) => slot.type === slotName);\n    if (!slot) { return false; }\n    if (!slot.item) { return false; }\n    return slot.item;\n  }\n\n  equip (slotName, item) {\n    let foundSlot = false;\n    this.equipment = this.equipment.map((slot) => {\n      if (!foundSlot && slot.type === slotName && slot.item === null) {\n        slot.item = item;\n        foundSlot = true;\n      }\n      return slot;\n    })\n  }\n  \n  unequip(item) {\n    this.equipment = this.equipment.map((slot) => {\n      if (slot.item) {\n        if (slot.item.id === item.id) {\n          slot.item = null;\n        }\n      }\n      return slot;\n    })\n  }\n}\n\nconst Charging = superclass => class extends superclass {\n  constructor({charge = 10, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHARGING')\n    this.charge = charge;\n    this.chargeMax = charge;\n  }\n\n  decreaseCharge(value) {\n    this.charge = Math.max(0, this.charge - value);\n  }\n  \n  increaseCharge(value) {\n    this.charge = Math.min(this.chargeMax, this.charge + value);\n  }\n}\n\nconst Signing = superclass => class extends superclass {\n  constructor({...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('SIGNING')\n    this.signHistory = [];\n  }\n\n  addSign(sign) {\n    if (this.signHistory.length >= 4) {\n      this.signHistory.shift();\n    }\n    this.signHistory.push(sign);\n  }\n  \n  clearSigns() {\n    this.signHistory = [];\n  }\n}\n\nconst Playing = superclass => class extends superclass {\n  constructor({keymap = {}, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PLAYING')\n    this.nextAction = null;\n    this.keymap = keymap;\n  }\n\n    setNextAction(action) {\n      this.nextAction = action;\n    }\n\n    getAction() {\n      let action = this.nextAction;\n      this.nextAction = null;\n      return action;\n    }\n}\n\nconst Cloning = superclass => class extends superclass {\n  constructor({cloneLimit = 1, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CLONING')\n    this.cloneLimit = cloneLimit;\n    this.clones = [];\n  }\n  \n  // perhaps clones should have a status effect that leeches parent actor's energy or chakra\n  \n  // status effects should be removed from engine when owner is removed.\n  \n  destroy() {\n    // add function to override self destroy funtion \n    // if this actor dies, clones should be destroyed as well\n    if (this.clones) {\n      this.clones.map((clone) => {\n        destroyEntity(clone)\n      });\n    }\n    destroyEntity(this);\n  }\n\n  destroyClone (id) {\n  // overrides clone destroy function\n  // when clone is destroyed, clone count will change accordingly\n    const index = this.clones.findIndex((c) => c.id == id);\n    if (index >= 0) {\n      this.clones[index].super__destroy();\n      this.clones.splice(index, 1);\n    }\n  }\n\n  createClone (cloneArgs) {\n    if (this.clones.length < this.cloneLimit) {\n      let clone = cloneDeep(this);\n      clone.name += ` Clone ${this.clones.length}`\n      clone.game = this.game;\n      clone.id = uuid();\n      delete clone.clones;\n      clone['super__destroy'] = clone.destroy;\n      clone.destroy = () => { this.destroyClone(clone.id) };\n      cloneArgs.forEach((arg) => {\n        clone[arg.attribute] = arg.value\n      });\n      if (this.game.placeActorOnMap(clone)) {\n        this.game.engine.addActorAsNext(clone);\n        this.game.draw();\n        this.clones.push(clone);\n        return true;\n      };\n    }\n    return false;\n  }\n}\n\nconst Projecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      this.path.shift();\n    }\n    return result;\n  }\n}\n\nconst DestructiveProjecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectile({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst GaseousDestructiveProjecting = superclass => class extends superclass {\n  constructor({owner_id = null, path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS_DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n    this.owner_id = owner_id;\n  }\n\n  canAttack (entity) {\n    let success = super.canAttack();\n    if (success) {\n      success = this.owner_id === null || (entity.owner_id !== this.owner_id);\n    }\n    return success\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectileGas({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst Gaseous = superclass => class extends superclass {\n  constructor({\n    isClone = false,\n    cloneCount = 0,\n    clonePattern = Constant.CLONE_PATTERNS.square,\n    ...args\n  }) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS')\n    this.isClone = isClone;\n    this.cloneCount = cloneCount;\n    this.clonePattern = cloneDeep(clonePattern);\n  }\n\n  getAction (game) {\n    let offset = this.clonePattern.positions.find((pos) => !pos.taken);\n    if (!this.isClone && offset) {\n      offset.taken = true\n      let clone = cloneDeepWith(this, (value, key) => {\n        switch (key) {\n          case 'id':\n          case 'game':\n          case 'engine':\n          case 'clones':\n            return null\n            break;\n          default:\n            return undefined\n            break;\n        }\n      });\n      clone.game = game;\n      clone.id = uuid();\n      if (this.hasOwnProperty('pos')) {\n        let referencePos = this.pos\n        clone.pos = {\n          x: referencePos.x + offset.x,\n          y: referencePos.y + offset.y\n        }\n      }\n      if (clone.hasOwnProperty('path')) {\n        clone.path = clone.path.map((pos) => {\n          return {\n            x: pos.x + offset.x,\n            y: pos.y + offset.y\n          }\n        })\n      }\n      clone.isClone = true\n      this.cloneCount += 1\n      game.placeActorOnMap(clone)\n      game.engine.addActor(clone);\n      game.draw();\n    }\n\n    let result = super.getAction(game);\n    return result;\n  }\n}\n\nconst Chasing = superclass => class extends superclass {\n  constructor({targetEntity = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHASING')\n    this.targetEntity = targetEntity;\n  }\n\n  getAction(game) {\n    let path = Helper.calculatePath(game, this.targetEntity.pos, this.pos);\n    let targetPos = path.length > 0 ? path[0] : this.pos;\n\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    return result;\n  }\n}\n\nconst Pushing = superclass => class extends superclass {\n  constructor({ path = false, targetPos = null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('PUSHING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath(game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let direction = [\n      targetPos.x - this.pos.x ,\n      targetPos.y - this.pos.y ,\n    ]\n    if (direction[0] === 0 && direction[1] === 0) {\n      return new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    let result = new Action.Shove({\n      targetPos,\n      direction,\n      game,\n      actor: this,\n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    this.path.shift();\n\n    return result;\n  }\n}\n\nconst Destructable = superclass => class extends superclass {\n  constructor({durability = 1, defense = 0 ,onDestroy = () => null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DESTRUCTABLE')\n    this.durability = durability;\n    this.defense = defense;\n    this.onDestroy = onDestroy;\n  }\n\n  getDefense () {\n    // add in reducer to get defense stats of all equpiment\n    return this.defense;\n  }\n\n  decreaseDurability (value) {\n    const current = this.durability;\n    const newDurability = current - (value - this.getDefense());\n    this.durability = Math.min(current, newDurability);\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n\n  increaseDurability (value) {\n    this.durability += value\n  }\n\n  destroy () {\n    this.onDestroy();\n    destroyEntity(this);\n  }\n}\n\nconst IsParticle = superclass => class extends superclass {\n  constructor({\n    pos = { x: 1, y: 1 },\n    direction = { x: 0, y: 0 },\n    life = 1,\n    speed = 1,\n    type = Constant.PARTICLE_TYPE.directional,\n    path = null,\n    ...args\n  }) {\n    super({ ...args })\n    this.pos = pos;\n    this.direction = direction;\n    this.life = life;\n    this.speed = speed;\n    this.type = type;\n    this.path = path;\n    this.entityTypes = this.entityTypes.concat('PARTICLE')\n  }\n\n  getNextPos(step) {\n    switch (this.type) {\n      case Constant.PARTICLE_TYPE.directional:\n        return {\n          x: this.pos.x + (this.direction.x * this.speed) * step,\n          y: this.pos.y + (this.direction.y * this.speed) * step,\n        }\n      case Constant.PARTICLE_TYPE.path:\n        const nextPos = this.path.shift();\n        return nextPos ? {...nextPos} : {...this.pos}\n    }\n  }\n\n  update(step) {\n    this.life -= step;\n    if (this.life > 0) {\n      this.pos = this.getNextPos(step);\n    }\n  }\n}\n\nexport const UI_Actor = pipe(\n  Acting, \n  Rendering, \n  Playing, \n  UI\n)(Entity);\n\nexport const Actor = pipe(\n  Acting, \n  Rendering\n)(Entity);\n\nexport const Wall = pipe(\n  Rendering,\n  Destructable,\n)(Entity);\n\nexport const MovingWall = pipe(\n  Acting,\n  Rendering,\n  Pushing,\n  Destructable,\n)(Entity);\n\nexport const Chaser = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable\n)(Entity);\n\nexport const Bandit = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable,\n  Attacking,\n)(Entity);\n\nexport const Player = pipe(\n  Acting, \n  Rendering, \n  Charging, \n  Signing, \n  Containing, \n  Equiping, \n  Attacking, \n  HasInnerGates,\n  Destructable, \n  Cloning,\n  Playing,\n)(Entity);\n\nexport const Weapon = pipe(\n  Rendering, \n  Equipable, \n  Attacking\n)(Entity);\n\nexport const DestructiveProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  DestructiveProjecting, \n  Destructable\n)(Entity);\n\nexport const DestructiveCloudProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  GaseousDestructiveProjecting, \n  Destructable, \n  Gaseous\n)(Entity);\n\nexport const DestructiveCloudProjectileV2 = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);\n\nexport const Particle = pipe(\n  Acting,\n  Rendering,\n  IsParticle,\n)(Entity);\n\nexport const ParticleEmitter = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);","import * as Entity from './entites';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\n\nexport const TYPE = {\n  KUNAI: 'Kunai',\n  SWORD: 'Sword',\n  BARRIER: 'Barrier',\n}\n\nconst createProjectileCloud = ({ \n  engine, \n  actor, \n  targetPos, \n  throwDirection,\n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: actor.pos.x + slot.x + (throwDirection.x * structure.x_offset),\n      y: actor.pos.y + slot.y + (throwDirection.y * structure.y_offset)\n    }\n    \n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileSingularity = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + slot.x + structure.x_offset,\n      y: targetPos.y + slot.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x,\n      y: targetPos.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileBurst = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + structure.x_offset,\n      y: targetPos.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nexport const sandTomb = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileSingularity({\n  engine,\n  actor,\n  targetPos,\n  speed: 100,\n  structureType: 'circle',\n  createProjectile: sandShuriken,\n})\n\nexport const sandBurst = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileBurst({\n  engine,\n  actor,\n  targetPos,\n  speed: 500,\n  structureType: 'circle',\n  createProjectile: sandShuriken,\n})\n\nexport const sandWallPulse = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'smallSquare',\n  createProjectile: movingSandWall,\n})\n\nexport const kunaiCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: kunai,\n})\n\nexport const fireballCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: fireball,\n})\n\nexport const kunai = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '🗡️',\n    color: 'white',\n    background: '',\n  },\n  name: TYPE.KUNAI,\n  speed: 600,\n  energy: 0,\n  range: 30,\n})\n\nexport const movingSandWall = (engine, pos, targetPos) => new Entity.MovingWall({\n  game: engine.game,\n  passable: false,\n  pos: { x: pos.x, y: pos.y },\n  targetPos,\n  renderer: {\n    // character: '>',\n    character: ']',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  // name: TYPE.KUNAI,\n  name: TYPE.BARRIER,\n  durability: 3,\n})\n\nexport const sandShuriken = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.KUNAI,\n  speed: 600,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireball = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '🔥',\n    color: 'wheat',\n    background: 'tomato',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireballGas = (engine, actor, targetPos) => {\n  return new Entity.DestructiveCloudProjectile({\n    game: engine.game,\n    owner_id: actor ? actor.id : null,\n    targetPos,\n    passable: true,\n    pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n    renderer: {\n      // character: '@',\n      character: '🔥',\n      color: 'wheat',\n      background: 'tomato',\n    },\n    name: TYPE.KUNAI,\n    speed: 100,\n    range: 10,\n    clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n    // clonePattern: Constant.CLONE_PATTERNS.square,\n  })\n}\n\nexport const waterball = (engine, actor, targetPos) => new Entity.DestructiveCloudProjectile({\n  game: engine.game,\n  owner_id: actor ? actor.id : null,\n  targetPos,\n  passable: true,\n  pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n  renderer: {\n    // character: '~',\n    character: '🌊',\n    color: 'silver',\n    background: 'lightslategrey',\n  },\n  name: TYPE.KUNAI,\n  speed: 800,\n  range: 10,\n  clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n  // clonePattern: Constant.CLONE_PATTERNS.square,\n})\n\nexport const sword = (engine) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: '',\n  },\n})\n\nexport const test = (engine, pos) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  pos,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: 'lightsteelblue',\n  },\n})\n","import { ALPHABET } from '../constants';\n\nexport const addAlphabeticallyToKeymap = (keymap, obj) => {\n  let alphabetAllowed = ALPHABET.filter((letter) => {\n    return !Object.keys(keymap).includes(letter);\n  });\n  keymap[alphabetAllowed[0]] = obj;\n}\n\nexport const deactivateUIKeymap = (engine, visibleUIKey) => {\n  let currentUiActor = engine.actors[engine.currentActor];\n  engine.game.removeActor(currentUiActor);\n  engine.game[visibleUIKey] = null;\n}","import * as Constant from '../../constants';\nimport { UI_Actor } from '../../entites';\nimport { DropItem } from '../../actions';\nimport { addAlphabeticallyToKeymap, deactivateUIKeymap } from '../helper';\n\nconst keymapDropFromInventory = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      // g: {\n      activate: () => deactivateUIKeymap(engine, 'visibleInventory'),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.container.map((item, index) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to drop ${item.name}`);\n      initiatedBy.setNextAction(new DropItem({\n        item,\n        game: engine.game,\n        actor: initiatedBy,\n        energyCost: Constant.ENERGY_THRESHOLD\n      }));\n      deactivateUIKeymap(engine, 'visibleInventory');\n    }\n    obj['label'] = `Drop ${item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const activateDropItem = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleInventory = currentActor.container;\n\n  let ui = new UI_Actor({\n    initiatedBy: currentActor,\n    pos: { ...currentActor.pos },\n    renderer: {\n      character: 'D',\n      color: 'white',\n      background: '',\n    },\n    name: 'Drop',\n    game: engine.game,\n  })\n  engine.addActorAsPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapDropFromInventory(engine, currentActor);\n}","import { UI_Actor } from '../../entites';\nimport { UnequipItem } from '../../actions';\nimport { addAlphabeticallyToKeymap, deactivateUIKeymap } from '../helper';\n\nconst keymapEquipment = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      activate: () => deactivateUIKeymap(engine, 'visibleEquipment'),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.equipment.filter((slot) => slot.item).map((slot) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to unequip ${slot.item.name}`);\n      initiatedBy.setNextAction(new UnequipItem({\n        item: slot.item,\n        game: engine.game,\n        actor: initiatedBy,\n      }))\n      deactivateUIKeymap(engine, 'visibleEquipment');\n    }\n    obj['label'] = `Unequip ${slot.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const activateEquipment = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleEquipment = currentActor.equipment;\n\n  let ui = new UI_Actor({\n    initiatedBy: currentActor,\n    pos: { ...currentActor.pos },\n    renderer: {\n      character: 'E',\n      color: 'white',\n      background: '',\n    },\n    name: 'Equipment',\n    game: engine.game,\n  })\n  engine.addActorAsPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapEquipment(engine, currentActor);\n}","import { UI_Actor } from '../../entites';\nimport { EquipItemFromContainer } from '../../actions';\nimport { addAlphabeticallyToKeymap, deactivateUIKeymap } from '../helper';\n\nconst keymapEquipFromInventory = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      activate: () => deactivateUIKeymap(engine, 'visibleInventory'),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.container.map((item, index) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to equip ${item.name}`);\n      initiatedBy.setNextAction(new EquipItemFromContainer({\n        item,\n        game: engine.game,\n        actor: initiatedBy,\n      }))\n      deactivateUIKeymap(engine, 'visibleInventory');\n    }\n    obj['label'] = `Equip ${item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const activateInventory = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleInventory = currentActor.container;\n\n  let ui = new UI_Actor({\n    initiatedBy: currentActor,\n    pos: { ...currentActor.pos },\n    renderer: {\n      character: 'I',\n      color: 'white',\n      background: '',\n    },\n    name: 'Inventory',\n    game: engine.game,\n    // keymap: keymapEquipFromInventory(engine, currentActor),\n  })\n  engine.addActorAsPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapEquipFromInventory(engine, currentActor);\n}","import { CursorMove } from '../../actions';\n\nexport const moveCursor = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new CursorMove({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: 0,\n  }))\n}","import * as Action from '../../actions';\nimport * as Item from '../../items';\nimport * as Constant from '../../constants';\nimport { UI_Actor } from '../../entites';\nimport { moveCursor } from './moveCursor';\n\nconst throwKunai = (engine, actor) => {\n  let cursor = engine.actors[engine.currentActor];\n  cursor.active = false;\n  let throwDirection = {\n    x: Math.sign(cursor.pos.x - actor.pos.x),\n    y: Math.sign(cursor.pos.y - actor.pos.y),\n  }\n  engine.game.removeActor(cursor);\n  let kunai = actor.contains(Item.TYPE.KUNAI);\n  if (kunai) {\n    kunai.game = engine.game;\n    kunai.pos = {\n      x: actor.pos.x + throwDirection.x,\n      y: actor.pos.y + throwDirection.y,\n    };\n    kunai.targetPos = { ...cursor.pos };\n    actor.removeFromContainer(kunai);\n    engine.addActorAsPrevious(kunai);\n    engine.setActorToPrevious(kunai);\n    // engine.actors.push(kunai);\n    kunai.createPath(engine.game);\n    engine.game.placeActorsOnMap();\n    engine.game.draw();\n    actor.setNextAction(\n      new Action.Say({\n        message: `I'll get you with this kunai!`,\n        game: engine.game,\n        actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    )\n  } else {\n    console.log('I have no kunais left');\n  }\n}\n\nconst throwKunaiCloud = (engine, actor) => {\n  let cursor = engine.actors[engine.currentActor];\n  cursor.active = false;\n  let throwDirection = {\n    x: Math.sign(cursor.pos.x - actor.pos.x),\n    y: Math.sign(cursor.pos.y - actor.pos.y),\n  }\n  engine.game.removeActor(cursor);\n  let cloud = Item.fireballCloud({\n    // let cloud = Item.kunaiCloud({\n    engine,\n    actor,\n    targetPos: { ...cursor.pos },\n    throwDirection,\n  });\n  if (cloud) {\n    cloud.pos = {\n      x: actor.pos.x + throwDirection.x,\n      y: actor.pos.y + throwDirection.y,\n    };\n    engine.actors.push(cloud);\n    actor.setNextAction(\n      new Action.Say({\n        message: `I'll get you with these kunai!`,\n        game: engine.game,\n        actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    )\n  } else {\n    console.log('I have no kunais left');\n  }\n}\n\nconst keymapCursorToThrowItem = (engine, initiatedBy) => {\n  return {\n    w: {\n      activate: () => moveCursor(Constant.DIRECTIONS.N, engine),\n      label: 'move',\n    },\n    d: {\n      activate: () => moveCursor(Constant.DIRECTIONS.E, engine),\n      label: 'move',\n    },\n    s: {\n      activate: () => moveCursor(Constant.DIRECTIONS.S, engine),\n      label: 'move',\n    },\n    a: {\n      activate: () => moveCursor(Constant.DIRECTIONS.W, engine),\n      label: 'move',\n    },\n    // t: {\n    //   activate: () => throwKunaiCloud(engine, initiatedBy),\n    //   label: 'Throw Cloud',\n    // },\n    // y: {\n    t: {\n      activate: () => throwKunai(engine, initiatedBy),\n      label: 'Throw Kunai',\n    },\n  };\n}\n\nexport const activateThrow = (engine) => {\n  let game = engine.game;\n  let currentActor = engine.actors[game.engine.currentActor]\n  let pos = currentActor.pos;\n\n  let cursor = new UI_Actor({\n    initiatedBy: currentActor,\n    pos,\n    renderer: {\n      character: '█',\n      color: 'white',\n      background: '',\n    },\n    name: 'Cursor',\n    game,\n    keymap: keymapCursorToThrowItem(engine, currentActor),\n  })\n  engine.addActorAsPrevious(cursor);\n  engine.game.placeActorOnMap(cursor)\n  engine.game.draw()\n}","import { Move } from '../../actions';\nimport * as Constant from '../../constants';\n\nexport const walk = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Move({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}","import * as Helper from '../../../helper';\nimport { Bandit } from '../../entites';\n\nconst getBanditStats = () => {\n  let banditLevels = [\n    {\n      name: 'Ross',\n      renderer: {\n        character: Helper.getRandomInArray(['◉']),\n        color: 'white',\n        background: '',\n      },\n      durability: 1,\n      attackDamage: 1,\n      speed: 100,\n    },\n    {\n      name: 'Kevin',\n      renderer: {\n        character: Helper.getRandomInArray(['◉']),\n        color: 'green',\n        background: '',\n      },\n      durability: 2,\n      attackDamage: 1,\n      speed: 100,\n    },\n    {\n      name: 'Jacob',\n      renderer: {\n        character: Helper.getRandomInArray(['◉']),\n        color: 'blue',\n        background: '',\n      },\n      durability: 3,\n      attackDamage: 1,\n      speed: 100,\n    },\n    {\n      name: 'Jarod',\n      renderer: {\n        character: Helper.getRandomInArray(['◉']),\n        color: 'red',\n        background: '',\n      },\n      durability: 1,\n      attackDamage: 5,\n      speed: 300,\n    },\n    {\n      name: 'Bigii',\n      renderer: {\n        character: Helper.getRandomInArray(['◉']),\n        color: 'violet',\n        background: '',\n      },\n      durability: 15,\n      attackDamage: 10,\n      speed: 100,\n    },\n  ]\n  return Helper.getRandomInArray(banditLevels);\n\n}\n\nexport const addActor = (game) => {\n  let targetEntity = game.engine.actors[game.engine.currentActor]\n  let pos = Helper.getRandomPos(game.map).coordinates\n  const banditStats = getBanditStats();\n  let actor = new Bandit({\n    targetEntity,\n    pos,\n    renderer: banditStats.renderer,\n    name: banditStats.name,\n    game,\n    actions: [],\n    attackDamage: banditStats.attackDamage,\n    durability: banditStats.durability,\n    speed: banditStats.speed,\n  })\n  // game.placeActorOnMap(actor)\n  if (game.randomlyPlaceActorOnMap(actor)) {\n    game.engine.addActor(actor);\n    game.draw();\n  };\n}","import { PickupItem } from '../../actions';\nimport { ENERGY_THRESHOLD } from '../../constants';\nimport { coordsToString, getRandomInArray } from '../../../helper';\n\nexport const pickupRandom = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let entities = engine.game.map[coordsToString(actor.pos)].entities.filter((e) => e.id !== actor.id);\n  if (entities.length > 0) {\n    actor.setNextAction(new PickupItem({\n      item: getRandomInArray(entities),\n      game: engine.game,\n      actor,\n      energyCost: ENERGY_THRESHOLD\n    }));\n  }\n  else {\n    console.log('nothing to pickup.');\n  }\n};","import { Sign, SignRelease } from '../../actions';\nimport { ENERGY_THRESHOLD, HAND_SIGNS } from '../../constants';\n\n/******************** PLAYER ********************/\nexport const sign = (sign, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Sign({\n    sign,\n    game: engine.game,\n    actor,\n    energyCost: ENERGY_THRESHOLD\n  }));\n};\n\nexport const signRelease = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new SignRelease({\n    requiredSequence: [\n      HAND_SIGNS.Power,\n      HAND_SIGNS.Healing,\n    ],\n    game: engine.game,\n    actor,\n    energyCost: ENERGY_THRESHOLD\n  }));\n};","import { Tackle } from '../../actions';\nimport { ENERGY_THRESHOLD, DIRECTIONS, PARTICLE_TEMPLATES } from '../../constants';\n\nconst flyingLotus = (direction, stepCount, energyCost, additionalAttackDamage, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Tackle({\n    direction,\n    stepCount,\n    game: engine.game,\n    actor,\n    additionalAttackDamage,\n    energyCost,\n    particleTemplate: PARTICLE_TEMPLATES.leaf\n  }))\n}\n\nconst keymapFlyingLotus = (engine, initiatedBy, previousKeymap) => {\n  const energyCost = Math.floor(ENERGY_THRESHOLD / 2);\n  const stepCount = Math.floor(initiatedBy.energy / energyCost) - 1;\n  const additionalAttackDamage = stepCount;\n  const goToPreviousKeymap = () => initiatedBy.keymap = previousKeymap;\n  return {\n    Escape: {\n      activate: goToPreviousKeymap,\n      label: 'Close',\n    },\n    w: {\n      activate: () => {\n        flyingLotus(DIRECTIONS.N, stepCount, energyCost, additionalAttackDamage, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate N',\n    },\n    d: {\n      activate: () => {\n        flyingLotus(DIRECTIONS.E, stepCount, energyCost, additionalAttackDamage, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate E',\n    },\n    s: {\n      activate: () => {\n        flyingLotus(DIRECTIONS.S, stepCount, energyCost, additionalAttackDamage, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate S',\n    },\n    a: {\n      activate: () => {\n        flyingLotus(DIRECTIONS.W, stepCount, energyCost, additionalAttackDamage, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate W',\n    },\n  };\n}\n\nexport const activateFlyingLotus = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  currentActor.keymap = keymapFlyingLotus(engine, currentActor, { ...currentActor.keymap });\n}","export class Base {\n  constructor({ \n    game, \n    actor, \n    name = 'Effect', \n    lifespan = 100,\n    stepInterval = 100,\n    allowDuplicates = true,\n    onStart = () => null,\n    onStep = () => null,\n    onStop = () => null,\n  }) {\n    this.game = game\n    this.actor = actor\n    this.name = name\n    this.lifespan = lifespan\n    this.timeToLive = lifespan\n    this.stepInterval = stepInterval\n    this.allowDuplicates = allowDuplicates\n    this.timeSinceLastStep = 0;\n    this.onStart = onStart\n    this.onStep = onStep\n    this.onStop = onStop\n  }\n}","import { DIRECTIONS, ENERGY_THRESHOLD } from '../../constants';\nimport * as StatusEffect from '../../statusEffects';\nimport { AddStatusEffect, Move } from '../../actions';\nimport { walk } from './walk';\nimport { getRandomInArray } from '../../../helper';\n\nconst drunkWalk = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let originalDirection = [...direction];\n  let chance = Math.random();\n  if (chance < 0.5) {\n    console.log('drunk misstep');\n    let count = 100\n    while ((direction[0] === originalDirection[0] && direction[1] === originalDirection[1]) || count < 0) {\n      count -= 1;\n      direction = DIRECTIONS[getRandomInArray(Object.keys(DIRECTIONS))];\n    }\n    console.log(count);\n  }\n\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Move({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: ENERGY_THRESHOLD\n  }))\n}\n\nexport const drunkenFist = (engine, damageBuff = 1) => {\n  let currentActor = engine.actors[engine.currentActor];\n\n  let effect = new StatusEffect.Base({\n    game: engine.game,\n    actor: currentActor,\n    name: 'Drunk',\n    lifespan: 1000,\n    stepInterval: 100,\n    allowDuplicates: false,\n    onStart: () => {\n      currentActor.attackDamage += damageBuff;\n      currentActor.renderer.character = '?';\n      console.log(`${currentActor.name} took a sip of sake.`);\n      currentActor.keymap.w = {\n        activate: () => drunkWalk(DIRECTIONS.N, engine),\n        label: 'drunken walk'\n      }\n      currentActor.keymap.a = {\n        activate: () => drunkWalk(DIRECTIONS.W, engine),\n        label: 'drunken walk'\n      }\n      currentActor.keymap.s = {\n        activate: () => drunkWalk(DIRECTIONS.S, engine),\n        label: 'drunken walk'\n      }\n      currentActor.keymap.d = {\n        activate: () => drunkWalk(DIRECTIONS.E, engine),\n        label: 'drunken walk'\n      }\n    },\n    onStop: () => {\n      currentActor.attackDamage -= damageBuff;\n      currentActor.renderer.character = 'R';\n      console.log(`${currentActor.name} recovered from drunkeness.`);\n      currentActor.keymap.w = {\n        activate: () => walk(DIRECTIONS.N, engine),\n        label: 'walk'\n      }\n      currentActor.keymap.a = {\n        activate: () => walk(DIRECTIONS.W, engine),\n        label: 'walk'\n      }\n      currentActor.keymap.s = {\n        activate: () => walk(DIRECTIONS.S, engine),\n        label: 'walk'\n      }\n      currentActor.keymap.d = {\n        activate: () => walk(DIRECTIONS.E, engine),\n        label: 'walk'\n      }\n    },\n  });\n  currentActor.setNextAction(new AddStatusEffect({\n    effect,\n    actor: currentActor,\n    game: engine.game,\n    processDelay: 100,\n    particleTemplate: {\n      renderer: {\n        color: '#c45ffd',\n        background: '#424242',\n        character: '?'\n      }\n    },\n  }));\n}","import * as Action from '../../actions';\nimport * as Item from '../../items';\nimport * as Constant from '../../constants';\nimport { UI_Actor } from '../../entites';\nimport { moveCursor } from './moveCursor';\n\n// ------------ SAND TOMB ----------------------\nconst triggerSandTomb = (engine, actor) => {\n  let cursor = engine.actors[engine.currentActor];\n  // let cloud = Item.sandBurst({\n  let cloud = Item.sandTomb({\n    engine,\n    actor,\n    targetPos: { ...cursor.pos },\n  });\n  if (cloud) {\n    actor.setNextAction(\n      new Action.PlaceActor({\n        targetPos: { ...cursor.pos },\n        entity: cloud,\n        game: engine.game,\n        actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    )\n  }\n}\n\nconst keymapSandTomb = (engine, initiatedBy, previousKeymap) => {\n  const goToPreviousKeymap = () => {\n    let cursor = engine.actors[engine.currentActor];\n    cursor.active = false;\n    engine.game.removeActor(cursor);\n  };\n  return {\n    Escape: {\n      activate: goToPreviousKeymap,\n      label: 'Close',\n    },\n    w: {\n      activate: () => moveCursor(Constant.DIRECTIONS.N, engine),\n      label: 'move',\n    },\n    d: {\n      activate: () => moveCursor(Constant.DIRECTIONS.E, engine),\n      label: 'move',\n    },\n    s: {\n      activate: () => moveCursor(Constant.DIRECTIONS.S, engine),\n      label: 'move',\n    },\n    a: {\n      activate: () => moveCursor(Constant.DIRECTIONS.W, engine),\n      label: 'move',\n    },\n    k: {\n      activate: () => {\n        triggerSandTomb(engine, initiatedBy);\n        goToPreviousKeymap();\n      },\n      label: 'activate'\n    },\n  };\n}\n\nexport const sandTomb = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  let game = engine.game;\n  let pos = currentActor.pos;\n\n  let cursor = new UI_Actor({\n    initiatedBy: currentActor,\n    pos,\n    renderer: {\n      character: '█',\n      color: 'white',\n      background: '',\n    },\n    name: 'Cursor',\n    game,\n    keymap: keymapSandTomb(engine, currentActor, { ...currentActor.keymap }),\n  })\n  engine.addActorAsPrevious(cursor);\n  game.placeActorOnMap(cursor)\n  game.draw()\n}","import { PlaceActor } from '../../actions';\nimport { sandWallPulse } from '../../items';\nimport { DIRECTIONS, ENERGY_THRESHOLD } from '../../constants';\n\nconst triggerSandPulse = (direction, actor, engine) => {\n  let cloud = sandWallPulse({\n    engine,\n    actor,\n    throwDirection: {\n      x: direction[0],\n      y: direction[1],\n    },\n    targetPos: {\n      x: actor.pos.x + (direction[0] * 10),\n      y: actor.pos.y + (direction[1] * 10),\n    },\n  });\n\n  if (cloud) {\n    actor.setNextAction(\n      new PlaceActor({\n        targetPos: {\n          x: actor.pos.x + direction[0],\n          y: actor.pos.y + direction[1],\n        },\n        entity: cloud,\n        game: engine.game,\n        actor,\n        energyCost: ENERGY_THRESHOLD\n      })\n    )\n  }\n}\n\nconst keymapSandPulse = (engine, initiatedBy, previousKeymap) => {\n  const goToPreviousKeymap = () => initiatedBy.keymap = previousKeymap;\n  return {\n    Escape: {\n      activate: goToPreviousKeymap,\n      label: 'Close',\n    },\n    w: {\n      activate: () => {\n        triggerSandPulse(DIRECTIONS.N, initiatedBy, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate N',\n    },\n    d: {\n      activate: () => {\n        triggerSandPulse(DIRECTIONS.E, initiatedBy, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate E',\n    },\n    s: {\n      activate: () => {\n        triggerSandPulse(DIRECTIONS.S, initiatedBy, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate S',\n    },\n    a: {\n      activate: () => {\n        triggerSandPulse(DIRECTIONS.W, initiatedBy, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate W',\n    },\n  };\n}\n\nexport const sandPulse = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  currentActor.keymap = keymapSandPulse(engine, currentActor, { ...currentActor.keymap });\n}","import { Wall } from '../../entites';\nimport { PlaceItems } from '../../actions';\nimport { TYPE } from '../../items';\nimport { getDirectionKey, DIRECTIONS, ENERGY_THRESHOLD } from '../../constants';\n\n// ------------ SAND WALL ----------------------\nconst createSandWall = (engine, pos) => new Wall({\n  game: engine.game,\n  passable: false,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.BARRIER,\n  durability: 3,\n})\n\nconst triggerSandWall = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let targetPositions = [];\n  let directionKey = getDirectionKey(direction);\n  switch (directionKey) {\n    case 'N':\n      targetPositions = targetPositions.concat([\n        {\n          x: actor.pos.x - 1,\n          y: actor.pos.y - 1,\n        },\n        {\n          x: actor.pos.x,\n          y: actor.pos.y - 1,\n        },\n        {\n          x: actor.pos.x + 1,\n          y: actor.pos.y - 1,\n        },\n      ]);\n      break;\n    case 'S':\n      targetPositions = targetPositions.concat([\n        {\n          x: actor.pos.x - 1,\n          y: actor.pos.y + 1,\n        },\n        {\n          x: actor.pos.x,\n          y: actor.pos.y + 1,\n        },\n        {\n          x: actor.pos.x + 1,\n          y: actor.pos.y + 1,\n        },\n      ]);\n      break;\n    case 'E':\n      targetPositions = targetPositions.concat([\n        {\n          x: actor.pos.x + 1,\n          y: actor.pos.y - 1,\n        },\n        {\n          x: actor.pos.x + 1,\n          y: actor.pos.y,\n        },\n        {\n          x: actor.pos.x + 1,\n          y: actor.pos.y + 1,\n        },\n      ]);\n      break;\n    case 'W':\n      targetPositions = targetPositions.concat([\n        {\n          x: actor.pos.x - 1,\n          y: actor.pos.y - 1,\n        },\n        {\n          x: actor.pos.x - 1,\n          y: actor.pos.y,\n        },\n        {\n          x: actor.pos.x - 1,\n          y: actor.pos.y + 1,\n        },\n      ]);\n      break;\n    default:\n      break;\n  }\n  actor.setNextAction(new PlaceItems({\n    targetPositions,\n    entity: createSandWall(engine, { ...actor.pos }),\n    game: engine.game,\n    actor,\n    energyCost: ENERGY_THRESHOLD\n  }))\n}\n\nconst keymapSandWall = (engine, initiatedBy, previousKeymap) => {\n  const goToPreviousKeymap = () => initiatedBy.keymap = previousKeymap;\n  return {\n    Escape: {\n      activate: goToPreviousKeymap,\n      label: 'Close',\n    },\n    w: {\n      activate: () => {\n        triggerSandWall(DIRECTIONS.N, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate N',\n    },\n    d: {\n      activate: () => {\n        triggerSandWall(DIRECTIONS.E, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate E',\n    },\n    s: {\n      activate: () => {\n        triggerSandWall(DIRECTIONS.S, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate S',\n    },\n    a: {\n      activate: () => {\n        triggerSandWall(DIRECTIONS.W, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate W',\n    },\n  };\n}\n\nexport const sandWall = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  currentActor.keymap = keymapSandWall(engine, currentActor, { ...currentActor.keymap });\n}","export const die = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.destroy();\n}","// import deps\nimport * as Item from '../items';\nimport * as Entity from '../entites';\nimport * as Constant from '../constants';\nimport * as Keymap from '../Keymap';\n\nexport default function (engine) {\n  // define keymap\n  const keymap = (engine) => {\n    return {\n      w: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.N, engine),\n        label: 'walk',\n      },\n      d: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.E, engine),\n        label: 'walk',\n      },\n      s: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.S, engine),\n        label: 'walk',\n      },\n      a: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.W, engine),\n        label: 'walk',\n      },\n      l: {\n        activate: () => Keymap.activateFlyingLotus(engine),\n        label: 'Flying Lotus',\n      },\n      k: {\n        activate: () => Keymap.removeWeights(engine, 200),\n        label: 'Remove wraps',\n      },\n      j: {\n        activate: () => Keymap.drunkenFist(engine),\n        label: 'Sip Sake',\n      },\n      h: {\n        activate: () => Keymap.leafWhirlwind(engine),\n        label: 'Leaf Whirlwind',\n      },\n      o: {\n        activate: () => Keymap.openInnerGate(engine),\n        label: 'Gate of Opening',\n      },\n      i: {\n        activate: () => Keymap.activateInventory(engine),\n        label: 'Open Inventory',\n      },\n      q: {\n        activate: () => Keymap.activateEquipment(engine),\n        label: 'Open Equipment',\n      },\n      g: {\n        activate: () => Keymap.activateDropItem(engine),\n        label: 'Drop Item',\n      },\n      p: {\n        activate: () => Keymap.pickupRandom(engine),\n        label: 'Pickup',\n      },\n      t: {\n        activate: () => Keymap.activateThrow(engine),\n        label: 'Throw',\n      },\n      // DEV KEYS\n      y: {\n        activate: () => Keymap.addActor(engine.game),\n        label: 'Add NPC',\n      },\n      c: {\n        activate: () => Keymap.die(engine),\n        label: 'Die',\n      },\n    };\n  }\n  // instantiate class\n  let actor = new Entity.Player({\n    pos: { x: 23, y: 7 },\n    renderer: {\n      character: 'R',\n      color: '#e6e6e6',\n      background: '#36635b',\n    },\n    name: 'Rock Lee',\n    actions: [],\n    speed: 400,\n    durability: 20,\n    keymap: keymap(engine),\n  })\n\n  // add default items to container\n  actor.container = [\n    ...Array(100).fill('').map(() => Item.kunai(engine, { ...actor.pos })),\n  ]\n\n  return actor;\n}","import * as StatusEffect from '../../statusEffects';\nimport { AddStatusEffect } from '../../actions';\n\nexport const removeWeights = (engine, speedBoost = 600, damageDebuff = 1) => {\n  let currentActor = engine.actors[engine.currentActor];\n\n  let effect = new StatusEffect.Base({\n    game: engine.game,\n    actor: currentActor,\n    name: 'Removed wraps (weights)',\n    lifespan: 1000,\n    stepInterval: 100,\n    allowDuplicates: false,\n    onStart: () => {\n      currentActor.speed += speedBoost;\n      currentActor.attackDamage = Math.max(0, currentActor.attackDamage - damageDebuff);\n      currentActor.energy += speedBoost;\n      currentActor.renderer.character = '〣'\n      console.log(`${currentActor.name} removed weighted wraps.`);\n    },\n    onStop: () => {\n      currentActor.speed -= speedBoost;\n      currentActor.attackDamage += damageDebuff;\n      currentActor.renderer.character = 'R'\n      console.log(`${currentActor.name} rewrapped weights.`);\n    },\n  });\n  currentActor.setNextAction(new AddStatusEffect({\n    effect,\n    actor: currentActor,\n    game: engine.game,\n    particleTemplate: {\n      renderer: {\n        color: '#424242',\n        background: '#e6e6e6',\n        character: '〣'\n      }\n    }\n  }));\n}","import { MultiTargetAttack} from '../../actions';\nimport { ENERGY_THRESHOLD, PARTICLE_TEMPLATES } from '../../constants';\n\nexport const leafWhirlwind = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let targetPositions = [\n    {\n      x: actor.pos.x - 1,\n      y: actor.pos.y,\n    },\n    {\n      x: actor.pos.x - 1,\n      y: actor.pos.y - 1,\n    },\n    {\n      x: actor.pos.x,\n      y: actor.pos.y - 1,\n    },\n    {\n      x: actor.pos.x + 1,\n      y: actor.pos.y - 1,\n    },\n    {\n      x: actor.pos.x + 1,\n      y: actor.pos.y,\n    },\n    {\n      x: actor.pos.x + 1,\n      y: actor.pos.y + 1,\n    },\n    {\n      x: actor.pos.x,\n      y: actor.pos.y + 1,\n    },\n    {\n      x: actor.pos.x - 1,\n      y: actor.pos.y + 1,\n    },\n  ]\n\n  actor.setNextAction(new MultiTargetAttack({\n    targetPositions,\n    game: engine.game,\n    actor,\n    energyCost: (ENERGY_THRESHOLD * 8),\n    particleTemplate: PARTICLE_TEMPLATES.leaf,\n  }))\n}","import * as StatusEffect from '../../statusEffects';\nimport { AddStatusEffect } from '../../actions';\n\nexport const openInnerGate = (engine) => {\n  let currentActor = engine.actors[engine.currentActor];\n  let nextGate = currentActor.setNextGate();\n  if (nextGate) {\n    let effect = new StatusEffect.Base({\n      game: engine.game,\n      actor: currentActor,\n      name: nextGate.name,\n      lifespan: -1,\n      stepInterval: 100,\n      allowDuplicates: false,\n      onStart: () => {\n        currentActor.speed += nextGate.speedBuff;\n        currentActor.energy += nextGate.speedBuff;\n        currentActor.attackDamage += nextGate.damageBuff;\n        console.log(`${currentActor.name} opened the ${nextGate.name}.`);\n        let nextGateToLabel = currentActor.getNextGate();\n        if (nextGateToLabel) {\n          currentActor.keymap.o.label = nextGateToLabel.name;\n        } else {\n          delete currentActor.keymap.o;\n        }\n      },\n      onStep: () => {\n        currentActor.decreaseDurability(nextGate.durabilityDebuff);\n        currentActor.decreaseDurability(0);\n        console.log(`${currentActor.name} suffers ${nextGate.durabilityDebuff} damage from physical stress.`)\n      },\n    });\n    currentActor.setNextAction(new AddStatusEffect({\n      effect,\n      actor: currentActor,\n      game: engine.game,\n      processDelay: 25,\n      particleTemplate: {\n        renderer: {\n          color: '#3cc2bb',\n          background: '#24fe88',\n          character: '#'\n        }\n      }\n    }));\n  }\n}","import * as Helper from '../helper';\nimport { Particle } from './entites';\nimport { PARTICLE_TEMPLATES } from './constants';\nimport RockLee from './Characters/RockLee';\n\nexport class Engine {\n  constructor({\n    statusEffects = [],\n    actors = [],\n    currentActor = 0,\n    isRunning = false,\n    game = null,\n  }) {\n    this.statusEffects = statusEffects;\n    this.actors = actors;\n    this.currentActor = currentActor;\n    this.isRunning = isRunning;\n    this.game = game;\n  }\n\n  async processV1 () { // a turn-based system using speed and round-robin\n    let actor = this.actors[this.currentActor]\n    actor.gainEnergy(actor.speed);\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      while (true) {\n        let result = action.perform();\n        this.game.draw();\n        await Helper.delay(action.processDelay);\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    return true\n  }\n\n  async process() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (!actor) return false;\n      let timePassed = 0;\n      if (actor.hasEnoughEnergy()) {\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        timePassed += action.energyCost;\n        while (true) {\n          let result = await action.perform();\n          if (!await this.processActionFX(action, result.success)) {\n              await Helper.delay(action.processDelay);\n              this.game.draw();\n          }\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n        this.processStatusEffects(timePassed);\n      } else {\n        actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    return true\n  }\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.process();\n    }\n    let actor = this.actors[this.currentActor]\n    \n    if (!actor) {\n      this.game.backToTitle();\n      return;\n    }\n    \n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    this.game.updateMode();\n    await this.game.updateReact(this.game);\n  }\n  \n  stop() {\n    this.isRunning = false;\n  }\n\n  addStatusEffect(newEffect) {\n    if (!newEffect.allowDuplicates) {\n      if (this.statusEffects.filter((effect) => (\n        effect.actor.id === newEffect.actor.id &&\n        effect.name === newEffect.name\n      )).length > 0) {\n        console.log(`${newEffect.name} cannot be applied twice to ${newEffect.actor.name}`);\n        return false;\n      };\n    }\n    newEffect.onStart();\n    this.statusEffects.push(newEffect)\n    return true;\n  }\n\n  removeStatusEffectById (id) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.id !== id) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n  \n  removeStatusEffectByActorId (actorId) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.actor.id !== actorId) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n\n  removeDeadStatusEffects() {\n    this.statusEffects = this.statusEffects.filter((effect) =>{\n      if (effect.lifespan >= 0 && effect.timeToLive <= 0) {\n        effect.onStop();\n        return false;\n      }\n      return true;\n    });\n  }\n\n  processStatusEffects (timePassed) {\n    this.statusEffects.forEach((effect) => {\n      effect.timeSinceLastStep += timePassed;\n      effect.timeToLive -= timePassed;\n      if (effect.timeSinceLastStep >= effect.stepInterval) {\n        effect.onStep();\n        effect.timeSinceLastStep = 0;\n      } \n    });\n    this.removeDeadStatusEffects();\n  }\n\n  async processActionFX (action, actionSuccess) {\n    // EASE IN\n    // let time = .8\n    // let nextT = (t) => t *= t; \n    // EASE OUT\n    // let time = .03\n    // let nextT = (t) => t * (2 - t); \n    // EASE IN OUT QUAD\n    // let time = .4\n    // let nextT = (t) => t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t; \n    // EASE IN CUBIC\n    // let time = .8\n    // let nextT = (t) => t * t * t; \n    // EASE OUT CUBIC\n    // let time = .001\n    // let nextT = (t) => (--t) * t * t + 1; \n    if (!actionSuccess) { \n      // If action is not successful, instead of running action's normal particle animation\n      // we'll show a red X on the entity that initiated the action\n      const particle = new Particle({\n        game: this.game,\n        name: 'particle',\n        passable: true,\n        pos: {...action.actor.pos},\n        renderer: PARTICLE_TEMPLATES.fail.renderer,\n      })\n      this.game.placeActorOnMap(particle);\n      this.game.draw();\n      await Helper.delay(100);\n      this.game.removeActorFromMap(particle);\n      particle.update(1);\n      this.game.draw();\n      action.removeDeadParticles(); // is this needed?\n      return true;\n    }\n\n    if (action.particles.length) {\n      while (action.particles.length > 0) {\n        action.particles.forEach((particle) => {\n          this.game.placeActorOnMap(particle);\n        })\n        this.game.draw();\n        // await Helper.delay(time * 100);\n        // await Helper.delay(time * action.processDelay);\n        await Helper.delay(action.processDelay);\n        action.particles.forEach((particle) => {\n          this.game.removeActorFromMap(particle);\n          particle.update(1);\n\n        })\n        this.game.draw();\n        action.removeDeadParticles();\n        // time = nextT(time);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  addActor (entity) {\n    this.actors.push(entity);\n  }\n\n  addActorAsPrevious (entity) {\n    this.actors.splice(this.currentActor, 0, entity);\n  }\n\n  addActorAsNext (entity) {\n    this.actors.splice(this.currentActor + 1, 0, entity);\n  }\n\n  setActorToPrevious (entity) {\n    this.currentActor -= 1;\n    if (this.currentActor <= -1) this.currentActor = this.actors.length - 1;\n  }\n\n  setActorToNext (entity) {\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n  }\n\n}\n\n\nexport class CrankEngine extends Engine {\n  async process() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (actor.hasEnoughEnergy()) {\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        while (true) {\n          this.game.draw();\n          let result = await action.perform();\n          await Helper.delay(action.processDelay);\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n      } else {\n        // actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    // this.currentActor = (this.currentActor + 1) % this.actors.length;\n    this.currentActor += 1;\n    if (this.currentActor + 1 >= this.actors.length) {\n      this.currentActor = 0;\n      this.actors.forEach((actor) => actor.gainEnergy(actor.speed));\n      return false;\n    }\n    return true\n  }\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.process();\n    }\n    let actor = this.actors[this.currentActor]\n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    this.game.updateMode();\n    await this.game.updateReact(this.game);\n  }\n}","import React from 'react';\nimport * as ROT from 'rot-js';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\nimport { addActor as addWaveEnemy } from './Keymap/KeyActions/addActor';\n\nconst GAME_MODE_TYPES = {WAVE: 0};\n\nexport class Game {\n  constructor({\n    engine = null,\n    map = {},\n    display = new ROT.Display({ \n      // forceSquareRatio: true,\n      width: 90,\n      // height: 100,\n      fontSize: 24, \n      bg: '#424242' \n    }),\n    tileKey = Constant.TILE_KEY,\n    mode = {\n      type: GAME_MODE_TYPES.WAVE,\n      data: {\n        level: 1,\n        highestLevel: null,\n      }\n    },\n  }) {\n    this.engine = engine;\n    this.map = map;\n    this.display = display;\n    this.tileKey = tileKey;\n    this.mode = mode;\n  }\n\n  initializeMode () {\n    if (this.mode.type === GAME_MODE_TYPES.WAVE) {\n      let highestLevel = localStorage.getItem('hidden_leaf_rl__highestLevel');\n      if (!highestLevel) { \n        highestLevel = this.mode.data.level;\n      } else { \n        highestLevel = Math.max(highestLevel , this.mode.data.level);\n      }\n      localStorage.setItem('hidden_leaf_rl__highestLevel', highestLevel);\n      this.mode.data.highestLevel = highestLevel\n      for (let i = 0; i < Math.pow(this.mode.data.level, 2); i++) {\n        addWaveEnemy(this);\n      }\n    }\n  }\n  \n  updateMode () {\n    if (this.mode.type === GAME_MODE_TYPES.WAVE) {\n      const nonPlayerCharacters = this.engine.actors.filter((actor) => !actor.entityTypes.includes('PLAYING'));\n      if (!nonPlayerCharacters.length) {\n        this.nextModeLevel();\n        this.initializeMode();\n      }\n    }\n  }\n\n  setModeLevel (level) {\n    this.mode.data.level = level;\n  }\n\n  nextModeLevel () {\n    this.setModeLevel(this.mode.data.level + 1);\n  }\n  \n  resetMode () {\n    this.setModeLevel(1);\n    this.initializeMode();\n  }\n\n  randomlyPlaceActorOnMap(actor) {\n    let kill = 0;\n    let placed = false;\n    while (!placed) {\n      let pos = Helper.getRandomPos(this.map).coordinates\n      if (this.canOccupyPosition(pos, actor)) {\n        let tile = this.map[Helper.coordsToString(pos)]\n        actor.pos = { ...pos }\n        tile.entities.push(actor);\n        placed = true;\n      }\n      kill += 1;\n      if (kill >= 100) {\n        placed = true;\n      }\n    }\n    return placed;\n  }\n\n  randomlyPlaceAllActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      this.randomlyPlaceActorOnMap(actor);\n    })\n  }\n\n  placeActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      let tile = this.map[Helper.coordsToString(actor.pos)]\n      if (tile) {\n        tile.entities.push(actor);\n      } else {\n        console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      }\n    })\n  }\n\n  placeActorOnMap(actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (tile) {\n      tile.entities.push(actor);\n      return true\n    } else {\n      console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      return false\n    }\n  }\n\n  removeActorFromMap (actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (!tile) return false;\n    this.map[Helper.coordsToString(actor.pos)].entities = tile.entities.filter((ac) => ac.id !== actor.id);\n    return true;\n  }\n\n  createLevel () {\n    // let digger = new ROT.Map.Arena();\n    // let digger = new ROT.Map.Rogue();\n    // let digger = new ROT.Map.DividedMaze();\n    // let digger = new ROT.Map.EllerMaze();\n    // let digger = new ROT.Map.Cellular();\n    // let digger = new ROT.Map.Digger();\n    // let digger = new ROT.Map.IceyMaze();\n    let digger = new ROT.Map.Uniform();\n    let freeCells = [];\n    let digCallback = function (x, y, value) {\n      let key = x + \",\" + y;\n      let type = 'GROUND';\n      let currentFrame = 0;\n      if (value) { \n        type = 'WALL';\n        // type = 'WATER';\n      }\n\n      if (Constant.TILE_KEY[type].animation) {\n        currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n      }\n\n      this.map[key] = {\n        type,\n        currentFrame,\n        entities: [],\n      };\n      freeCells.push(key);\n    }\n    digger.create(digCallback.bind(this));\n    this.randomlyPlaceAllActorsOnMap()\n  }\n\n  canOccupyPosition (pos, entity = {passable: false}) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      let hasImpassableEntity = targetTile.entities.filter((entity) => !entity.passable).length > 0;\n      if (!hasImpassableEntity || entity.passable) {\n        let tile = this.map[Helper.coordsToString(pos)];\n        if (this.tileKey[tile.type].passable) {\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  cursorCanOccupyPosition(pos) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  show () {\n    let d = document.getElementById('display')\n    d.appendChild(this.display.getContainer())\n  }\n\n  draw () {\n    for (let key in this.map) {\n      let parts = key.split(\",\");\n      let x = parseInt(parts[0]);\n      let y = parseInt(parts[1]);\n      let tile = this.map[key];\n      let { character, foreground, background } = this.tileKey[tile.type]\n\n      // Proto code to handle tile animations\n      let tileRenderer = this.tileKey[tile.type]\n      if (tileRenderer.animation) {\n        let frame = tileRenderer.animation[tile.currentFrame];\n        \n        character = frame.character;\n        foreground = frame.foreground;\n        background = frame.background;\n        tile.currentFrame = (tile.currentFrame + 1) % tileRenderer.animation.length;\n      }\n\n      if (tile.entities.length > 0) {\n        let entity = tile.entities[tile.entities.length - 1]\n        character = entity.renderer.character\n        foreground = entity.renderer.color\n        if (entity.renderer.background) {\n          background = entity.renderer.background\n        }\n      }\n      this.display.draw(x, y, character, foreground, background);\n    }\n  }\n\n  addActor (actor, engine = this.engine) {\n    let isPlaced = this.placeActorOnMap(actor); // replace with placeActorOnMap\n    if (!isPlaced) { return false }\n    engine.actors.push(actor);\n    this.draw();\n    return true\n  }\n\n  placeAndDrawActor (actor) {\n    this.placeActorsOnMap(); // replace with placeActorOnMap\n    this.draw();\n  }\n\n  removeActor (actor) {\n    this.engine.actors = this.engine.actors.filter((ac) => ac.id !== actor.id);\n    // this.engine.currentActor = this.engine.actors.length - 1; // should remove need for this line\n    // this.engine.currentActor = (this.engine.currentActor) % this.engine.actors.length;\n    // this.engine.currentActor = (this.engine.currentActor + 1) % this.engine.actors.length;\n    this.removeActorFromMap(actor);\n    this.draw();\n  }\n\n  initialize (presserRef) {\n    this.engine.game = this;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this;\n    });\n    this.show();\n    this.createLevel();\n    this.draw();\n    presserRef.current.focus();\n    this.initializeMode();\n  }\n}\n\n/************************** UI ********************************/\nexport const handleKeyPress = (event, engine) => {\n  if (!engine.isRunning) {\n    let actor = engine.actors[engine.currentActor];\n    let keymap = actor.keymap;\n    let code = event.key;\n    if (!(code in keymap)) { return; }\n    keymap[code]['activate']();\n    engine.start()\n  }\n  return;\n}\n\nexport const DisplayElement = (presserRef, handleKeyPress, engine) => {\n  return (\n    <div\n      id='display'\n      ref={presserRef}\n      onKeyDown={(event) => handleKeyPress(event, engine)}\n      tabIndex='0'\n    />\n  )\n}\n/************************** UI ********************************/\n","import React from 'react';\n\nfunction Button(props) {\n  let color = props['color'];\n  if (!color) color = 'grey';\n  return (\n    <button\n      onClick={props.onClick}\n      className={`btn ${color} darken-3`}\n    >\n      {props.children}  \n    </button>\n  )\n}\n\nexport default Button;\n","import React from 'react';\nimport Button from './Button';\n\nclass Information extends React.Component {\n  render() {\n    return (\n      <div className=\"Information UI\">\n        <div className='flow-text'>Information</div>\n        {\n          this.props.data && (\n            this.props.data.map((item, index) => {\n              return (\n                <Button key={index} color={item['color']} onClick={() => null}>\n                  {`${item.label}: ${item.value}`}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Information;","import React from 'react';\nimport Button from './Button';\n\nclass Equipment extends React.Component {\n  render() {\n    return (\n      <div className=\"Equipment UI\">\n        <div className='flow-text'>Equipment</div>\n        {\n          this.props.equipment && (\n            this.props.equipment.map((slot, index) => {\n              return (\n                <Button key={index} onClick={() => null}>\n                  {slot.name} {slot.item ? slot.item.renderer.character : ''}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Equipment;","import React from 'react';\nimport Button from './Button';\n\nclass Inventory extends React.Component {\n  render() {\n    return (\n      <div className=\"Inventory UI\">\n        <div className='flow-text'>Inventory</div>\n        {\n          this.props.inventory && (\n            this.props.inventory.map((item, index) => {\n              return (\n                <Button key={index} onClick={() => null}>\n                  {index} {item.name} {item.renderer.character}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Inventory;","import React from 'react';\nimport Button from './Button';\n\nclass Keymap extends React.Component {\n  render() {\n    return (  \n      <div className=\"Keymap UI\">\n        <div className='flow-text'>Keymap</div>\n        {\n          \n          this.props.keymap && (\n            Object.entries(this.props.keymap).map(([key, value], index) => {\n              return (\n                <Button key={index} onClick={() => null}>\n                  {key} {value.label}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Keymap;","// import deps\nimport * as Constant from '../constants';\nimport * as Item from '../items';\nimport * as Entity from '../entites';\nimport * as Keymap from '../Keymap';\n// create class\n\nconst keymap = (engine) => {\n  return {\n    w: {\n      activate: () => Keymap.walk(Constant.DIRECTIONS.N, engine),\n      label: 'walk',\n    },\n    d: {\n      activate: () => Keymap.walk(Constant.DIRECTIONS.E, engine),\n      label: 'walk',\n    },\n    s: {\n      activate: () => Keymap.walk(Constant.DIRECTIONS.S, engine),\n      label: 'walk',\n    },\n    a: {\n      activate: () => Keymap.walk(Constant.DIRECTIONS.W, engine),\n      label: 'walk',\n    },\n    i: {\n      activate: () => Keymap.activateInventory(engine),\n      label: 'Open Inventory',\n    },\n    q: {\n      activate: () => Keymap.activateEquipment(engine),\n      label: 'Open Equipment',\n    },\n    k: {\n      activate: () => Keymap.cloneSelf(engine),\n      label: 'Clone Self',\n    },\n    g: {\n      activate: () => Keymap.activateDropItem(engine),\n      label: 'Drop Item',\n    },\n    p: {\n      activate: () => Keymap.pickupRandom(engine),\n      label: 'Pickup',\n    },\n    t: {\n      activate: () => Keymap.activateThrow(engine),\n      label: 'Throw',\n    },\n    y: {\n      activate: () => Keymap.addActor(engine.game),\n      label: 'Add NPC',\n    },\n    c: {\n      activate: () => Keymap.charge(engine, 1),\n      label: 'Charge',\n    },\n    '1': {\n      activate: () => Keymap.sign(Constant.HAND_SIGNS.Power, engine),\n      label: 'Sign - Power',\n    },\n    '2': {\n      activate: () => Keymap.sign(Constant.HAND_SIGNS.Healing, engine),\n      label: 'Sign - Healing',\n    },\n    '3': {\n      activate: () => Keymap.sign(Constant.HAND_SIGNS.Absolute, engine),\n      label: 'Sign - Absolution',\n    },\n    r: {\n      activate: () => Keymap.signRelease(engine),\n      label: 'Release',\n    },\n  };\n}\n\nexport default function (engine) {\n  let actor = new Entity.Player({\n    pos: { x: 23, y: 7 },\n    renderer: {\n      character: 'N',\n      color: 'black',\n      background: 'orange',\n    },\n    name: 'Naruto Uzumaki',\n    actions: [],\n    speed: 600,\n    durability: 1,\n    keymap: keymap(engine),\n  })\n\n  actor.container = [\n    Item.sword(engine),\n    Item.sword(engine),\n    Item.sword(engine),\n    ...Array(10).fill('').map(() => Item.kunai(engine, { ...actor.pos })),\n  ]\n\n  return actor;\n}\n// export instance","import { CloneSelf } from '../../actions';\n\nexport const cloneSelf = (engine, cloneOverrides = []) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new CloneSelf({\n    game: engine.game,\n    actor,\n    cloneArgs: cloneOverrides,\n  }));\n};","import { Charge, Release } from '../../actions';\nimport { ENERGY_THRESHOLD } from '../../constants';\n\nexport const charge = (engine, chargeAmount) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Charge({\n    chargeAmount,\n    game: engine.game,\n    actor,\n    energyCost: ENERGY_THRESHOLD\n  }));\n};\n\nexport const release = (engine, chargeCost) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Release({\n    chargeCost,\n    game: engine.game,\n    actor,\n    energyCost: ENERGY_THRESHOLD\n  }));\n};","// import deps\nimport * as Item from '../items';\nimport * as Entity from '../entites';\nimport * as Constant from '../constants';\nimport * as Keymap from '../Keymap';\n\n// create class\nexport default function (engine) {\n  // define keymap\n  const keymap = (engine) => {\n    return {\n      w: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.N, engine),\n        label: 'walk',\n      },\n      d: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.E, engine),\n        label: 'walk',\n      },\n      s: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.S, engine),\n        label: 'walk',\n      },\n      a: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.W, engine),\n        label: 'walk',\n      },\n      l: {\n        activate: () => Keymap.sandClone(engine),\n        label: 'Sand Clone',\n      },\n      k: {\n        activate: () => Keymap.sandTomb(engine),\n        label: 'Sand Tomb',\n      },\n      j: {\n        activate: () => Keymap.sandSkin(engine, 2),\n        label: 'Sand Skin',\n      },\n      h: {\n        activate: () => Keymap.sandWall(engine),\n        label: 'Sand Wall',\n      },\n      o: {\n        activate: () => Keymap.sandPulse(engine),\n        label: 'Sand Pulse',\n      },\n      i: {\n        activate: () => Keymap.activateInventory(engine),\n        label: 'Open Inventory',\n      },\n      q: {\n        activate: () => Keymap.activateEquipment(engine),\n        label: 'Open Equipment',\n      },\n      g: {\n        activate: () => Keymap.activateDropItem(engine),\n        label: 'Drop Item',\n      },\n      p: {\n        activate: () => Keymap.pickupRandom(engine),\n        label: 'Pickup',\n      },\n      t: {\n        activate: () => Keymap.activateThrow(engine),\n        label: 'Throw',\n      },\n      // DEV KEYS\n      y: {\n        activate: () => Keymap.addActor(engine.game),\n        label: 'Add NPC',\n      },\n      u: {\n        activate: () => Keymap.die(engine),\n        label: 'Destroy Self',\n      },\n    };\n  }\n\n\n  let actor = new Entity.Player({\n    pos: { x: 23, y: 7 },\n    renderer: {\n      character: 'G',\n      color: '#F0D8C0',\n      background: '#603030',\n    },\n    name: 'Gaara',\n    actions: [],\n    speed: 200,\n    durability: 15,\n    cloneLimit: 3,\n    keymap: keymap(engine),\n    defense: 2,\n  })\n\n  actor.container = [\n    Item.sword(engine),\n    ...Array(100).fill('').map(() => Item.sandShuriken(engine, { ...actor.pos })),\n    // ...Array(10).fill('').map(() => Item.fireballGas(engine, actor)),\n    // ...Array(10).fill('').map(() => Item.movingSandWall(engine, { ...actor.pos })),\n  ]\n\n  return actor;\n}\n// export instance","import { CloneSelf } from '../../actions';\nimport { cloneDeep } from 'lodash';\n\nexport const sandClone = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let cloneKeymap = cloneDeep(actor.keymap);\n  delete cloneKeymap['j'];\n  delete cloneKeymap['k'];\n  delete cloneKeymap['l'];\n  let cloneArgs = [\n    {\n      attribute: 'renderer',\n      value: { ...actor.renderer, background: '#A89078' }\n    },\n    {\n      attribute: 'keymap',\n      value: cloneKeymap\n    }\n  ];\n  actor.setNextAction(new CloneSelf({\n    game: engine.game,\n    actor,\n    cloneArgs,\n  }))\n}","import * as StatusEffect from '../../statusEffects';\nimport { AddStatusEffect } from '../../actions';\n\nexport const sandSkin = (engine, defenseBuff = 1) => {\n  let currentActor = engine.actors[engine.currentActor];\n  let effect = new StatusEffect.Base({\n    game: engine.game,\n    actor: currentActor,\n    name: 'Sand Skin',\n    lifespan: 500,\n    stepInterval: 100,\n    allowDuplicates: false,\n    onStart: () => {\n      currentActor.defense += defenseBuff;\n      console.log(`${currentActor.name} was enveloped in hardened sand.`);\n      currentActor.renderer.background = '#A89078'\n    },\n    onStop: () => {\n      currentActor.defense = Math.max(0, currentActor.defense - defenseBuff);\n      console.log(`${currentActor.name}'s hardened sand skin fell away.`);\n      currentActor.renderer.background = '#603030';\n    },\n  });\n  currentActor.setNextAction(new AddStatusEffect({\n    effect,\n    actor: currentActor,\n    game: engine.game,\n    particleTemplate: {\n      renderer: {\n        character: '✦️',\n        color: '#A89078',\n        background: '#D8C0A8',\n      }\n    },\n  }));\n}","import React from 'react';\nimport { SCREENS } from './constants';\nimport * as Engine from '../engine';\nimport * as Game from '../game';\nimport Information from '../UI/Information';\nimport Equipment from '../UI/Equipment';\nimport Inventory from '../UI/Inventory';\nimport KeymapUI from '../UI/Keymap';\nimport RockLee from '../Characters/RockLee';\nimport NarutoUzumaki from '../Characters/NarutoUzumaki';\nimport Gaara from '../Characters/Gaara';\n\nclass Level extends React.Component {\n  constructor(props) {\n    super(props);\n    let ENGINE = new Engine.Engine({});\n    let actor = this.props.selectedCharacter.initialize(ENGINE);\n    ENGINE.actors.push(actor)\n    let game = new Game.Game({ engine: ENGINE })\n\n    this.state = {\n      game: game,\n    };\n    this.presserRef = React.createRef();\n  }\n\n  async componentDidMount() {\n    this.state.game.initialize(this.presserRef)\n    this.state.game['backToTitle'] = () => this.props.setActiveScreen(SCREENS.TITLE);\n    this.state.game.updateReact = (newGameState) => { this.setState({game: newGameState}) }\n    this.state.game.engine.start()\n  }\n\n  render() {\n    let currentActor = this.state.game.engine.actors[this.state.game.engine.currentActor];\n    let data = [\n      {\n        label: 'Wave',\n        value: `Current: ${this.state.game.mode.data.level}, Highest: ${this.state.game.mode.data.highestLevel}`,\n      },\n    ];\n\n    data = data.concat(\n      [\n        ...this.state.game.engine.actors.map((actor, index) => {\n          let result = {\n            label: actor.name,\n            value: index,\n            value: `HP: ${actor.durability}, En/Sp: ${actor.energy}/${actor.speed}`,\n          };\n          if (index === this.state.game.engine.currentActor) {\n            result['color'] = 'red';\n          }\n          return result;\n        })\n      ]\n    )\n\n    return (\n      <div className=\"Level\">\n        <div className='flow-text'>Chunin Exams</div>\n        <button className='btn' onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}>Quit</button>\n        <div className='row'>\n          <Information data={data} />\n          <Equipment equipment={this.state.game.visibleEquipment} />\n          <Inventory inventory={this.state.game.visibleInventory} />\n          <KeymapUI keymap={this.state.game.visibleKeymap} />\n          {Game.DisplayElement(this.presserRef, Game.handleKeyPress, this.state.game.engine)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Level;\n","import React from 'react';\nimport { SCREENS } from './constants';\nconst CharacterSelect = (props) => {\n  return (\n    <div className='CharacterSelect'>\n      {\n        props.characters.map((character, index) => {\n          let color = '';\n          if (props.selectedCharacter) {\n            color = props.selectedCharacter.name === character.name ? 'red' : ''\n          }\n\n          return (\n            <button\n              key={index}\n              className={`CharacterSelect__button btn ${color}`}\n              onClick={() => props.setSelectedCharacter(character)}\n            >\n              {character.name}\n            </button>\n          )\n        })\n      }\n    </div>\n  );\n}\n\nclass Title extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"Title\">\n        <div\n          style={{\n            width: '100vw',\n            height: '100vh',\n            backgroundColor: '#e2e2e2',\n          }}\n        >\n          <div class='flow-text grey-text'>Hidden Leaf RL</div>\n          <CharacterSelect \n            characters={this.props.characters} \n            selectedCharacter={this.props.selectedCharacter} \n            setSelectedCharacter={this.props.setSelectedCharacter}\n          />\n          <button \n            class='btn' \n            onClick={() => this.props.setActiveScreen(SCREENS.LEVEL)}\n            disabled={!this.props.selectedCharacter}\n          >\n            Play\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Title;","import RockLee from './RockLee';\nimport Gaara from './Gaara';\nimport NarutoUzumaki from './NarutoUzumaki';\n\nlet Characters = () => {\n  return {\n    RockLee,\n    Gaara,\n    NarutoUzumaki,\n  }\n}\n\nexport default Characters;","import React from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport { SCREENS } from './Screen/constants';\nimport Level from './Screen/Level';\nimport Title from './Screen/Title';\nimport Characters from './Characters/index';\n\nclass Nystrum extends React.Component {\n  constructor() {\n    super();\n    let characterKey = Characters();\n    let characters = Object.keys(characterKey).map((key, i) => {\n      return {\n        // [key]: characterKey[key],\n        initialize: characterKey[key],\n        selected: false,\n        name: key,\n      }\n    });\n    this.state = {\n      activeScreen: SCREENS.TITLE,\n      characters,\n      selectedCharacter: null,\n    };\n  }\n\n  setActiveScreen (activeScreen) {\n    this.setState({activeScreen})\n  }\n\n  setSelectedCharacter (character) {\n    this.setState({selectedCharacter: {...character}})\n  }\n\n  getActiveScreen () {\n    const titleScreen = <Title \n      key={SCREENS.TITLE} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      setSelectedCharacter={this.setSelectedCharacter.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n      characters={this.state.characters}\n    />\n    const levelScreen = <Level \n      key={SCREENS.LEVEL} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n    />\n\n    switch (this.state.activeScreen) {\n      case SCREENS.TITLE:\n        return titleScreen\n      case SCREENS.LEVEL:\n        return levelScreen\n      default:\n        return titleScreen\n    }\n  }\n\n  render() {\n    const activeScreen = this.getActiveScreen();\n    return (\n      <div className=\"Nystrum\">\n        <ReactCSSTransitionGroup\n          transitionName=\"fade\"\n          transitionAppear={true}\n          transitionEnter={true}\n          transitionLeave={true}\n          transitionAppearTimeout={500}\n          transitionEnterTimeout={500}\n          transitionLeaveTimeout={300}\n        >\n          { activeScreen }\n        </ReactCSSTransitionGroup>\n      </div>\n    );\n  }\n}\n\nexport default Nystrum;\n","import * as ROT from 'rot-js';\n\nexport const TILE_KEY = () => {\n  return {\n    'GROUND': {\n      background: '#974',\n      foreground: '#aaa',\n      character: '.',\n      passable: true,\n    }\n  }\n}\n\n// RENDERING\n\nexport const DRAW = (map, display) => {\n  for (let key in map) {\n    let parts = key.split(\",\");\n    let x = parseInt(parts[0]);\n    let y = parseInt(parts[1]);\n    let tile = map[key];\n    let { character, foreground, background } = TILE_KEY()[tile.type]\n    if (tile.entities.length > 0) {\n      let entity = tile.entities[tile.entities.length - 1]\n      character = entity.components.renderer.character\n      foreground = entity.components.renderer.color\n      if (entity.components.renderer.background) {\n        background = entity.components.renderer.background\n      }\n    }\n    display.draw(x, y, character, foreground, background);\n  }\n}\n\n// END RENDERING\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const getImpassableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('impasse') && !e.components.impasse.passable)\n}\n\nexport const getDestructableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('destructible'))\n}\n\nexport const delay = (timeDelayed = 100) => {\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const exampleEngine = () => {\n  let scheduler = new ROT.Scheduler.Simple();\n  let engine = new ROT.Engine(scheduler);\n  let output = [];\n  /* sample actor: pauses the execution when dead */\n  let actor = {\n    lives: 3,\n    act: function () {\n      let done = null;\n      let promise = {\n        then: function (cb) { done = cb; }\n      }\n\n      output.push(\".\");\n      // SHOW(output.join(\"\"));\n      console.log(output.join(\"\"));\n\n      this.lives--;\n\n      /* if alive, wait for 500ms for next turn */\n      if (this.lives) {\n        setTimeout(function () { done(); }, 500);\n      }\n\n      return promise;\n    }\n  }\n  scheduler.add(actor, true);\n  engine.start();\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}","import * as Helper from '../lib/helper';\n\nexport const createEntity = (id = null, name = 'Empty', components = {}, world) => {\n  let entity = {\n    id,\n    name,\n    components,\n    world,\n    sendEvent: (target, eventType, parameters) => sendEvent(target, eventType, parameters, world),\n  };\n  return entity\n}\n\nexport const sendEvent = async (target = null, eventType = null, parameters = null, world = null) => {\n  let success = false;\n  for (let key in target.components) {\n    let component = target.components[key]\n    if (component.hasOwnProperty(eventType)) {\n      console.log('SUCCESSFUL EVENT: ', eventType)\n      success = true\n      if (eventType !== 'PREPARE_RENDER') {\n        await Helper.delay();\n      }\n      component[eventType]({ ...parameters, self: target, component: component });\n      Helper.DRAW(world.map, world.display)\n    }\n  }\n  if (!success) {\n    console.log('FAILED EVENT')\n  }\n};","import * as Helper from '../lib/helper';\n\nexport const receiver = (pos) => {\n  return {\n    responded: false,\n    RECIEVE: (parameters) => {\n      let { self, component, message } = parameters\n      console.log(message, pos.x, pos.y)\n      if (!component.responded) {\n        component.responded = true\n        self.sendEvent(parameters.sender, 'hello', 'RECIEVE', { message: 'copy', sender: self })\n      }\n    }\n  }\n}\n\nexport const impasse = (passable = false) => {\n  return {\n    passable,\n    MAKE_PASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = true;\n    },\n    MAKE_IMPASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = false;\n    }\n  }\n}\n\nexport const body = (world, pos = { x: 0, y: 0 }) => {\n  if (world) {\n    return {\n      pos,\n      MOVE: (parameters) => {\n        let { self, component, currentPos, targetPos } = parameters\n        if (world.canOccupy(world.map, targetPos)) {\n          component.pos = targetPos\n          let tile = world.map[Helper.coordsToString(currentPos)]\n          world.map[Helper.coordsToString(currentPos)] = {...tile, entities: []}\n          self.sendEvent(self, 'PREPARE_RENDER')\n          // Helper.DRAW(world.map, world.display)\n        } else {\n          console.log('can\\'t move there')\n        }\n      }\n    }\n  }\n  console.log('No world to occupy');\n  return {}\n}\n\nexport const destructible = (world, durability = 1) => {\n  return {\n    durability,\n    DECREASE_DURABILITY: (parameters) => {\n      let { self, component, value } = parameters;\n      component.durability -= value\n      if (component.durability <= 0) {\n        self.sendEvent(self, 'DESTROY')\n      }\n    },\n    INCREASE_DURABILITY: (parameters) => {\n      let { component, value } = parameters;\n      component.durability += value\n    },\n    DESTROY: (parameters) => {\n      let { self, component, value } = parameters;\n      let tile = world.map[Helper.coordsToString(self.components.body.pos)];\n      world.map[Helper.coordsToString(self.components.body.pos)].entities = tile.entities.filter((e) => e.id !== self.id);\n      // self.sendEvent(self, 'PREPARE_RENDER')\n      // Helper.DRAW(world.map, world.display)\n    }\n  }\n}\n\nexport const attack = (damage = 1) => {\n  return {\n    damage,\n  }\n}\n\nexport const throwable = (world) => {\n  return {\n    THROW: (parameters) => {\n      let { self, component, direction } = parameters;\n      // if next tile is passable\n        // send move action to self\n        // send throw action to self\n      // else\n        // send decrease_durability to entity next in tile\n        // send decrease_durability to self\n      let currentPos = self.components.body.pos;\n      let nextPos = { x: currentPos.x + direction.x, y: currentPos.y + direction.y }\n      let nextTile = world.map[Helper.coordsToString(nextPos)];\n      if (world.canOccupy(world.map, nextPos)) { // change to check for target entity\n        self.sendEvent(\n          self, 'MOVE', {\n            currentPos: currentPos,\n            targetPos: nextPos\n          }\n        )\n        self.sendEvent(self, 'THROW', {direction});\n      } else {\n        if (world.map.hasOwnProperty(Helper.coordsToString(nextPos))) {\n          let impassable_and_destructable_entities = Helper.getDestructableEntities(Helper.getImpassableEntities(nextTile.entities))\n          if (impassable_and_destructable_entities.length > 0) {\n            self.sendEvent(impassable_and_destructable_entities[0], 'DECREASE_DURABILITY', { value: 1 });\n          }\n        }\n        self.sendEvent(self, 'DECREASE_DURABILITY', { value: 1 });\n      }\n    },\n  }\n}\n\nexport const renderer = (world, character = '', color = 'white', background = false) => {\n  return {\n    character,\n    color,\n    background,\n    PREPARE_RENDER: (parameters) => {\n      let { self } = parameters\n      if (self.components.hasOwnProperty('body')) {\n        world.map[Helper.coordsToString(self.components.body.pos)].entities.push(self)\n      }\n    }\n  }\n}","import React from 'react';\nimport '../App.css';\nimport * as ROT from 'rot-js';\nimport * as Entity from './lib/entity'\nimport * as Helper from './lib/helper'\nimport * as Components from './components/index'\n\nconst SHOW = (canvas) => {\n  let d = document.getElementById('display')\n  d.appendChild(canvas)\n}\n\nconst CREATE_LEVEL = (world) => {\n  let digger = new ROT.Map.Arena();\n  let freeCells = [];\n  let digCallback = function (x, y, value) {\n    if (value) { return; }\n    let key = x + \",\" + y;\n    world.map[key] = {\n      type: 'GROUND',\n      entities: [],\n    };\n    freeCells.push(key);\n  }\n  digger.create(digCallback.bind(this));\n}\n\nlet scheduler = new ROT.Scheduler.Simple()\nlet engine = new ROT.Engine(scheduler)\n\nlet world = {\n  canAct: true,\n  scheduler,\n  engine,\n  map: {},\n  display: new ROT.Display({ fontSize: 24, bg: '#099' }),\n  canOccupy: (map, pos) => {\n    if (map.hasOwnProperty(Helper.coordsToString(pos))) {\n      let tile = map[Helper.coordsToString(pos)];\n      if (Helper.TILE_KEY()[tile.type].passable && Helper.getImpassableEntities(tile.entities).length === 0) {\n        return true\n      }\n    } else {\n      return false\n    }\n  },\n}\n\nlet naruto = {\n  ...Entity.createEntity(1, 'Naruto', {\n    reciever: Components.receiver({ x: 10, y: 30 }),\n    body: Components.body(world, { x: 19, y: 21 }),\n    renderer: Components.renderer(world, 'N', 'orange', 'black'),\n  },\n    world,\n  ),\n}\n\nlet box = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 21 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box2 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 19 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box3 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 17 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet kunai = {\n  ...Entity.createEntity(3, 'Kunai', {\n    body: Components.body(world, { x: 20, y: 21 }),\n    renderer: Components.renderer(world, '<>', 'black'),\n    destructible: Components.destructible(world),\n    attack: Components.attack(),\n    throwable: Components.throwable(world),\n  },\n    world,\n  )\n}\n\nclass Original extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.presserRef = React.createRef();\n  }\n\n  handleKeyPress = (event, world, entity) => {\n    let keymap = {\n      w: 0,\n      d: 1,\n      s: 2,\n      a: 3,\n    };\n\n    let code = event.key;\n    let dir = ROT.DIRS[4][keymap[code]];\n    if (code === 't') {\n      kunai.sendEvent(kunai, 'MOVE', {\n        currentPos: kunai.components.body.pos,\n        targetPos: {\n          x: entity.components.body.pos.x + 1,\n          y: entity.components.body.pos.y,\n        },\n      })\n      return kunai.sendEvent(kunai, 'THROW', { direction: { x: 1, y: 0 } })\n    }\n    if (!(code in keymap)) { return; }\n    let newX = entity.components.body.pos.x + dir[0];\n    let newY = entity.components.body.pos.y + dir[1];\n\n    entity.sendEvent(\n      entity, 'MOVE', {\n        currentPos: entity.components.body.pos,\n        targetPos: {\n          x: newX,\n          y: newY\n        }\n      }\n    )\n\n    return;\n    // return Helper.DRAW(world.map, world.display)\n\n  }\n\n  componentDidMount() {\n    ROT.RNG.setSeed(7);\n    SHOW(world.display.getContainer());\n    CREATE_LEVEL(world);\n    naruto.sendEvent(naruto, 'PREPARE_RENDER')\n    // kunai.sendEvent(kunai, 'PREPARE_RENDER')\n    box.sendEvent(box, 'PREPARE_RENDER')\n    box2.sendEvent(box2, 'PREPARE_RENDER')\n    box3.sendEvent(box3, 'PREPARE_RENDER')\n    Helper.DRAW(world.map, world.display)\n    this.presserRef.current.focus();\n  }\n\n  render() {\n    return (\n      <div className=\"App\" ref={this.presserRef} onKeyDown={(event) => this.handleKeyPress(event, world, naruto)} tabIndex='0'>\n        <div id='display'></div>\n      </div>\n    );\n  }\n}\n\nexport default Original;\n","import React from 'react';\nimport './App.css';\nimport Nystrum from './nystrum/Nystrum';\nimport Original from './original/Original';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <Nystrum />\n        {/* <Original /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}