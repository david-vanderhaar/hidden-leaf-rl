{"version":3,"sources":["nystrum/Screen/constants.js","helper.js","nystrum/engine.js","nystrum/constants.js","nystrum/game.js","nystrum/UI/Button.js","nystrum/UI/Equipment.js","nystrum/UI/Inventory.js","nystrum/UI/Keymap.js","nystrum/actions.js","nystrum/entites.js","nystrum/items.js","nystrum/keymaps.js","nystrum/Characters/Gaara.js","nystrum/Screen/Level.js","nystrum/Screen/Title.js","nystrum/Nystrum.js","original/lib/helper.js","original/lib/entity.js","original/components/index.js","original/Original.js","App.js","serviceWorker.js","index.js"],"names":["SCREENS","TITLE","LEVEL","delay","timeDelayed","Promise","resolve","setTimeout","getRandomInArray","array","Math","floor","random","length","coordsToString","coords","x","y","calculatePath","game","targetPos","currentPos","topology","map","isPassable","type","astar","ROT","AStar","path","compute","push","slice","calculatePathWithRange","range","getRandomPos","keys","Object","key","split","coordinates","parseInt","text","getDestructableEntities","entites","filter","entity","hasOwnProperty","Engine","statusEffects","actors","currentActor","isRunning","this","actor","gainEnergy","speed","hasEnoughEnergy","action","getAction","result","perform","draw","Helper","processDelay","success","alternative","acting","timePassed","energyCost","processStatusEffects","process","keymap","visibleKeymap","updateReact","newEffect","allowDuplicates","effect","id","name","console","log","onStart","onStop","actorId","lifespan","timeToLive","forEach","timeSinceLastStep","stepInterval","onStep","removeDeadStatusEffects","CrankEngine","TILE_KEY","background","character","passable","animation","foreground","DIRECTIONS","N","S","E","W","EQUIPMENT_TYPES","HEAD","TORSO","BACK","HAND","FEET","EQUIPMENT_LAYOUTS","human","item","CLONE_PATTERNS","square","x_offset","y_offset","positions","taken","bigSquare","ALPHABET","Game","engine","display","width","fontSize","bg","tileKey","Constant","pos","tile","entities","ac","digger","Arena","freeCells","create","value","min","max","currentFrame","ceil","bind","randomlyPlaceActorsOnMap","targetTile","document","getElementById","appendChild","getContainer","parts","renderer","color","isPlaced","placeActorOnMap","placeActorsOnMap","removeActorFromMap","presserRef","show","createLevel","current","focus","handleKeyPress","event","code","start","Button","props","onClick","className","children","Equipment","equipment","slot","index","React","Component","Inventory","inventory","Keymap","entries","label","Base","energy","Say","message","args","EquipItemFromContainer","equipmentType","itemInSlot","getItemInSlot","addToContainer","unequip","removeFromContainer","equip","UnequipItem","DropItem","PickupItem","it","DestroySelf","destroy","CursorMove","cursorCanOccupyPosition","e","PlaceItems","targetPositions","canOccupyPosition","clone","cloneDeep","uuid","Move","move","Action","Attack","entityTypes","includes","attack","ThrowProjectile","move_result","shift","ThrowProjectileGas","Entity","Attacking","superclass","attackDamage","concat","additional","targets","target","canAttack","damage","getAttackDamage","decreaseDurability","Acting","actions","Rendering","direction","newPos","Playing","nextAction","Chasing","targetEntity","Destructable","durability","removeStatusEffectByActorId","UI_Actor","pipe","initiatedBy","active","Wall","Bandit","Player","charge","chargeMax","signHistory","sign","container","itemType","items","slotName","find","foundSlot","DestructiveProjectile","createPath","DestructiveCloudProjectileV2","owner_id","isClone","cloneCount","clonePattern","offset","cloneDeepWith","referencePos","addActor","isInitialized","child","destroyChild","initialize","TYPE","createProjectileCloud","throwDirection","structureType","createProjectile","structure","position","targetPosition","fireball","addAlphabeticallyToKeymap","obj","alphabetAllowed","letter","moveCursor","newX","newY","setNextAction","throwKunaiCloud","cursor","removeActor","cloud","Item","keymapCursorToThrowItem","w","activate","d","s","a","t","kunai","contains","throwKunai","closeInventory","currentUiActor","visibleInventory","closeEquipment","visibleEquipment","walk","pickupRandom","activateThrowCursor","activateInventory","ui","Escape","keymapEquipFromInventory","activateEquipment","keymapEquipment","activateDrop","keymapDropFromInventory","ENGINE","createSandWall","sandWall","directionString","activateSandWall","previousKeymap","goToPreviousKeymap","keymapSandWall","l","k","j","h","o","i","q","g","p","Array","fill","Gaara","Level","showUI","state","createRef","newGameState","setState","setActiveScreen","ref","onKeyDown","tabIndex","Title","style","height","backgroundColor","class","Nystrum","activeScreen","titleScreen","levelScreen","getActiveScreen","transitionName","transitionAppear","transitionEnter","transitionLeave","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","DRAW","components","getImpassableEntities","impasse","createEntity","world","sendEvent","eventType","parameters","component","self","MAKE_PASSABLE","MAKE_IMPASSABLE","body","MOVE","canOccupy","destructible","DECREASE_DURABILITY","INCREASE_DURABILITY","DESTROY","PREPARE_RENDER","scheduler","Simple","canAct","naruto","reciever","responded","RECIEVE","sender","Components","box","box2","box3","throwable","THROW","nextPos","nextTile","impassable_and_destructable_entities","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d6b649de.chunk.js","sourcesContent":["export const SCREENS = {\n  TITLE: 0,\n  LEVEL: 1,\n}","import * as ROT from 'rot-js';\n\nexport const delay = (timeDelayed = 100) => {\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport const getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const calculatePath = (game, targetPos, currentPos, topology = 4) => {\n  let map = game.map\n  let isPassable = function (x, y) {\n    if (map[x + \",\" + y]) {\n      return (map[x + \",\" + y].type === 'GROUND');\n    } else {\n      return false\n    }\n  }\n  let astar = new ROT.Path.AStar(targetPos.x, targetPos.y, isPassable, { topology });\n  let path = [];\n  astar.compute(currentPos.x, currentPos.y, function (x, y) {\n    path.push({ x, y })\n  });\n\n  return path.slice(1);\n}\n\nexport const calculatePathWithRange = (game, targetPos, currentPos, topology, range) => {\n  let path = calculatePath(game, targetPos, currentPos, topology);\n  return path.slice(0, range + 1);\n}\n\nexport const getRandomPos = (map) => {\n  let keys = Object.keys(map);\n  let key = getRandomInArray(keys).split(',');\n  let pos = { x: parseInt(key[0]), y: parseInt(key[1])}\n  return {coordinates: pos, text: key}\n}\n\nexport const getDestructableEntities = (entites) => {\n  return entites.filter((entity) => entity.hasOwnProperty('durability'));\n}","import * as Helper from '../helper';\n\nexport class Engine {\n  constructor({\n    statusEffects = [],\n    actors = [],\n    currentActor = 0,\n    isRunning = false,\n    game = null,\n  }) {\n    this.statusEffects = statusEffects;\n    this.actors = actors;\n    this.currentActor = currentActor;\n    this.isRunning = isRunning;\n    this.game = game;\n  }\n\n  async processV1 () { // a turn-based system using speed and round-robin\n    let actor = this.actors[this.currentActor]\n    actor.gainEnergy(actor.speed);\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      while (true) {\n        let result = action.perform();\n        this.game.draw();\n        await Helper.delay(action.processDelay);\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    return true\n  }\n\n  async process() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      let timePassed = 0;\n      if (actor.hasEnoughEnergy()) {\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        timePassed += action.energyCost;\n        while (true) {\n          let result = await action.perform();\n          this.game.draw();\n          await Helper.delay(action.processDelay);\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n        this.processStatusEffects(timePassed);\n      } else {\n        actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    return true\n  }\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.process();\n\n    }\n    let actor = this.actors[this.currentActor]\n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    await this.game.updateReact(this.game);\n  }\n  \n  stop() {\n    this.isRunning = false;\n  }\n\n  addStatusEffect(newEffect) {\n    if (!newEffect.allowDuplicates) {\n      if (this.statusEffects.filter((effect) => (\n        effect.actor.id === newEffect.actor.id &&\n        effect.name === newEffect.name\n      )).length > 0) {\n        console.log(`${newEffect.name} cannot be applied twice to ${newEffect.actor.name}`);\n        return false;\n      };\n    }\n    newEffect.onStart();\n    this.statusEffects.push(newEffect)\n    return true;\n  }\n\n  removeStatusEffectById (id) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.id !== id) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n  \n  removeStatusEffectByActorId (actorId) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.actor.id !== actorId) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n\n  removeDeadStatusEffects() {\n    this.statusEffects = this.statusEffects.filter((effect) =>{\n      if (effect.lifespan >= 0 && effect.timeToLive <= 0) {\n        effect.onStop();\n        return false;\n      }\n      return true;\n    });\n  }\n\n  processStatusEffects (timePassed) {\n    this.statusEffects.forEach((effect) => {\n      effect.timeSinceLastStep += timePassed;\n      effect.timeToLive -= timePassed;\n      if (effect.timeSinceLastStep >= effect.stepInterval) {\n        effect.onStep();\n        effect.timeSinceLastStep = 0;\n      } \n    });\n    this.removeDeadStatusEffects();\n  }\n}\n\nexport class CrankEngine extends Engine {\n  async process() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (actor.hasEnoughEnergy()) {\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        while (true) {\n          let result = await action.perform();\n          this.game.draw();\n          // await Helper.delay(action.processDelay);\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n      } else {\n        // actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    // this.currentActor = (this.currentActor + 1) % this.actors.length;\n    this.currentActor += 1;\n    if (this.currentActor + 1 >= this.actors.length) {\n      this.currentActor = 0;\n      this.actors.forEach((actor) => actor.gainEnergy(actor.speed));\n      return false;\n    }\n    return true\n  }\n}","export const ENERGY_THRESHOLD = 100;\n\nexport const TILE_KEY = {\n  'GROUND': {\n    background: '#424242',\n    character: '',\n    passable: true,\n  },\n  'WATER': {\n    animation: [\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#8aa', character: '▒', passable: false, },\n      { background: '#424242', foreground: '#8aa', character: '▓', passable: false, },\n    ],\n    background: '#9dc3d3',\n    character: '░',\n    passable: false,\n  },\n  'WIN': {\n    background: 'white',\n    foreground: 'black',\n    character: 'W',\n    passable: true,\n  }\n}\n\nexport const HAND_SIGNS = {\n  Power: {\n    type: 'Power',\n    name: 'Rin',\n    description: 'Strength of mind, body, spirit',\n  },\n  Energy: {\n    type: 'Energy',\n    name: 'Pyo',\n    description: 'energy direction',\n  },\n  Harmony: {\n    type: 'Harmony',\n    name: 'To',\n    description: 'one- ness with the universe or self',\n  },\n  Healing: {\n    type: 'Healing',\n    name: 'Sha',\n    description: 'of self and others',\n  },\n  Intuition: {\n    type: 'Intuition',\n    name: 'Kai',\n    description: 'premonition of danger, feeling others intent',\n  },\n  Awareness: {\n    type: 'Awareness',\n    name: 'Jin',\n    description: 'feeling thoughts of others, perhaps hiding your own',\n  },\n  Dimension: {\n    type: 'Dimension',\n    name: 'Retsu',\n    description: 'control of time and space',\n  },\n  Creation: {\n    type: 'Creation',\n    name: 'Zai',\n    description: 'understanding nature',\n  },\n  Absolute: {\n    type: 'Absolute',\n    name: 'Zen',\n    description: 'enlightenment',\n  }, \n}\n\nexport const DIRECTIONS = {\n  N: [0, -1],\n  S: [0, 1],\n  E: [1, 0],\n  W: [-1, 0],\n}\n\nexport const getDirectionKey = (direction) => {\n  let directionString = `${direction}`;\n  let keys = Object.keys(DIRECTIONS);\n  let result = false\n  keys.forEach((key) => {\n    if (`${DIRECTIONS[key]}` === directionString) {\n      result = key\n    }\n  })\n  return result\n}\n\nexport const EQUIPMENT_TYPES = {\n  HEAD: 'HEAD',\n  TORSO: 'TORSO',\n  BACK: 'BACK',\n  HAND: 'HAND',\n  FEET: 'FEET',\n}\n\nexport const EQUIPMENT_LAYOUTS = {\n  human: () => {\n    return [\n      {type: EQUIPMENT_TYPES.HEAD, name: 'head', item: null},\n      {type: EQUIPMENT_TYPES.TORSO, name: 'torso', item: null},\n      {type: EQUIPMENT_TYPES.BACK, name: 'back', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'left_hand', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'right_hand', item: null},\n      {type: EQUIPMENT_TYPES.FEET, name: 'feet', item: null},\n    ]\n  }\n}\n\nexport const CLONE_PATTERNS = {\n  square: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n    ]\n},\n  bigSquare: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 2, y: 2, taken: false, },\n      { x: 2, y: 0, taken: false, },\n      { x: 2, y: -2, taken: false, },\n      { x: 0, y: -2, taken: false, },\n      { x: -2, y: -2, taken: false, },\n      { x: -2, y: 0, taken: false, },\n      { x: -2, y: 2, taken: false, },\n    ],\n  }\n}\n\nexport const ALPHABET = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];","import React from 'react';\nimport * as ROT from 'rot-js';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\n\nexport class Game {\n  constructor({\n    engine = null,\n    map = {},\n    display = new ROT.Display({ \n      // forceSquareRatio: true,\n      width: 90,\n      // height: 100,\n      fontSize: 24, \n      bg: '#424242' \n    }),\n    tileKey = Constant.TILE_KEY,\n  }) {\n    this.engine = engine;\n    this.map = map;\n    this.display = display;\n    this.tileKey = tileKey;\n  }\n\n  randomlyPlaceActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      let pos = Helper.getRandomPos(this.map).coordinates\n      let tile = this.map[Helper.coordsToString(pos)]\n      actor.pos = {...pos}\n      tile.entities.push(actor);\n    })\n  }\n\n  placeActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      let tile = this.map[Helper.coordsToString(actor.pos)]\n      if (tile) {\n        tile.entities.push(actor);\n      } else {\n        console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      }\n    })\n  }\n\n  placeActorOnMap(actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (tile) {\n      tile.entities.push(actor);\n      return true\n    } else {\n      console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      return false\n    }\n  }\n\n  removeActorFromMap (actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    this.map[Helper.coordsToString(actor.pos)].entities = tile.entities.filter((ac) => ac.id !== actor.id);\n  }\n\n  createLevel () {\n    let digger = new ROT.Map.Arena();\n    let freeCells = [];\n    let digCallback = function (x, y, value) {\n      if (value) { return; }\n      let key = x + \",\" + y;\n      let type = 'GROUND';\n      let currentFrame = 0;\n\n      if (Constant.TILE_KEY[type].animation) {\n        currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n      }\n\n      this.map[key] = {\n        type,\n        currentFrame,\n        entities: [],\n      };\n      freeCells.push(key);\n    }\n    digger.create(digCallback.bind(this));\n    this.map[`10,10`] = {\n      type: 'WIN',\n      entities:[],\n    }\n    this.randomlyPlaceActorsOnMap()\n  }\n\n  canOccupyPosition (pos) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      let hasImpassableEntity = targetTile.entities.filter((entity) => !entity.passable).length > 0;\n      if (!hasImpassableEntity) {\n        let tile = this.map[Helper.coordsToString(pos)];\n        if (this.tileKey[tile.type].passable) {\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  cursorCanOccupyPosition(pos) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  show () {\n    let d = document.getElementById('display')\n    d.appendChild(this.display.getContainer())\n  }\n\n  draw () {\n    for (let key in this.map) {\n      let parts = key.split(\",\");\n      let x = parseInt(parts[0]);\n      let y = parseInt(parts[1]);\n      let tile = this.map[key];\n      let { character, foreground, background } = this.tileKey[tile.type]\n\n      // Proto code to handle tile animations\n      // let tileRenderer = this.tileKey[tile.type]\n      // if (tileRenderer.animation) {\n      //   let frame = tileRenderer.animation[tile.currentFrame];\n        \n      //   character = frame.character;\n      //   foreground = frame.foreground;\n      //   background = frame.background;\n      //   tile.currentFrame = (tile.currentFrame + 1) % tileRenderer.animation.length;\n      // }\n\n      if (tile.entities.length > 0) {\n        let entity = tile.entities[tile.entities.length - 1]\n        character = entity.renderer.character\n        foreground = entity.renderer.color\n        if (entity.renderer.background) {\n          background = entity.renderer.background\n        }\n      }\n      this.display.draw(x, y, character, foreground, background);\n    }\n  }\n\n  addActor (actor, engine = this.engine) {\n    let isPlaced = this.placeActorOnMap(actor); // replace with placeActorOnMap\n    if (!isPlaced) { return false }\n    engine.actors.push(actor);\n    this.draw();\n  }\n\n  placeAndDrawActor (actor) {\n    this.placeActorsOnMap(); // replace with placeActorOnMap\n    this.draw();\n  }\n\n  removeActor (actor) {\n    this.engine.actors = this.engine.actors.filter((ac) => ac.id !== actor.id);\n    // this.engine.currentActor = this.engine.actors.length - 1;\n    // this.engine.currentActor = (this.engine.currentActor) % this.engine.actors.length;\n    // this.engine.currentActor = (this.engine.currentActor + 1) % this.engine.actors.length;\n    this.removeActorFromMap(actor);\n    this.draw();\n  }\n\n  initialize (presserRef) {\n    this.engine.game = this;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this;\n    });\n    this.show();\n    this.createLevel();\n    this.draw();\n    presserRef.current.focus();\n  }\n}\n\n/************************** UI ********************************/\nexport const handleKeyPress = (event, engine) => {\n  if (!engine.isRunning) {\n    let actor = engine.actors[engine.currentActor];\n    let keymap = actor.keymap;\n    let code = event.key;\n    if (!(code in keymap)) { return; }\n    keymap[code]['activate']();\n    engine.start()\n  }\n  return;\n}\n\nexport const DisplayElement = (presserRef, handleKeyPress, engine) => {\n  return (\n    <div\n      id='display'\n      ref={presserRef}\n      onKeyDown={(event) => handleKeyPress(event, engine)}\n      tabIndex='0'\n    />\n  )\n}\n/************************** UI ********************************/\n","import React from 'react';\n\nfunction Button(props) {\n  return (\n    <button\n      onClick={props.onClick}\n      className='btn grey darken-3'\n    >\n      {props.children}  \n    </button>\n  )\n}\n\nexport default Button;\n","import React from 'react';\nimport Button from './Button';\n\nclass Equipment extends React.Component {\n  render() {\n    return (\n      <div className=\"Equipment UI\">\n        <div className='flow-text'>Equipment</div>\n        {\n          this.props.equipment && (\n            this.props.equipment.map((slot, index) => {\n              return (\n                <Button key={index} onClick={() => null}>\n                  {slot.name} {slot.item ? slot.item.renderer.character : ''}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Equipment;","import React from 'react';\nimport Button from './Button';\n\nclass Inventory extends React.Component {\n  render() {\n    return (\n      <div className=\"Inventory UI\">\n        <div className='flow-text'>Inventory</div>\n        {\n          this.props.inventory && (\n            this.props.inventory.map((item, index) => {\n              return (\n                <Button key={index} onClick={() => null}>\n                  {index} {item.name} {item.renderer.character}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Inventory;","import React from 'react';\nimport Button from './Button';\n\nclass Keymap extends React.Component {\n  render() {\n    return (  \n      <div className=\"Keymap UI\">\n        <div className='flow-text'>Keymap</div>\n        {\n          \n          this.props.keymap && (\n            Object.entries(this.props.keymap).map(([key, value], index) => {\n              return (\n                <Button key={index} onClick={() => null}>\n                  {key} {value.label}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Keymap;","import * as Helper from '../helper';\nimport * as Action from './actions';\nimport * as Constant from './constants';\nimport { cloneDeep } from 'lodash';\nimport uuid from 'uuid/v1';\n\nexport class Base {\n  constructor({game, actor, energyCost = 100, processDelay = 50}) {\n    this.actor = actor\n    this.game = game\n    this.energyCost = energyCost\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    console.log(`${this.actor.name} performs`)\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n}\n\nexport class AddStatusEffect extends Base {\n  constructor({ effect, processDelay = 0, ...args }) {\n    super({ ...args });\n    this.effect = effect\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = this.game.engine.addStatusEffect(this.effect);\n    if (success) this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Say extends Base {\n  constructor({ message, processDelay = 50, ...args}) {\n    super({...args});\n    this.message = message\n    this.processDelay = processDelay\n  }\n  perform() {\n    console.log(`${this.actor.name} says ${this.message}`);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SayManyThings extends Base {\n  constructor({ messages, processDelay = 50, ...args}) {\n    super({...args});\n    this.messages = messages\n    this.processDelay = processDelay\n  }\n  perform() {\n    let message = this.messages.shift();\n    if (message) {\n      console.log(`${this.actor.name} says ${message}`);\n      this.actor.energy -= this.energyCost;\n    }\n    if (this.messages.length) {\n      this.actor.setNextAction(this);\n    }\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class EquipItemFromContainer extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.actor.addToContainer(itemInSlot);\n        this.actor.unequip(itemInSlot);\n      }\n      this.actor.removeFromContainer(this.item);\n      this.actor.equip(this.item.equipmentType, this.item);\n      console.log(`${this.actor.name} equips ${this.item.name}.`);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class EquipItemFromTile extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(itemInSlot);\n      }\n\n      let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n      this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n      \n      this.actor.equip(this.item);\n      console.log(`${this.actor.name} equips ${this.item.name}.`);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class UnequipItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    console.log(`${this.actor.name} puts ${this.item.name} away.`);\n    this.actor.unequip(this.item);\n    this.actor.addToContainer(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DropItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    console.log(`${this.actor.name} drops ${this.item.name}.`);\n    this.actor.removeFromContainer(this.item);\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class PickupItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    console.log(`${this.actor.name} picks up ${this.item.name}.`);\n    this.actor.addToContainer(this.item);\n    let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DestroySelf extends Base {\n  constructor({processDelay = 0, ...args}) {\n    super({...args});\n    this.processDelay = processDelay\n  }\n  perform() {\n    // console.log(`${this.actor.name} is self-destructing`);\n    this.actor.energy -= this.energyCost;\n    this.actor.destroy();\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class CloneSelf extends Base {\n  constructor({processDelay = 0, ...args}) {\n    super({...args});\n    this.processDelay = processDelay\n  }\n  perform() {\n    this.actor.energy -= this.energyCost;\n    console.log(`${this.actor.name} is cloning itself`);\n    let clone = cloneDeep(this.actor);\n    clone.game = this.actor.game;\n    clone.id = uuid();\n    this.game.addActor(clone);\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class Charge extends Base {\n  constructor({chargeAmount, ...args}) {\n    super({...args});\n    this.chargeAmount = chargeAmount;\n  }\n  perform() {\n    console.log(`${this.actor.name} is charging up!`);\n    this.actor.energy -= this.energyCost;\n    this.actor.increaseCharge(this.chargeAmount);\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class Release extends Base {\n  constructor({ chargeCost, ...args }) {\n    super({ ...args });\n    this.chargeCost = chargeCost;\n  }\n  perform() {\n    let success = false;\n    if (this.actor.charge >= this.chargeCost) {\n      console.log(`${this.actor.name} is releasing ${this.chargeCost} volts!`);\n      this.actor.energy -= this.energyCost;\n      this.actor.decreaseCharge(this.chargeCost);\n      success = true;\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Sign extends Base {\n  constructor({ sign, ...args }) {\n    super({ ...args });\n    this.sign = sign;\n  }\n  perform() {\n    console.log(`${this.actor.name} threw a ${this.sign.name} sign.`);\n    this.actor.addSign(this.sign);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SignRelease extends Base {\n  constructor({requiredSequence = [], ...args}) {\n    super({...args});\n    this.requiredSequence = requiredSequence;\n  }\n\n  requiredSequenceIsFulfilled () {\n    let signHistory = this.actor.signHistory.concat();\n    let relevantHistory = signHistory.slice(\n      Math.max(signHistory.length - this.requiredSequence.length, 0)\n    )\n    let result = JSON.stringify(relevantHistory) === JSON.stringify(this.requiredSequence);\n    return result\n  }\n\n  perform() {\n    let success = false;\n    if (this.requiredSequenceIsFulfilled()) {\n      console.log(\n        `${this.actor.name} is releasing the power of ${this.requiredSequence.map(\n          (sign) => sign.type\n        ).join(' and ')}!`\n      );\n      this.actor.energy -= this.energyCost;\n      success = true;\n      this.actor.clearSigns();\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class CursorMove extends Base {\n  constructor({ targetPos, processDelay = 0, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    if (this.game.cursorCanOccupyPosition(this.targetPos)) {\n      let tile = this.game.map[Helper.coordsToString(this.actor.pos)]\n      this.game.map[Helper.coordsToString(this.actor.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.actor.id) }\n      this.actor.pos = this.targetPos\n      this.game.map[Helper.coordsToString(this.targetPos)].entities.push(this.actor);\n      success = true;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItem extends Base {\n  constructor({ targetPos, entity, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.entity = entity\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (this.game.canOccupyPosition(this.targetPos)) {\n      this.entity.pos = this.targetPos;\n      success = this.game.placeActorOnMap(this.entity)\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItems extends PlaceItem {\n  constructor({targetPositions = [], ...args}) {\n    super({...args});\n    this.targetPositions = targetPositions\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    console.log('actor ', this.actor.pos);\n    this.targetPositions.forEach((targetPos) => {\n      console.log('target ', targetPos);\n      \n      if (this.game.canOccupyPosition(targetPos)) {\n        let clone = cloneDeep(this.entity);\n        clone.game = this.game;\n        clone.id = uuid();\n        clone.pos = targetPos;\n        let placementSuccess = this.game.placeActorOnMap(clone);\n        if (placementSuccess) success = true;\n      }\n    });\n\n    if (success) this.actor.energy -= this.energyCost;\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Move extends Base {\n  constructor({ targetPos, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class MoveMultiple extends Base {\n  constructor({ direction, stepCount, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.move(targetPos)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Tackle extends MoveMultiple {\n  constructor({ direction, stepCount, additionalAttackDamage = 0, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.additionalAttackDamage = additionalAttackDamage;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.shove(targetPos, this.direction)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      success = true;\n    } else {\n      success = true;\n      this.actor.attack(targetPos, this.additionalAttackDamage);\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Attack extends Base {\n  constructor({ targetPos, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) { \n      return { \n        success: true, \n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      } \n    }\n    \n    success = this.actor.attack(this.targetPos);\n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class MultiTargetAttack extends Base {\n  constructor({ targetPositions, processDelay = 25, ...args }) {\n    super({ ...args });\n    this.targetPositions = targetPositions\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    if (!this.actor.entityTypes.includes('ATTACKING')) {\n      return {\n        success: true,\n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      }\n    }\n    this.targetPositions.forEach((targetPos) => {\n      let attackSuccess = this.actor.attack(targetPos);\n      if (attackSuccess) success = true;\n    })\n\n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ThrowProjectile extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    }\n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      let attackSuccess = this.actor.attack(this.targetPos);\n      if (attackSuccess) {\n        alternative = new Action.DestroySelf({\n          game: this.game,\n          actor: this.actor,\n          energyCost: Constant.ENERGY_THRESHOLD,\n          processDelay: 0,\n        });\n      }\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class ThrowProjectileGas extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n    this.processDelay = 0\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    } \n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      this.actor.attack(this.targetPos)\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class CrankEngine extends Base {\n  constructor({ engine, ...args }) {\n    super({ ...args });\n    this.engine = engine;\n  }\n  async perform() {\n    let success = true;\n    let alternative = null;\n\n    console.log(`${this.actor.name} is cranking its engine.`);\n    try {\n      await this.engine.start();\n      this.actor.energy -= this.energyCost;\n    } catch (error) {\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n      });\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n","import uuid from 'uuid/v1';\nimport pipe from 'lodash/fp/pipe';\nimport * as Helper from '../helper';\nimport * as Constant from './constants';\nimport * as Action from './actions';\nimport * as Engine from './engine';\nimport { cloneDeep, cloneDeepWith } from 'lodash';\nimport { access } from 'fs';\n\nexport class Entity {\n  constructor({ game = null, passable = false}) {\n    let id = uuid();\n    this.entityTypes = ['Entity']\n    this.id = id;\n    this.game = game;\n    this.passable = passable;\n  }\n}\n\nconst Parent = superclass => class extends superclass {\n  constructor({ children = [], engine = new Engine.CrankEngine({}), ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('PARENT');\n    this.children = children;\n    this.engine = engine;\n    this.isInitialized = false;\n  }\n\n  destroyChild(child) {\n    child.energy = 0;\n    let tile = this.game.map[Helper.coordsToString(child.pos)];\n    this.game.map[Helper.coordsToString(child.pos)].entities = tile.entities.filter((e) => e.id !== child.id);\n    this.engine.actors = this.engine.actors.filter((e) => e.id !== child.id);\n    // this.game.engine.currentActor = 0;\n    this.game.draw()\n  }\n\n  canAttack (entity) {\n    const childIds = this.children.map((child) => child.id); \n    return !childIds.includes(entity.id)\n  }\n  \n  initialize() {\n    this.isInitialized = true;\n    this.engine.game = this.game;\n    this.engine.actors = this.children;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this.game;\n      actor.destroy = () => {this.destroyChild(actor)};\n      actor.canAttack = this.canAttack.bind(this);\n      // actor.canAttack = (entity) => {this.canAttack(entity)};\n      this.game.addActor(actor, this.engine);\n    });\n  }\n\n  getAction(game) {\n    // crank engine one turn\n    if (!this.isInitialized) {\n      this.initialize()\n    }\n\n    let result = new Action.CrankEngine({\n      game,\n      actor: this,\n      engine: this.engine,\n      energyCost: Constant.ENERGY_THRESHOLD,\n    });\n\n    return result;\n  }\n\n}\n\nconst UI = superclass => class extends superclass {\n  constructor({ initiatedBy = null, ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('UI');\n    this.initiatedBy = initiatedBy;\n    this.active = true;\n  }\n\n  hasEnoughEnergy() {\n    return this.active;\n  }\n}\n\nexport const Attacking = superclass => class extends superclass {\n  constructor({attackDamage = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('ATTACKING')\n    this.attackDamage = attackDamage;\n  }\n\n  getAttackDamage (additional = 0) {\n    return this.attackDamage + additional;\n  }\n\n  canAttack (entity) {\n    return true;\n  }\n\n  attack (targetPos, additional = 0) {\n    let success = false;\n    let tile = this.game.map[Helper.coordsToString(targetPos)]\n    if (!tile) { return success }\n    let targets = Helper.getDestructableEntities(tile.entities);\n    if (targets.length > 0) {\n      let target = targets[0];\n      if (this.canAttack(target)) {\n        let damage = this.getAttackDamage(additional);\n        if (this.entityTypes.includes('EQUIPING')) {\n          this.equipment.forEach((slot) => {\n            if (slot.item) {\n              if (slot.item.entityTypes.includes('ATTACKING')) {\n                damage += slot.item.getAttackDamage();\n              }\n            }\n          });\n        }\n        console.log(`${this.name} does ${damage} to ${target.name}`);\n        target.decreaseDurability(damage);\n        success = true;\n      }\n    }\n\n    return success;\n  }\n}\n\nexport const Equipable = superclass => class extends superclass {\n  constructor({name = 'nameless', equipmentType = Constant.EQUIPMENT_TYPES.HAND, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('EQUIPABLE')\n    this.name = name;\n    this.equipmentType = equipmentType;\n  }\n}\n\nconst Acting = superclass => class extends superclass {\n  constructor({name, actions = [], speed, energy = 0, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('ACTING')\n    this.name = name;\n    this.actions = actions;\n    this.speed = speed;\n    this.energy = speed;\n  }\n\n  getAction() {\n    let action = Helper.getRandomInArray(this.actions)\n    if (action) { return action }\n  }\n\n  gainEnergy(value = this.speed) {\n    this.energy += value;\n  }\n\n  hasEnoughEnergy() {\n    return this.energy > 0;\n  }\n}\n\nconst Rendering = superclass => class extends superclass {\n  constructor({pos = {x: 0, y: 0}, renderer, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('RENDERING')\n    this.pos = pos;\n    this.renderer = {...renderer};\n  }\n\n  getPosition () {\n    return this.pos;\n  }\n\n  move (targetPos) {\n    let success = false;\n    if (this.game.canOccupyPosition(targetPos)) {\n      let tile = this.game.map[Helper.coordsToString(this.pos)]\n      this.game.map[Helper.coordsToString(this.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.id) }\n      this.pos = targetPos\n      this.game.map[Helper.coordsToString(targetPos)].entities.push(this);\n      success = true;\n    }\n    return success;\n  }\n\n  shove (targetPos, direction) {\n    let success = false;\n    let targetTile = this.game.map[Helper.coordsToString(targetPos)];\n    if (targetTile) {\n      targetTile.entities.map((entity) => { \n        if (!entity.passable) {\n          let newX = entity.pos.x + direction[0];\n          let newY = entity.pos.y + direction[1];\n          let newPos = { x: newX, y: newY };\n          entity.move(newPos);\n        }\n      });\n    }\n    success = this.move(targetPos);\n    return success;\n  }\n}\n\nconst Containing = superclass => class extends superclass {\n  constructor({container = [], ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CONTAINING')\n    this.container = container;\n  }\n\n  contains (itemType) {\n    let container = this.container;\n    let items = container.filter((item) => item.name === itemType);\n    return items.length > 0 ? items[0] : false;\n  }\n\n  addToContainer (item) {\n    this.container.push(item);\n  }\n  \n  removeFromContainer (item) {\n    this.container = this.container.filter((it) => it.id !== item.id);\n  }\n}\n\nconst Equiping = superclass => class extends superclass {\n  constructor({equipment = Constant.EQUIPMENT_LAYOUTS.human(), ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('EQUIPING')\n    this.equipment = equipment;\n  }\n\n  getItemInSlot (slotName) {\n    let openSlots = this.equipment.filter((slot) => {\n      return (slot.item === null && slot.type === slotName)\n    })\n    if (openSlots.length > 0) { return false; }\n    let slot = this.equipment.find((slot) => slot.type === slotName);\n    if (!slot) { return false; }\n    if (!slot.item) { return false; }\n    return slot.item;\n  }\n\n  equip (slotName, item) {\n    let foundSlot = false;\n    this.equipment = this.equipment.map((slot) => {\n      if (!foundSlot && slot.type === slotName && slot.item === null) {\n        slot.item = item;\n        foundSlot = true;\n      }\n      return slot;\n    })\n  }\n  \n  unequip(item) {\n    this.equipment = this.equipment.map((slot) => {\n      if (slot.item) {\n        if (slot.item.id === item.id) {\n          slot.item = null;\n        }\n      }\n      return slot;\n    })\n  }\n}\n\nconst Charging = superclass => class extends superclass {\n  constructor({charge = 10, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHARGING')\n    this.charge = charge;\n    this.chargeMax = charge;\n  }\n\n  decreaseCharge(value) {\n    this.charge = Math.max(0, this.charge - value);\n  }\n  \n  increaseCharge(value) {\n    this.charge = Math.min(this.chargeMax, this.charge + value);\n  }\n}\n\nconst Signing = superclass => class extends superclass {\n  constructor({...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('SIGNING')\n    this.signHistory = [];\n  }\n\n  addSign(sign) {\n    if (this.signHistory.length >= 4) {\n      this.signHistory.shift();\n    }\n    this.signHistory.push(sign);\n  }\n  \n  clearSigns() {\n    this.signHistory = [];\n  }\n}\n\nconst Playing = superclass => class extends superclass {\n  constructor({keymap = {}, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PLAYING')\n    this.nextAction = null;\n    this.keymap = keymap;\n  }\n\n    setNextAction(action) {\n      this.nextAction = action;\n    }\n\n    getAction() {\n      let action = this.nextAction;\n      this.nextAction = null;\n      return action;\n    }\n}\n\nconst Projecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    if (this.game.canOccupyPosition(targetPos)) {\n      this.path.shift();\n    }\n    return result;\n  }\n}\n\n\n\nconst DestructiveProjecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectile({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst GaseousDestructiveProjecting = superclass => class extends superclass {\n  constructor({owner_id = null, path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS_DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n    this.owner_id = owner_id;\n  }\n\n  canAttack (entity) {\n    let success = super.canAttack();\n    if (success) {\n      success = this.owner_id === null || (entity.owner_id !== this.owner_id);\n    }\n    return success\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectileGas({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst Gaseous = superclass => class extends superclass {\n  constructor({\n    isClone = false,\n    cloneCount = 0,\n    clonePattern = Constant.CLONE_PATTERNS.square,\n    ...args\n  }) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS')\n    this.isClone = isClone;\n    this.cloneCount = cloneCount;\n    this.clonePattern = cloneDeep(clonePattern);\n  }\n\n  getAction (game) {\n    let offset = this.clonePattern.positions.find((pos) => !pos.taken);\n    if (!this.isClone && offset) {\n      offset.taken = true\n      let clone = cloneDeepWith(this, (value, key) => {\n        switch (key) {\n          case 'id':\n          case 'game':\n          case 'engine':\n          case 'clones':\n            return null\n            break;\n          default:\n            return undefined\n            break;\n        }\n      });\n      clone.game = game;\n      clone.id = uuid();\n      if (this.hasOwnProperty('pos')) {\n        let referencePos = this.pos\n        clone.pos = {\n          x: referencePos.x + offset.x,\n          y: referencePos.y + offset.y\n        }\n      }\n      if (clone.hasOwnProperty('path')) {\n        clone.path = clone.path.map((pos) => {\n          return {\n            x: pos.x + offset.x,\n            y: pos.y + offset.y\n          }\n        })\n      }\n      clone.isClone = true\n      this.cloneCount += 1\n      game.addActor(clone);\n    }\n\n    let result = super.getAction(game);\n    return result;\n  }\n}\n\nconst Chasing = superclass => class extends superclass {\n  constructor({targetEntity = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHASING')\n    this.targetEntity = targetEntity;\n  }\n\n  getAction(game) {\n    let path = Helper.calculatePath(game, this.targetEntity.pos, this.pos);\n    let targetPos = path.length > 0 ? path[0] : this.pos;\n\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    return result;\n  }\n}\n\nconst Destructable = superclass => class extends superclass {\n  constructor({durability = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DESTRUCTABLE')\n    this.durability = durability;\n  }\n\n  decreaseDurability (value) {\n    this.durability -= value\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n\n  increaseDurability (value) {\n    this.durability += value\n  }\n\n  destroy () {\n    this.energy = 0;\n    let tile = this.game.map[Helper.coordsToString(this.pos)];\n    this.game.map[Helper.coordsToString(this.pos)].entities = tile.entities.filter((e) => e.id !== this.id);\n    this.game.engine.actors = this.game.engine.actors.filter((e) => e.id !== this.id);\n    this.game.engine.removeStatusEffectByActorId(this.id);\n    // this.game.engine.currentActor = 0;\n    this.game.draw()\n  }\n}\n\nexport const UI_Actor = pipe(\n  Acting, \n  Rendering, \n  Playing, \n  UI\n)(Entity);\n\nexport const Actor = pipe(\n  Acting, \n  Rendering\n)(Entity);\n\nexport const Wall = pipe(\n  Rendering,\n  Destructable,\n)(Entity);\n\nexport const Chaser = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable\n)(Entity);\n\nexport const Bandit = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable,\n  Attacking,\n)(Entity);\n\nexport const Player = pipe(\n  Acting, \n  Rendering, \n  Destructable, \n  Charging, \n  Signing, \n  Containing, \n  Equiping, \n  Attacking, \n  Playing\n)(Entity);\n\nexport const Weapon = pipe(\n  Rendering, \n  Equipable, \n  Attacking\n)(Entity);\n\nexport const DestructiveProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  DestructiveProjecting, \n  Destructable\n)(Entity);\n\nexport const DestructiveCloudProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  GaseousDestructiveProjecting, \n  Destructable, \n  Gaseous\n)(Entity);\n\nexport const DestructiveCloudProjectileV2 = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);","import * as Entity from './entites';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\n\nexport const TYPE = {\n  KUNAI: 'Kunai',\n  SWORD: 'Sword',\n  BARRIER: 'Barrier',\n}\n\nconst createProjectileCloud = ({ \n  engine, \n  actor, \n  targetPos, \n  throwDirection,\n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: actor.pos.x + slot.x + (throwDirection.x * structure.x_offset),\n      y: actor.pos.y + slot.y + (throwDirection.y * structure.y_offset)\n    }\n\n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nexport const kunaiCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: kunai,\n})\n\nexport const fireballCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: fireball,\n})\n\nexport const kunai = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '🗡️',\n    color: 'white',\n    background: '',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const sandShuriken = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireball = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '🔥',\n    color: 'wheat',\n    background: 'tomato',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireballGas = (engine, actor, targetPos) => {\n  return new Entity.DestructiveCloudProjectile({\n    game: engine.game,\n    owner_id: actor ? actor.id : null,\n    targetPos,\n    passable: true,\n    pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n    renderer: {\n      // character: '@',\n      character: '🔥',\n      color: 'wheat',\n      background: 'tomato',\n    },\n    name: TYPE.KUNAI,\n    speed: 100,\n    range: 10,\n    clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n    // clonePattern: Constant.CLONE_PATTERNS.square,\n  })\n}\n\nexport const waterball = (engine, actor, targetPos) => new Entity.DestructiveCloudProjectile({\n  game: engine.game,\n  owner_id: actor ? actor.id : null,\n  targetPos,\n  passable: true,\n  pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n  renderer: {\n    // character: '~',\n    character: '🌊',\n    color: 'silver',\n    background: 'lightslategrey',\n  },\n  name: TYPE.KUNAI,\n  speed: 800,\n  range: 10,\n  clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n  // clonePattern: Constant.CLONE_PATTERNS.square,\n})\n\nexport const sword = (engine) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: '',\n  },\n})","import * as Constant from './constants';\nimport * as Action from './actions';\nimport * as Helper from '../helper';\nimport * as Entity from './entites';\nimport * as Item from './items';\n\n/******************** Helper ********************/\nconst addAlphabeticallyToKeymap = (keymap, obj) => {\n  let alphabetAllowed = Constant.ALPHABET.filter((letter) => {\n    return !Object.keys(keymap).includes(letter);\n  });\n  keymap[alphabetAllowed[0]] = obj;\n}\n\n/******************** UI ********************/\nconst moveCursor = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Action.CursorMove({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}\n\nconst throwKunai = (engine, actor) => {\n  let cursor = engine.actors[engine.currentActor];\n  cursor.active = false;\n  let throwDirection = {\n    x: Math.sign(cursor.pos.x - actor.pos.x),\n    y: Math.sign(cursor.pos.y - actor.pos.y),\n  }\n  engine.game.removeActor(cursor);\n  let kunai = actor.contains(Item.TYPE.KUNAI);\n  if (kunai) {\n    kunai.game = engine.game;\n    kunai.pos = { \n      x: actor.pos.x + throwDirection.x,  \n      y: actor.pos.y + throwDirection.y,  \n    };\n    kunai.targetPos = { ...cursor.pos };\n    actor.removeFromContainer(kunai);\n    engine.actors.push(kunai);\n    kunai.createPath(engine.game);\n    engine.game.placeActorsOnMap();\n    engine.game.draw();\n    actor.setNextAction(\n      new Action.Say({\n        message: `I'll get you with this kunai!`,\n        game: engine.game,\n        actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    )\n  } else {\n    console.log('I have no kunais left');\n  }\n}\n\nconst throwKunaiCloud = (engine, actor) => {\n  let cursor = engine.actors[engine.currentActor];\n  cursor.active = false;\n  let throwDirection = {\n    x: Math.sign(cursor.pos.x - actor.pos.x),\n    y: Math.sign(cursor.pos.y - actor.pos.y),\n  }\n  engine.game.removeActor(cursor);\n  let cloud = Item.fireballCloud({\n  // let cloud = Item.kunaiCloud({\n    engine, \n    actor, \n    targetPos: {...cursor.pos},\n    throwDirection,\n  });\n  if (cloud) {\n    cloud.pos = { \n      x: actor.pos.x + throwDirection.x,  \n      y: actor.pos.y + throwDirection.y,  \n    };\n    engine.actors.push(cloud);\n    actor.setNextAction(\n      new Action.Say({\n        message: `I'll get you with these kunai!`,\n        game: engine.game,\n        actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    )\n  } else {\n    console.log('I have no kunais left');\n  }\n}\n\nexport const keymapCursorToThrowItem = (engine, initiatedBy) => {\n  return {\n    w: {\n      activate: () => moveCursor(Constant.DIRECTIONS.N, engine),\n      label: 'move',\n    },\n    d: {\n      activate: () => moveCursor(Constant.DIRECTIONS.E, engine),\n      label: 'move',\n    },\n    s: {\n      activate: () => moveCursor(Constant.DIRECTIONS.S, engine),\n      label: 'move',\n    },\n    a: {\n      activate: () => moveCursor(Constant.DIRECTIONS.W, engine),\n      label: 'move',\n    },\n    t: {\n      activate: () => throwKunaiCloud(engine, initiatedBy),\n      label: 'Throw Cloud',\n    },\n    y: {\n      activate: () => throwKunai(engine, initiatedBy),\n      label: 'Throw Kunai',\n    },\n  };\n}\n\nconst closeInventory = (engine) => {\n  let currentUiActor = engine.actors[engine.currentActor];\n  engine.game.removeActor(currentUiActor);\n  engine.currentActor = engine.actors.length - 1;\n  engine.game.visibleInventory = null;\n}\n\nconst closeEquipment = (engine) => {\n  let currentUiActor = engine.actors[engine.currentActor];\n  engine.game.removeActor(currentUiActor);\n  engine.currentActor = engine.actors.length - 1;\n  engine.game.visibleEquipment = null;\n}\n\nexport const keymapEquipment = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      activate: () => closeEquipment(engine),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.equipment.filter((slot) => slot.item).map((slot) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to unequip ${slot.item.name}`);\n      initiatedBy.setNextAction(new Action.UnequipItem({\n        item: slot.item,\n        game: engine.game,\n        actor: initiatedBy,\n      }))\n      closeEquipment(engine);\n    }\n    obj['label'] = `Unequip ${slot.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const keymapEquipFromInventory = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n    // e: {\n      activate: () => closeInventory(engine),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.container.map((item, index) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to equip ${item.name}`);\n      initiatedBy.setNextAction(new Action.EquipItemFromContainer({\n        item,\n        game: engine.game,\n        actor: initiatedBy,\n      }))\n      closeInventory(engine);\n    }\n    obj['label'] = `Equip ${item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const keymapDropFromInventory = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n    // g: {\n      activate: () => closeInventory(engine),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.container.map((item, index) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to drop ${item.name}`);\n      initiatedBy.setNextAction(new Action.DropItem({\n        item,\n        game: engine.game,\n        actor: initiatedBy,\n        energyCost: Constant.ENERGY_THRESHOLD\n      }));\n      closeInventory(engine);\n    }\n    obj['label'] = `Drop ${item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\n/******************** PLAYER ********************/\n\nexport const walk = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Action.Move({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}\n\nexport const tackle = (direction, stepCount, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Action.MoveMultiple({\n    direction,\n    stepCount,\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}\n\nexport const sign = (sign, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Action.Sign({\n    sign,\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}\n\nexport const signRelease = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Action.SignRelease({\n    requiredSequence: [\n      Constant.HAND_SIGNS.Power,\n      Constant.HAND_SIGNS.Healing,\n    ],\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}\n\nexport const charge = (engine, chargeAmount) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Action.Charge({\n    chargeAmount,\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}\n\nexport const release = (engine, chargeCost) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Action.Release({\n    chargeCost,\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}\n\nexport const pickupRandom = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let entities = engine.game.map[Helper.coordsToString(actor.pos)].entities.filter((e) => e.id !== actor.id);\n  if (entities.length > 0) {\n    actor.setNextAction(new Action.PickupItem({\n      item: Helper.getRandomInArray(entities),\n      game: engine.game,\n      actor,\n      energyCost: Constant.ENERGY_THRESHOLD\n    }))\n  } else {\n    console.log('nothing to pickup.');\n  }\n}\n\nexport const die = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.destroy();\n}\n\nexport const cloneSelf = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Action.CloneSelf({\n    game: engine.game,\n    actor,\n  }))\n}\n\nexport const addActor = (game) => {\n  let targetEntity = game.engine.actors[game.engine.currentActor]\n  let pos = Helper.getRandomPos(game.map).coordinates\n\n  let actor = new Entity.Bandit({\n    targetEntity,\n    pos,\n    renderer: {\n      character: Helper.getRandomInArray(['◉', '⛨']),\n      color: 'white',\n      background: '',\n    },\n    name: 'Ross',\n    game,\n    actions: [],\n    durability: Helper.getRandomInArray([1, 2, 4, 8]),\n    speed: 100,\n  })\n  game.addActor(actor);\n}\n\nexport const activateThrowCursor = (engine) => {\n  let game = engine.game;\n  let currentActor = game.engine.actors[game.engine.currentActor]\n  let pos = currentActor.pos;\n\n  let cursor = new Entity.UI_Actor({\n    initiatedBy: currentActor,\n    pos,\n    renderer: {\n      character: '█',\n      color: 'white',\n      background: '',\n    },\n    name: 'Cursor',\n    game,\n    keymap: keymapCursorToThrowItem(engine, currentActor),\n  })\n  game.addActor(cursor);\n  game.engine.currentActor = game.engine.actors.length - 1\n}\n\nexport const activateInventory = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleInventory = currentActor.container; \n\n  let ui = new Entity.UI_Actor({\n    initiatedBy: currentActor,\n    pos: {...currentActor.pos},\n    renderer: {\n      character: 'I',\n      color: 'white',\n      background: '',\n    },\n    name: 'Inventory',\n    game: engine.game,\n    // keymap: keymapEquipFromInventory(engine, currentActor),\n  })\n  engine.game.addActor(ui);\n  engine.currentActor = engine.actors.length - 1\n  ui.keymap = keymapEquipFromInventory(engine, currentActor);\n}\n\nexport const activateEquipment = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleEquipment = currentActor.equipment; \n\n  let ui = new Entity.UI_Actor({\n    initiatedBy: currentActor,\n    pos: {...currentActor.pos},\n    renderer: {\n      character: 'E',\n      color: 'white',\n      background: '',\n    },\n    name: 'Equipment',\n    game: engine.game,\n  })\n  engine.game.addActor(ui);\n  engine.currentActor = engine.actors.length - 1\n  ui.keymap = keymapEquipment(engine, currentActor);\n}\n\nexport const activateDrop = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleInventory = currentActor.container; \n\n  let ui = new Entity.UI_Actor({\n    initiatedBy: currentActor,\n    pos: {...currentActor.pos},\n    renderer: {\n      character: 'D',\n      color: 'white',\n      background: '',\n    },\n    name: 'Drop',\n    game: engine.game,\n  })\n  engine.game.addActor(ui);\n  engine.currentActor = engine.actors.length - 1\n  ui.keymap = keymapDropFromInventory(engine, currentActor);\n}\n\nexport const player = (engine) => {\n  return {\n    w: {\n      activate: () => walk(Constant.DIRECTIONS.N, engine),\n      label: 'walk',\n    },\n    d: {\n      activate: () => walk(Constant.DIRECTIONS.E, engine),\n      label: 'walk',\n    },\n    s: {\n      activate: () => walk(Constant.DIRECTIONS.S, engine),\n      label: 'walk',\n    },\n    a: {\n      activate: () => walk(Constant.DIRECTIONS.W, engine),\n      label: 'walk',\n    },\n    i: {\n      activate: () => activateInventory(engine),\n      label: 'Open Inventory',\n    },\n    q: {\n      activate: () => activateEquipment(engine),\n      label: 'Open Equipment',\n    },\n    k: {\n      activate: () => cloneSelf(engine),\n      label: 'Clone Self',\n    },\n    g: {\n      activate: () => activateDrop(engine),\n      label: 'Drop Item',\n    },\n    p: {\n      activate: () => pickupRandom(engine),\n      label: 'Pickup',\n    },\n    t: {\n      activate: () => activateThrowCursor(engine),\n      label: 'Throw',\n    },\n    y: {\n      activate: () => addActor(engine.game),\n      label: 'Add NPC',\n    },\n    c: {\n      activate: () => charge(engine, 1),\n      label: 'Charge',\n    },\n    '1': {\n      activate: () => sign(Constant.HAND_SIGNS.Power, engine),\n      label: 'Sign - Power',\n    },\n    '2': {\n      activate: () => sign(Constant.HAND_SIGNS.Healing, engine),\n      label: 'Sign - Healing',\n    },\n    '3': {\n      activate: () => sign(Constant.HAND_SIGNS.Absolute, engine),\n      label: 'Sign - Absolution',\n    },\n    '4': {\n      activate: () => {\n        let actor = engine.actors[engine.currentActor];\n        actor.setNextAction(new Action.SayManyThings({\n          game: engine.game,\n          actor,\n          messages: ['I say one thing.', 'then another.'],\n        }))\n      },\n      label: 'Talk',\n    },\n    r: {\n      activate: () => signRelease(engine),\n      label: 'Release',\n    },\n  };\n}\n","// import deps\nimport * as Keymap from '../keymaps';\nimport * as Item from '../items';\nimport * as Entity from '../entites';\nimport * as Constant from '../constants';\nimport * as Action from '../actions';\n\n// create class\nexport default function (engine) {\n  const createSandWall = (engine, pos) => new Entity.Wall({\n    game: engine.game,\n    passable: false,\n    pos: { x: pos.x, y: pos.y },\n    renderer: {\n      // character: '>',\n      character: '✦️',\n      color: '#A89078',\n      background: '#D8C0A8',\n    },\n    name: Item.TYPE.BARRIER,\n    durability: 3,\n  })\n\n  const sandWall = (direction, engine) => {\n    let actor = engine.actors[engine.currentActor];\n    let targetPositions = [];\n    let directionKey = Constant.getDirectionKey(direction);\n    switch (directionKey) {\n      case 'N':\n        targetPositions = targetPositions.concat([\n          {\n            x: actor.pos.x - 1,\n            y: actor.pos.y - 1,\n          },\n          {\n            x: actor.pos.x,\n            y: actor.pos.y - 1,\n          },\n          {\n            x: actor.pos.x + 1,\n            y: actor.pos.y - 1,\n          },\n        ]);\n        break;\n      case 'S':\n        targetPositions = targetPositions.concat([\n          {\n            x: actor.pos.x - 1,\n            y: actor.pos.y + 1,\n          },\n          {\n            x: actor.pos.x,\n            y: actor.pos.y + 1,\n          },\n          {\n            x: actor.pos.x + 1,\n            y: actor.pos.y + 1,\n          },\n        ]);\n        break;\n      case 'E':\n        targetPositions = targetPositions.concat([\n          {\n            x: actor.pos.x + 1,\n            y: actor.pos.y - 1,\n          },\n          {\n            x: actor.pos.x + 1,\n            y: actor.pos.y,\n          },\n          {\n            x: actor.pos.x + 1,\n            y: actor.pos.y + 1,\n          },\n        ]);\n        break;\n      case 'W':\n        targetPositions = targetPositions.concat([\n          {\n            x: actor.pos.x - 1,\n            y: actor.pos.y - 1,\n          },\n          {\n            x: actor.pos.x - 1,\n            y: actor.pos.y,\n          },\n          {\n            x: actor.pos.x - 1,\n            y: actor.pos.y + 1,\n          },\n        ]);\n        break;\n      default:\n        break;\n    }\n    actor.setNextAction(new Action.PlaceItems({\n      targetPositions,\n      entity: createSandWall(engine, { ...actor.pos }),\n      game: engine.game,\n      actor,\n      energyCost: Constant.ENERGY_THRESHOLD\n    }))\n  }\n\n  const keymapSandWall = (engine, initiatedBy, previousKeymap) => {\n    const goToPreviousKeymap = () => initiatedBy.keymap = previousKeymap;\n    return {\n      Escape: {\n        activate: goToPreviousKeymap,\n        label: 'Close',\n      },\n      w: {\n        activate: () => {\n          sandWall(Constant.DIRECTIONS.N, engine);\n          goToPreviousKeymap();\n        },\n        label: 'activate N',\n      },\n      d: {\n        activate: () => {\n          sandWall(Constant.DIRECTIONS.E, engine);\n          goToPreviousKeymap();\n        },\n        label: 'activate E',\n      },\n      s: {\n        activate: () => {\n          sandWall(Constant.DIRECTIONS.S, engine);\n          goToPreviousKeymap();\n        },\n        label: 'activate S',\n      },\n      a: {\n        activate: () => {\n          sandWall(Constant.DIRECTIONS.W, engine);\n          goToPreviousKeymap();\n        },\n        label: 'activate W',\n      },\n    };\n  }\n\n  const activateSandWall = (engine) => {\n    let currentActor = engine.actors[engine.currentActor]\n    currentActor.keymap = keymapSandWall(engine, currentActor, { ...currentActor.keymap });\n  }\n\n  // define keymap\n  const keymap = (engine) => {\n    return {\n      w: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.N, engine),\n        label: 'walk',\n      },\n      d: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.E, engine),\n        label: 'walk',\n      },\n      s: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.S, engine),\n        label: 'walk',\n      },\n      a: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.W, engine),\n        label: 'walk',\n      },\n      l: {\n        activate: () => null,\n        label: 'Sand Clone',\n      },\n      k: {\n        activate: () => null,\n        label: 'Sand Tomb',\n      },\n      j: {\n        activate: () => null,\n        label: 'Sand Skin',\n      },\n      h: {\n        activate: () => activateSandWall(engine),\n        label: 'Sand Wall',\n      },\n      o: {\n        activate: () => null,\n        label: 'Sand Volley',\n      },\n      i: {\n        activate: () => Keymap.activateInventory(engine),\n        label: 'Open Inventory',\n      },\n      q: {\n        activate: () => Keymap.activateEquipment(engine),\n        label: 'Open Equipment',\n      },\n      g: {\n        activate: () => Keymap.activateDrop(engine),\n        label: 'Drop Item',\n      },\n      p: {\n        activate: () => Keymap.pickupRandom(engine),\n        label: 'Pickup',\n      },\n      t: {\n        activate: () => Keymap.activateThrowCursor(engine),\n        label: 'Throw',\n      },\n      // DEV KEYS\n      y: {\n        activate: () => Keymap.addActor(engine.game),\n        label: 'Add NPC',\n      },\n    };\n  }\n\n\n  let actor = new Entity.Player({\n    pos: { x: 23, y: 7 },\n    renderer: {\n      character: 'G',\n      color: '#F0D8C0',\n      background: '#603030',\n    },\n    name: 'Gaara',\n    actions: [],\n    speed: 200,\n    durability: 1,\n    keymap: keymap(engine),\n  })\n\n  actor.container = [\n    ...Array(10).fill('').map(() => Item.sandShuriken(engine, { ...actor.pos })),\n  ]\n\n  return actor;\n}\n// export instance","import React from 'react';\nimport { SCREENS } from './constants';\nimport * as Engine from '../engine';\nimport * as Game from '../game';\nimport Equipment from '../UI/Equipment';\nimport Inventory from '../UI/Inventory';\nimport KeymapUI from '../UI/Keymap';\nimport RockLee from '../Characters/RockLee';\nimport NarutoUzumaki from '../Characters/NarutoUzumaki';\nimport Gaara from '../Characters/Gaara';\n\nlet ENGINE = new Engine.Engine({});\n\n// let actor = NarutoUzumaki(ENGINE);\n// let actor = RockLee(ENGINE);\nlet actor = Gaara(ENGINE);\nENGINE.actors.push(actor)\n\nlet game = new Game.Game({ engine: ENGINE })\n\nclass Level extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(game.showUI);\n    \n    this.state = {\n      game: game,\n    };\n    this.presserRef = React.createRef();\n  }\n\n  async componentDidMount() {\n    game.initialize(this.presserRef)\n    game.updateReact = (newGameState) => { this.setState({game: newGameState}) }\n    ENGINE.start()\n  }\n\n  render() {\n    return (\n      <div className=\"Level\">\n        <div className='flow-text'>Chunin Exams</div>\n        <button className='btn' onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}>Quit</button>\n        <div className='row'>\n          <Equipment equipment={this.state.game.visibleEquipment} />\n          <Inventory inventory={this.state.game.visibleInventory} />\n          <KeymapUI keymap={this.state.game.visibleKeymap} />\n          {Game.DisplayElement(this.presserRef, Game.handleKeyPress, ENGINE)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Level;\n","import React from 'react';\nimport { SCREENS } from './constants';\n\nclass Title extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"Title\">\n        <div\n          style={{\n            width: '100vw',\n            height: '100vh',\n            backgroundColor: '#e2e2e2',\n          }}\n        >\n          <div class='flow-text'>Hidden Leaf RL</div>\n          <button class='btn' onClick={() => this.props.setActiveScreen(SCREENS.LEVEL)}>Play</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Title;","import React from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport { SCREENS } from './Screen/constants';\nimport Level from './Screen/Level';\nimport Title from './Screen/Title';\n\nclass Nystrum extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      activeScreen: SCREENS.LEVEL,\n    };\n  }\n\n  setActiveScreen (activeScreen) {\n    this.setState({activeScreen})\n  }\n\n  getActiveScreen () {\n    const titleScreen = <Title \n      key={SCREENS.TITLE} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n    />\n    const levelScreen = <Level \n      key={SCREENS.LEVEL} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n    />\n\n    switch (this.state.activeScreen) {\n      case SCREENS.TITLE:\n        return titleScreen\n      case SCREENS.LEVEL:\n        return levelScreen\n      default:\n        return titleScreen\n    }\n  }\n\n  render() {\n    const activeScreen = this.getActiveScreen();\n    return (\n      <div className=\"Nystrum\">\n        <ReactCSSTransitionGroup\n          transitionName=\"fade\"\n          transitionAppear={true}\n          transitionEnter={true}\n          transitionLeave={true}\n          transitionAppearTimeout={500}\n          transitionEnterTimeout={500}\n          transitionLeaveTimeout={300}\n        >\n          { activeScreen }\n        </ReactCSSTransitionGroup>\n      </div>\n    );\n  }\n}\n\nexport default Nystrum;\n","import * as ROT from 'rot-js';\n\nexport const TILE_KEY = () => {\n  return {\n    'GROUND': {\n      background: '#974',\n      foreground: '#aaa',\n      character: '.',\n      passable: true,\n    }\n  }\n}\n\n// RENDERING\n\nexport const DRAW = (map, display) => {\n  for (let key in map) {\n    let parts = key.split(\",\");\n    let x = parseInt(parts[0]);\n    let y = parseInt(parts[1]);\n    let tile = map[key];\n    let { character, foreground, background } = TILE_KEY()[tile.type]\n    if (tile.entities.length > 0) {\n      let entity = tile.entities[tile.entities.length - 1]\n      character = entity.components.renderer.character\n      foreground = entity.components.renderer.color\n      if (entity.components.renderer.background) {\n        background = entity.components.renderer.background\n      }\n    }\n    display.draw(x, y, character, foreground, background);\n  }\n}\n\n// END RENDERING\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const getImpassableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('impasse') && !e.components.impasse.passable)\n}\n\nexport const getDestructableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('destructible'))\n}\n\nexport const delay = (timeDelayed = 100) => {\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const exampleEngine = () => {\n  let scheduler = new ROT.Scheduler.Simple();\n  let engine = new ROT.Engine(scheduler);\n  let output = [];\n  /* sample actor: pauses the execution when dead */\n  let actor = {\n    lives: 3,\n    act: function () {\n      let done = null;\n      let promise = {\n        then: function (cb) { done = cb; }\n      }\n\n      output.push(\".\");\n      // SHOW(output.join(\"\"));\n      console.log(output.join(\"\"));\n\n      this.lives--;\n\n      /* if alive, wait for 500ms for next turn */\n      if (this.lives) {\n        setTimeout(function () { done(); }, 500);\n      }\n\n      return promise;\n    }\n  }\n  scheduler.add(actor, true);\n  engine.start();\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}","import * as Helper from '../lib/helper';\n\nexport const createEntity = (id = null, name = 'Empty', components = {}, world) => {\n  let entity = {\n    id,\n    name,\n    components,\n    world,\n    sendEvent: (target, eventType, parameters) => sendEvent(target, eventType, parameters, world),\n  };\n  return entity\n}\n\nexport const sendEvent = async (target = null, eventType = null, parameters = null, world = null) => {\n  let success = false;\n  for (let key in target.components) {\n    let component = target.components[key]\n    if (component.hasOwnProperty(eventType)) {\n      console.log('SUCCESSFUL EVENT: ', eventType)\n      success = true\n      if (eventType !== 'PREPARE_RENDER') {\n        await Helper.delay();\n      }\n      component[eventType]({ ...parameters, self: target, component: component });\n      Helper.DRAW(world.map, world.display)\n    }\n  }\n  if (!success) {\n    console.log('FAILED EVENT')\n  }\n};","import * as Helper from '../lib/helper';\n\nexport const receiver = (pos) => {\n  return {\n    responded: false,\n    RECIEVE: (parameters) => {\n      let { self, component, message } = parameters\n      console.log(message, pos.x, pos.y)\n      if (!component.responded) {\n        component.responded = true\n        self.sendEvent(parameters.sender, 'hello', 'RECIEVE', { message: 'copy', sender: self })\n      }\n    }\n  }\n}\n\nexport const impasse = (passable = false) => {\n  return {\n    passable,\n    MAKE_PASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = true;\n    },\n    MAKE_IMPASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = false;\n    }\n  }\n}\n\nexport const body = (world, pos = { x: 0, y: 0 }) => {\n  if (world) {\n    return {\n      pos,\n      MOVE: (parameters) => {\n        let { self, component, currentPos, targetPos } = parameters\n        if (world.canOccupy(world.map, targetPos)) {\n          component.pos = targetPos\n          let tile = world.map[Helper.coordsToString(currentPos)]\n          world.map[Helper.coordsToString(currentPos)] = {...tile, entities: []}\n          self.sendEvent(self, 'PREPARE_RENDER')\n          // Helper.DRAW(world.map, world.display)\n        } else {\n          console.log('can\\'t move there')\n        }\n      }\n    }\n  }\n  console.log('No world to occupy');\n  return {}\n}\n\nexport const destructible = (world, durability = 1) => {\n  return {\n    durability,\n    DECREASE_DURABILITY: (parameters) => {\n      let { self, component, value } = parameters;\n      component.durability -= value\n      if (component.durability <= 0) {\n        self.sendEvent(self, 'DESTROY')\n      }\n    },\n    INCREASE_DURABILITY: (parameters) => {\n      let { component, value } = parameters;\n      component.durability += value\n    },\n    DESTROY: (parameters) => {\n      let { self, component, value } = parameters;\n      let tile = world.map[Helper.coordsToString(self.components.body.pos)];\n      world.map[Helper.coordsToString(self.components.body.pos)].entities = tile.entities.filter((e) => e.id !== self.id);\n      // self.sendEvent(self, 'PREPARE_RENDER')\n      // Helper.DRAW(world.map, world.display)\n    }\n  }\n}\n\nexport const attack = (damage = 1) => {\n  return {\n    damage,\n  }\n}\n\nexport const throwable = (world) => {\n  return {\n    THROW: (parameters) => {\n      let { self, component, direction } = parameters;\n      // if next tile is passable\n        // send move action to self\n        // send throw action to self\n      // else\n        // send decrease_durability to entity next in tile\n        // send decrease_durability to self\n      let currentPos = self.components.body.pos;\n      let nextPos = { x: currentPos.x + direction.x, y: currentPos.y + direction.y }\n      let nextTile = world.map[Helper.coordsToString(nextPos)];\n      if (world.canOccupy(world.map, nextPos)) { // change to check for target entity\n        self.sendEvent(\n          self, 'MOVE', {\n            currentPos: currentPos,\n            targetPos: nextPos\n          }\n        )\n        self.sendEvent(self, 'THROW', {direction});\n      } else {\n        if (world.map.hasOwnProperty(Helper.coordsToString(nextPos))) {\n          let impassable_and_destructable_entities = Helper.getDestructableEntities(Helper.getImpassableEntities(nextTile.entities))\n          if (impassable_and_destructable_entities.length > 0) {\n            self.sendEvent(impassable_and_destructable_entities[0], 'DECREASE_DURABILITY', { value: 1 });\n          }\n        }\n        self.sendEvent(self, 'DECREASE_DURABILITY', { value: 1 });\n      }\n    },\n  }\n}\n\nexport const renderer = (world, character = '', color = 'white', background = false) => {\n  return {\n    character,\n    color,\n    background,\n    PREPARE_RENDER: (parameters) => {\n      let { self } = parameters\n      if (self.components.hasOwnProperty('body')) {\n        world.map[Helper.coordsToString(self.components.body.pos)].entities.push(self)\n      }\n    }\n  }\n}","import React from 'react';\nimport '../App.css';\nimport * as ROT from 'rot-js';\nimport * as Entity from './lib/entity'\nimport * as Helper from './lib/helper'\nimport * as Components from './components/index'\n\nconst SHOW = (canvas) => {\n  let d = document.getElementById('display')\n  d.appendChild(canvas)\n}\n\nconst CREATE_LEVEL = (world) => {\n  let digger = new ROT.Map.Arena();\n  let freeCells = [];\n  let digCallback = function (x, y, value) {\n    if (value) { return; }\n    let key = x + \",\" + y;\n    world.map[key] = {\n      type: 'GROUND',\n      entities: [],\n    };\n    freeCells.push(key);\n  }\n  digger.create(digCallback.bind(this));\n}\n\nlet scheduler = new ROT.Scheduler.Simple()\nlet engine = new ROT.Engine(scheduler)\n\nlet world = {\n  canAct: true,\n  scheduler,\n  engine,\n  map: {},\n  display: new ROT.Display({ fontSize: 24, bg: '#099' }),\n  canOccupy: (map, pos) => {\n    if (map.hasOwnProperty(Helper.coordsToString(pos))) {\n      let tile = map[Helper.coordsToString(pos)];\n      if (Helper.TILE_KEY()[tile.type].passable && Helper.getImpassableEntities(tile.entities).length === 0) {\n        return true\n      }\n    } else {\n      return false\n    }\n  },\n}\n\nlet naruto = {\n  ...Entity.createEntity(1, 'Naruto', {\n    reciever: Components.receiver({ x: 10, y: 30 }),\n    body: Components.body(world, { x: 19, y: 21 }),\n    renderer: Components.renderer(world, 'N', 'orange', 'black'),\n  },\n    world,\n  ),\n}\n\nlet box = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 21 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box2 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 19 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box3 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 17 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet kunai = {\n  ...Entity.createEntity(3, 'Kunai', {\n    body: Components.body(world, { x: 20, y: 21 }),\n    renderer: Components.renderer(world, '<>', 'black'),\n    destructible: Components.destructible(world),\n    attack: Components.attack(),\n    throwable: Components.throwable(world),\n  },\n    world,\n  )\n}\n\nclass Original extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.presserRef = React.createRef();\n  }\n\n  handleKeyPress = (event, world, entity) => {\n    let keymap = {\n      w: 0,\n      d: 1,\n      s: 2,\n      a: 3,\n    };\n\n    let code = event.key;\n    let dir = ROT.DIRS[4][keymap[code]];\n    if (code === 't') {\n      kunai.sendEvent(kunai, 'MOVE', {\n        currentPos: kunai.components.body.pos,\n        targetPos: {\n          x: entity.components.body.pos.x + 1,\n          y: entity.components.body.pos.y,\n        },\n      })\n      return kunai.sendEvent(kunai, 'THROW', { direction: { x: 1, y: 0 } })\n    }\n    if (!(code in keymap)) { return; }\n    let newX = entity.components.body.pos.x + dir[0];\n    let newY = entity.components.body.pos.y + dir[1];\n\n    entity.sendEvent(\n      entity, 'MOVE', {\n        currentPos: entity.components.body.pos,\n        targetPos: {\n          x: newX,\n          y: newY\n        }\n      }\n    )\n\n    return;\n    // return Helper.DRAW(world.map, world.display)\n\n  }\n\n  componentDidMount() {\n    ROT.RNG.setSeed(7);\n    SHOW(world.display.getContainer());\n    CREATE_LEVEL(world);\n    naruto.sendEvent(naruto, 'PREPARE_RENDER')\n    // kunai.sendEvent(kunai, 'PREPARE_RENDER')\n    box.sendEvent(box, 'PREPARE_RENDER')\n    box2.sendEvent(box2, 'PREPARE_RENDER')\n    box3.sendEvent(box3, 'PREPARE_RENDER')\n    Helper.DRAW(world.map, world.display)\n    this.presserRef.current.focus();\n  }\n\n  render() {\n    return (\n      <div className=\"App\" ref={this.presserRef} onKeyDown={(event) => this.handleKeyPress(event, world, naruto)} tabIndex='0'>\n        <div id='display'></div>\n      </div>\n    );\n  }\n}\n\nexport default Original;\n","import React from 'react';\nimport './App.css';\nimport Nystrum from './nystrum/Nystrum';\nimport Original from './original/Original';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <Nystrum />\n        {/* <Original /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}