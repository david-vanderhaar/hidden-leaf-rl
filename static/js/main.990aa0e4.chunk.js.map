{"version":3,"sources":["nystrum/Screen/constants.js","helper.js","nystrum/Entities/helper.js","nystrum/constants.js","nystrum/actions.js","nystrum/entites.js","nystrum/engine.js","nystrum/Keymap/KeyActions/addActor.js","nystrum/game.js","nystrum/UI/Button.js","nystrum/UI/Information.js","nystrum/UI/Equipment.js","nystrum/UI/Inventory.js","nystrum/UI/Keymap.js","nystrum/items.js","nystrum/Keymap/helper.js","nystrum/Keymap/KeyActions/activateDropItem.js","nystrum/Keymap/KeyActions/activateEquipment.js","nystrum/Keymap/KeyActions/activateInventory.js","nystrum/Keymap/KeyActions/moveCursor.js","nystrum/Keymap/KeyActions/activateThrow.js","nystrum/Keymap/KeyActions/walk.js","nystrum/Keymap/KeyActions/pickupRandom.js","nystrum/Keymap/KeyActions/activateFlyingLotus.js","nystrum/statusEffects.js","nystrum/Keymap/KeyActions/drunkenFist.js","nystrum/Characters/RockLee.js","nystrum/Keymap/KeyActions/removeWeights.js","nystrum/Keymap/KeyActions/leafWhirlwind.js","nystrum/Keymap/KeyActions/openInnerGate.js","nystrum/Characters/Gaara.js","nystrum/Screen/Level.js","nystrum/Screen/Title.js","nystrum/Nystrum.js","original/lib/helper.js","original/lib/entity.js","original/components/index.js","original/Original.js","App.js","serviceWorker.js","index.js"],"names":["SCREENS","TITLE","LEVEL","delay","timeDelayed","Promise","resolve","setTimeout","getRandomInArray","array","Math","floor","random","length","coordsToString","coords","x","y","calculatePath","game","targetPos","currentPos","topology","map","isPassable","type","astar","ROT","AStar","path","compute","push","slice","calculatePathWithRange","range","getRandomPos","keys","Object","key","split","coordinates","parseInt","text","getDestructableEntities","entites","filter","entity","hasOwnProperty","getGranularity","radius","pow","getPointsOnCircumference","centerX","centerY","r","n","list","i","round","cos","PI","sin","destroyEntity","energy","pos","tile","Helper","entities","e","id","engine","actors","removeStatusEffectByActorId","draw","currentActor","TILE_KEY","background","character","passable","animation","foreground","DIRECTIONS","N","S","E","W","EQUIPMENT_TYPES","HEAD","TORSO","BACK","HAND","FEET","EQUIPMENT_LAYOUTS","human","name","item","CLONE_PATTERNS","verticalLine","x_offset","y_offset","positions","taken","smallSquare","square","bigSquare","circle","PARTICLE_TEMPLATES","default","renderer","color","fail","leaf","PARTICLE_TYPE","directional","ALPHABET","Base","actor","energyCost","processDelay","particles","particleTemplate","Constant","this","life","direction","particle","Particle","console","log","success","alternative","AddStatusEffect","effect","args","addStatusEffect","forEach","addParticle","sign","Say","message","EquipItemFromContainer","equipmentType","itemInSlot","getItemInSlot","addToContainer","unequip","removeFromContainer","equip","UnequipItem","DropItem","PickupItem","it","DestroySelf","destroy","CursorMove","cursorCanOccupyPosition","Move","move","Action","MoveMultiple","stepCount","setNextAction","Shove","shove","Tackle","additionalAttackDamage","attack","Attack","entityTypes","includes","MultiTargetAttack","targetPositions","particlePath","particlePos","attackSuccess","ThrowProjectile","move_result","shift","ThrowProjectileGas","CrankEngine","start","Entity","uuid","Parent","superclass","children","Engine","concat","isInitialized","child","destroyChild","canAttack","bind","placeActorOnMap","addActor","initialize","Attacking","attackDamage","additional","targets","target","damage","getAttackDamage","equipment","slot","decreaseDurability","Acting","actions","speed","action","value","Rendering","canOccupyPosition","targetTile","newPos","Playing","keymap","nextAction","Chasing","targetEntity","Destructable","durability","onDestroy","UI_Actor","pipe","initiatedBy","active","Bandit","createPath","result","Player","charge","chargeMax","max","min","signHistory","container","itemType","items","slotName","find","foundSlot","currentGate","gates","damageBuff","speedBuff","durabilityDebuff","nextGate","nextGateIndex","findIndex","gate","cloneLimit","clones","clone","index","c","super__destroy","splice","cloneArgs","cloneDeep","destroyClone","arg","attribute","addActorAsNext","DestructiveProjectile","DestructiveCloudProjectileV2","owner_id","isClone","cloneCount","clonePattern","offset","cloneDeepWith","referencePos","step","nextPos","getNextPos","statusEffects","isRunning","gainEnergy","hasEnoughEnergy","getAction","perform","acting","timePassed","processActionFX","processStatusEffects","process","visibleKeymap","updateMode","updateReact","newEffect","allowDuplicates","onStart","onStop","actorId","lifespan","timeToLive","timeSinceLastStep","stepInterval","onStep","removeDeadStatusEffects","actionSuccess","removeActorFromMap","update","removeDeadParticles","randomlyPlaceActorOnMap","GAME_MODE_TYPES","WAVE","Game","display","width","fontSize","bg","tileKey","mode","data","level","addWaveEnemy","nextModeLevel","initializeMode","setModeLevel","kill","placed","ac","digger","Rogue","freeCells","create","currentFrame","ceil","randomlyPlaceAllActorsOnMap","hasImpassableEntity","document","getElementById","appendChild","getContainer","parts","tileRenderer","frame","isPlaced","placeActorsOnMap","presserRef","show","createLevel","current","focus","handleKeyPress","event","code","Button","props","onClick","className","Information","label","React","Component","Equipment","Inventory","inventory","Keymap","entries","TYPE","createProjectileCloud","throwDirection","structureType","createProjectile","structure","position","targetPosition","kunai","fireball","addAlphabeticallyToKeymap","obj","alphabetAllowed","letter","deactivateUIKeymap","visibleUIKey","currentUiActor","removeActor","activateDropItem","visibleInventory","ui","addActorAsPrevious","setActorToPrevious","Escape","activate","keymapDropFromInventory","activateEquipment","visibleEquipment","keymapEquipment","activateInventory","keymapEquipFromInventory","moveCursor","newX","newY","throwKunaiCloud","cursor","cloud","Item","keymapCursorToThrowItem","w","d","s","a","t","contains","throwKunai","activateThrow","walk","pickupRandom","flyingLotus","activateFlyingLotus","previousKeymap","ENERGY_THRESHOLD","goToPreviousKeymap","keymapFlyingLotus","drunkWalk","originalDirection","count","l","k","speedBoost","damageDebuff","StatusEffect","j","h","o","setNextGate","nextGateToLabel","getNextGate","q","g","p","Array","fill","Level","ENGINE","RockLee","state","createRef","newGameState","setState","setActiveScreen","ref","onKeyDown","tabIndex","Title","style","height","backgroundColor","class","Nystrum","activeScreen","titleScreen","levelScreen","getActiveScreen","transitionName","transitionAppear","transitionEnter","transitionLeave","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","DRAW","components","getImpassableEntities","impasse","createEntity","world","sendEvent","eventType","parameters","component","self","MAKE_PASSABLE","MAKE_IMPASSABLE","body","MOVE","canOccupy","destructible","DECREASE_DURABILITY","INCREASE_DURABILITY","DESTROY","PREPARE_RENDER","scheduler","Simple","canAct","naruto","reciever","responded","RECIEVE","sender","Components","box","box2","box3","throwable","THROW","nextTile","impassable_and_destructable_entities","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.990aa0e4.chunk.js","sourcesContent":["export const SCREENS = {\n  TITLE: 0,\n  LEVEL: 1,\n}","import * as ROT from 'rot-js';\n\nexport const delay = (timeDelayed = 100) => {\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport const getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const calculatePath = (game, targetPos, currentPos, topology = 4) => {\n  let map = game.map\n  let isPassable = function (x, y) {\n    if (map[x + \",\" + y]) {\n      return (map[x + \",\" + y].type === 'GROUND');\n    } else {\n      return false\n    }\n  }\n  let astar = new ROT.Path.AStar(targetPos.x, targetPos.y, isPassable, { topology });\n  let path = [];\n  astar.compute(currentPos.x, currentPos.y, function (x, y) {\n    path.push({ x, y })\n  });\n\n  return path.slice(1);\n}\n\nexport const calculatePathWithRange = (game, targetPos, currentPos, topology, range) => {\n  let path = calculatePath(game, targetPos, currentPos, topology);\n  return path.slice(0, range + 1);\n}\n\nexport const getRandomPos = (map) => {\n  let keys = Object.keys(map);\n  let key = getRandomInArray(keys).split(',');\n  let pos = { x: parseInt(key[0]), y: parseInt(key[1])}\n  return {coordinates: pos, text: key}\n}\n\nexport const getDestructableEntities = (entites) => {\n  return entites.filter((entity) => entity.hasOwnProperty('durability'));\n}\n\nconst getGranularity = (radius) => {\n  let result = (2 / 3) * (Math.pow(radius, 3) - (9 * Math.pow(radius, 2)) + (32 * radius) - 18)\n  return result\n}\n\nexport const getPointsOnCircumference = (centerX = 0, centerY = 0, r = 3) => {\n  const n = getGranularity(r);\n  let list = [];\n  for (let i = 0; i < n; i++) {\n    let x = Math.round(centerX + (Math.cos(2 * Math.PI / n * i) * r))\n    let y = Math.round(centerY + (Math.sin(2 * Math.PI / n * i) * r))\n    list.push({ x, y });\n  }\n  return list\n}\n","import * as Helper from '../../helper';\n\nexport const destroyEntity = (entity) => {\n  entity.energy = 0;\n  if (entity.pos) {\n    let tile = entity.game.map[Helper.coordsToString(entity.pos)];\n    entity.game.map[Helper.coordsToString(entity.pos)].entities = tile.entities.filter((e) => e.id !== entity.id);\n  }\n  entity.game.engine.actors = entity.game.engine.actors.filter((e) => e.id !== entity.id);\n  entity.game.engine.removeStatusEffectByActorId(entity.id);\n  entity.game.draw()\n  entity.game.engine.currentActor = entity.game.engine.currentActor % entity.game.engine.actors.length; \n\n}","import * as Helper from '../helper'\n\nexport const ENERGY_THRESHOLD = 100;\n\nexport const TILE_KEY = {\n  'GROUND': {\n    background: '#424242',\n    character: '',\n    passable: true,\n  },\n  'WALL': {\n    background: '#424242',\n    character: '#',\n    passable: false,\n  },\n  'WATER': {\n    animation: [\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#8aa', character: '▒', passable: false, },\n      { background: '#424242', foreground: '#8aa', character: '▓', passable: false, },\n    ],\n    background: '#9dc3d3',\n    character: '░',\n    passable: false,\n  },\n  'WIN': {\n    background: 'white',\n    foreground: 'black',\n    character: 'W',\n    passable: true,\n  }\n}\n\nexport const HAND_SIGNS = {\n  Power: {\n    type: 'Power',\n    name: 'Rin',\n    description: 'Strength of mind, body, spirit',\n  },\n  Energy: {\n    type: 'Energy',\n    name: 'Pyo',\n    description: 'energy direction',\n  },\n  Harmony: {\n    type: 'Harmony',\n    name: 'To',\n    description: 'one- ness with the universe or self',\n  },\n  Healing: {\n    type: 'Healing',\n    name: 'Sha',\n    description: 'of self and others',\n  },\n  Intuition: {\n    type: 'Intuition',\n    name: 'Kai',\n    description: 'premonition of danger, feeling others intent',\n  },\n  Awareness: {\n    type: 'Awareness',\n    name: 'Jin',\n    description: 'feeling thoughts of others, perhaps hiding your own',\n  },\n  Dimension: {\n    type: 'Dimension',\n    name: 'Retsu',\n    description: 'control of time and space',\n  },\n  Creation: {\n    type: 'Creation',\n    name: 'Zai',\n    description: 'understanding nature',\n  },\n  Absolute: {\n    type: 'Absolute',\n    name: 'Zen',\n    description: 'enlightenment',\n  }, \n}\n\nexport const DIRECTIONS = {\n  N: [0, -1],\n  S: [0, 1],\n  E: [1, 0],\n  W: [-1, 0],\n}\n\nexport const getDirectionKey = (direction) => {\n  let directionString = `${direction}`;\n  let keys = Object.keys(DIRECTIONS);\n  let result = false\n  keys.forEach((key) => {\n    if (`${DIRECTIONS[key]}` === directionString) {\n      result = key\n    }\n  })\n  return result\n}\n\nexport const EQUIPMENT_TYPES = {\n  HEAD: 'HEAD',\n  TORSO: 'TORSO',\n  BACK: 'BACK',\n  HAND: 'HAND',\n  FEET: 'FEET',\n}\n\nexport const EQUIPMENT_LAYOUTS = {\n  human: () => {\n    return [\n      {type: EQUIPMENT_TYPES.HEAD, name: 'head', item: null},\n      {type: EQUIPMENT_TYPES.TORSO, name: 'torso', item: null},\n      {type: EQUIPMENT_TYPES.BACK, name: 'back', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'left_hand', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'right_hand', item: null},\n      {type: EQUIPMENT_TYPES.FEET, name: 'feet', item: null},\n    ]\n  }\n}\n\nexport const CLONE_PATTERNS = {\n  verticalLine: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n    ]\n  },\n  smallSquare: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n    ]\n  },\n  square: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n    ]\n  },\n  bigSquare: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 2, y: 2, taken: false, },\n      { x: 2, y: 0, taken: false, },\n      { x: 2, y: -2, taken: false, },\n      { x: 0, y: -2, taken: false, },\n      { x: -2, y: -2, taken: false, },\n      { x: -2, y: 0, taken: false, },\n      { x: -2, y: 2, taken: false, },\n    ],\n  },\n  circle: {\n    x_offset: 0,\n    y_offset: 0,\n    positions: Helper.getPointsOnCircumference(0, 0, 2)\n  },\n}\n\nexport const PARTICLE_TEMPLATES = {\n  default: {\n    renderer: {\n      character: '*',\n      color: 'black',\n      background: 'white',\n    }\n  },\n  fail: {\n    renderer: {\n      character: 'x',\n      color: 'black',\n      background: 'red',\n    }\n  },\n  leaf: {\n    renderer: {\n      character: '✤',\n      color: '#36635b',\n      background: '#F0D8C0',\n    }\n  },\n}\n\nexport const PARTICLE_TYPE = {\n  directional: 0,\n  path: 1,\n}\n\nexport const ALPHABET = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];","import * as Helper from '../helper';\nimport * as Action from './actions';\nimport * as Constant from './constants';\nimport { destroyEntity } from './Entities/helper';\nimport { cloneDeep } from 'lodash';\nimport uuid from 'uuid/v1';\nimport { Particle } from './entites';\n\nexport class Base {\n  constructor({\n    game, \n    actor, \n    energyCost = 100, \n    processDelay = 50, \n    particles = [], \n    particleTemplate = Constant.PARTICLE_TEMPLATES.default,\n  }) {\n    this.actor = actor\n    this.game = game\n    this.energyCost = energyCost\n    this.processDelay = processDelay\n    this.particles = particles\n    this.particleTemplate = particleTemplate\n  }\n\n  addParticle(\n    life, \n    pos, \n    direction, \n    renderer = {...this.particleTemplate.renderer}, \n    type = Constant.PARTICLE_TYPE.directional, \n    path = null\n  ) {\n    let particle = new Particle({\n      game: this.game,\n      name: 'particle',\n      passable: true,\n      life,\n      pos,\n      direction,\n      energy: 100,\n      renderer,\n      type,\n      path,\n    })\n    this.particles.push(particle);\n  }\n\n  removeDeadParticles() {\n    this.particles = this.particles.filter((particle) => particle.life > 0);\n  }\n\n\n  perform() {\n    console.log(`${this.actor.name} performs`)\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n}\n\nexport class AddStatusEffect extends Base {\n  constructor({ effect, processDelay = 0, ...args }) {\n    super({ ...args });\n    this.effect = effect\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = this.game.engine.addStatusEffect(this.effect);\n    let positions = Helper.getPointsOnCircumference(this.actor.pos.x, this.actor.pos.y, 2);\n    positions.forEach((pos) => {\n      this.addParticle(\n        5, \n        {...pos}, \n        {\n          x: Math.sign(pos.x - this.actor.pos.x), \n          y: Math.sign(pos.y - this.actor.pos.y)\n        },\n      )\n    })\n    if (success) this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Say extends Base {\n  constructor({ message, processDelay = 50, ...args}) {\n    super({...args});\n    this.message = message\n    this.processDelay = processDelay\n  }\n  perform() {\n    console.log(`${this.actor.name} says ${this.message}`);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SayManyThings extends Base {\n  constructor({ messages, processDelay = 50, ...args}) {\n    super({...args});\n    this.messages = messages\n    this.processDelay = processDelay\n  }\n  perform() {\n    let message = this.messages.shift();\n    if (message) {\n      console.log(`${this.actor.name} says ${message}`);\n      this.actor.energy -= this.energyCost;\n    }\n    if (this.messages.length) {\n      this.actor.setNextAction(this);\n    }\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class EquipItemFromContainer extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.actor.addToContainer(itemInSlot);\n        this.actor.unequip(itemInSlot);\n      }\n      this.actor.removeFromContainer(this.item);\n      this.actor.equip(this.item.equipmentType, this.item);\n      console.log(`${this.actor.name} equips ${this.item.name}.`);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class EquipItemFromTile extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(itemInSlot);\n      }\n\n      let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n      this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n      \n      this.actor.equip(this.item);\n      console.log(`${this.actor.name} equips ${this.item.name}.`);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class UnequipItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    console.log(`${this.actor.name} puts ${this.item.name} away.`);\n    this.actor.unequip(this.item);\n    this.actor.addToContainer(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DropItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    console.log(`${this.actor.name} drops ${this.item.name}.`);\n    this.actor.removeFromContainer(this.item);\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class PickupItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    console.log(`${this.actor.name} picks up ${this.item.name}.`);\n    this.actor.addToContainer(this.item);\n    let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DestroySelf extends Base {\n  constructor({processDelay = 0, ...args}) {\n    super({...args});\n    this.processDelay = processDelay\n  }\n  perform() {\n    // console.log(`${this.actor.name} is self-destructing`);\n    this.actor.energy -= this.energyCost;\n    this.actor.destroy();\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class CloneSelf extends Base {\n  constructor({cloneArgs = [], ...args}) {\n    super({...args});\n    this.cloneArgs = cloneArgs;\n  }\n\n  perform() {\n    let success = false;\n    if (this.actor.createClone(this.cloneArgs)) {\n      success = true;\n      this.actor.energy -= this.energyCost;\n      console.log(`${this.actor.name} is cloning itself`);\n    }\n    // let clone = cloneDeep(this.actor);\n    // clone.game = this.actor.game;\n    // clone.id = uuid();\n    // this.cloneArgs.forEach((arg) => {\n    //   console.log(arg);\n      \n    //   clone[arg.attribute] = arg.value\n    // });\n    // if (this.game.placeActorOnMap(clone)) {\n    //   this.game.engine.addActorAsNext(clone);\n    //   this.game.draw();\n    //   success = true;\n    // };\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Charge extends Base {\n  constructor({chargeAmount, ...args}) {\n    super({...args});\n    this.chargeAmount = chargeAmount;\n  }\n  perform() {\n    console.log(`${this.actor.name} is charging up!`);\n    this.actor.energy -= this.energyCost;\n    this.actor.increaseCharge(this.chargeAmount);\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class Release extends Base {\n  constructor({ chargeCost, ...args }) {\n    super({ ...args });\n    this.chargeCost = chargeCost;\n  }\n  perform() {\n    let success = false;\n    if (this.actor.charge >= this.chargeCost) {\n      console.log(`${this.actor.name} is releasing ${this.chargeCost} volts!`);\n      this.actor.energy -= this.energyCost;\n      this.actor.decreaseCharge(this.chargeCost);\n      success = true;\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Sign extends Base {\n  constructor({ sign, ...args }) {\n    super({ ...args });\n    this.sign = sign;\n  }\n  perform() {\n    console.log(`${this.actor.name} threw a ${this.sign.name} sign.`);\n    this.actor.addSign(this.sign);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SignRelease extends Base {\n  constructor({requiredSequence = [], ...args}) {\n    super({...args});\n    this.requiredSequence = requiredSequence;\n  }\n\n  requiredSequenceIsFulfilled () {\n    let signHistory = this.actor.signHistory.concat();\n    let relevantHistory = signHistory.slice(\n      Math.max(signHistory.length - this.requiredSequence.length, 0)\n    )\n    let result = JSON.stringify(relevantHistory) === JSON.stringify(this.requiredSequence);\n    return result\n  }\n\n  perform() {\n    let success = false;\n    if (this.requiredSequenceIsFulfilled()) {\n      console.log(\n        `${this.actor.name} is releasing the power of ${this.requiredSequence.map(\n          (sign) => sign.type\n        ).join(' and ')}!`\n      );\n      this.actor.energy -= this.energyCost;\n      success = true;\n      this.actor.clearSigns();\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class CursorMove extends Base {\n  constructor({ targetPos, processDelay = 0, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    if (this.game.cursorCanOccupyPosition(this.targetPos)) {\n      let tile = this.game.map[Helper.coordsToString(this.actor.pos)]\n      this.game.map[Helper.coordsToString(this.actor.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.actor.id) }\n      this.actor.pos = this.targetPos\n      this.game.map[Helper.coordsToString(this.targetPos)].entities.push(this.actor);\n      success = true;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ParticleMove extends CursorMove {\n  constructor({...args}) {\n    super({...args})\n  }\n\n  perform () {\n    this.actor.energy -= this.energyCost;\n    if (this.actor.energy <= 0) {\n      this.actor.destroy();\n      return { success: false }\n    } \n    return super.perform();\n  }\n}\n\nexport class PlaceActor extends Base {\n  constructor({ targetPos, entity, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.entity = entity\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (this.game.canOccupyPosition(this.targetPos, this.entity)) {\n      this.entity.pos = this.targetPos;\n      // this.game.engine.actors.push(this.entity);\n      this.game.engine.addActorAsNext(this.entity);\n      success = true;\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItem extends Base {\n  constructor({ targetPos, entity, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.entity = entity\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (this.game.canOccupyPosition(this.targetPos, this.entity)) {\n      this.entity.pos = this.targetPos;\n      success = this.game.placeActorOnMap(this.entity)\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItems extends PlaceItem {\n  constructor({targetPositions = [], ...args}) {\n    super({...args});\n    this.targetPositions = targetPositions\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    console.log('actor ', this.actor.pos);\n    this.targetPositions.forEach((targetPos) => {\n      console.log('target ', targetPos);\n      \n      if (this.game.canOccupyPosition(targetPos, this.entity)) {\n        let clone = cloneDeep(this.entity);\n        clone.game = this.game;\n        clone.id = uuid();\n        clone.pos = targetPos;\n        let placementSuccess = this.game.placeActorOnMap(clone);\n        if (placementSuccess) success = true;\n      }\n    });\n\n    if (success) this.actor.energy -= this.energyCost;\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Move extends Base {\n  constructor({ targetPos, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class MoveMultiple extends Base {\n  constructor({ direction, stepCount, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.move(targetPos)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Shove extends Base {\n  constructor({ targetPos, direction, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos\n    this.direction = direction\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.shove(this.targetPos, this.direction)\n    \n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Tackle extends MoveMultiple {\n  constructor({ direction, stepCount, additionalAttackDamage = 0, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.additionalAttackDamage = additionalAttackDamage;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.shove(targetPos, this.direction)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      for (let i = 0; i < 3; i++) {\n        this.addParticle(\n          1,\n          {\n            x: this.actor.pos.x - (this.direction[0] * i),\n            y: this.actor.pos.y - (this.direction[1] * i),\n          },\n          { x: 0, y: 0 }\n        )\n      }\n      success = true;\n    } else {\n      success = true;\n      this.actor.attack(targetPos, this.additionalAttackDamage);\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Attack extends Base {\n  constructor({ targetPos, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) { \n      return { \n        success: true, \n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      } \n    }\n    \n    success = this.actor.attack(this.targetPos);\n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class MultiTargetAttack extends Base {\n  constructor({ targetPositions, processDelay = 25, ...args }) {\n    super({ ...args });\n    this.targetPositions = targetPositions\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) {\n      return {\n        success: true,\n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      }\n    }\n\n    let particlePath = [];\n    let particlePos = { x: this.actor.pos.x, y: this.actor.pos.y };\n    let renderer = this.particleTemplate.renderer;\n    this.targetPositions.forEach((targetPos) => {\n      let attackSuccess = this.actor.attack(targetPos);\n      particlePath.push(targetPos);\n      if (attackSuccess) success = true\n    })\n    this.addParticle(\n      particlePath.length + 1, \n      particlePos, \n      null, \n      renderer, \n      Constant.PARTICLE_TYPE.path, \n      particlePath\n    )\n    \n    if (success) { \n      this.actor.energy -= this.energyCost; \n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ThrowProjectile extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    }\n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      let attackSuccess = this.actor.attack(this.targetPos);\n      if (attackSuccess) {\n        alternative = new Action.DestroySelf({\n          game: this.game,\n          actor: this.actor,\n          energyCost: Constant.ENERGY_THRESHOLD,\n          processDelay: 0,\n        });\n      }\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class ThrowProjectileGas extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n    this.processDelay = 0\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    } \n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      this.actor.attack(this.targetPos)\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class CrankEngine extends Base {\n  constructor({ engine, ...args }) {\n    super({ ...args });\n    this.engine = engine;\n  }\n  async perform() {\n    let success = true;\n    let alternative = null;\n\n    console.log(`${this.actor.name} is cranking its engine.`);\n    try {\n      await this.engine.start();\n      this.actor.energy -= this.energyCost;\n    } catch (error) {\n      console.log('CrankEngine');\n      console.log(error);\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n      });\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n","import uuid from 'uuid/v1';\nimport pipe from 'lodash/fp/pipe';\nimport * as Helper from '../helper';\nimport { destroyEntity } from './Entities/helper';\nimport * as Constant from './constants';\nimport * as Action from './actions';\nimport * as Engine from './engine';\nimport { cloneDeep, cloneDeepWith } from 'lodash';\n\nexport class Entity {\n  constructor({ game = null, passable = false}) {\n    let id = uuid();\n    this.entityTypes = ['Entity']\n    this.id = id;\n    this.game = game;\n    this.passable = passable;\n  }\n}\n\nconst Parent = superclass => class extends superclass {\n  constructor({ children = [], engine = new Engine.CrankEngine({}), ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('PARENT');\n    this.children = children;\n    this.engine = engine;\n    this.isInitialized = false;\n  }\n\n  destroyChild(child) {\n    child.energy = 0;\n    let tile = this.game.map[Helper.coordsToString(child.pos)];\n    this.game.map[Helper.coordsToString(child.pos)].entities = tile.entities.filter((e) => e.id !== child.id);\n    this.engine.actors = this.engine.actors.filter((e) => e.id !== child.id);\n    this.game.draw()\n  }\n\n  canAttack (entity) {\n    const childIds = this.children.map((child) => child.id); \n    return !childIds.includes(entity.id)\n  }\n  \n  initialize() {\n    this.isInitialized = true;\n    this.engine.game = this.game;\n    this.engine.actors = this.children;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this.game;\n      actor.destroy = () => {this.destroyChild(actor)};\n      actor.canAttack = this.canAttack.bind(this);\n      // actor.canAttack = (entity) => {this.canAttack(entity)};\n      this.game.placeActorOnMap(actor)\n      this.engine.addActor(actor);\n      this.game.draw();\n    });\n  }\n\n  getAction(game) {\n    // crank engine one turn\n    if (!this.isInitialized) {\n      this.initialize()\n    }\n\n    let result = new Action.CrankEngine({\n      game,\n      actor: this,\n      engine: this.engine,\n      energyCost: Constant.ENERGY_THRESHOLD,\n      processDelay: 10\n    });\n\n    return result;\n  }\n\n}\n\nconst HasInnerGates = superclass => class extends superclass {\n  constructor({ currentGate = null, gates = [], ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('HAS_INNER_GATES');\n    this.currentGate = currentGate;\n    this.gates = [\n      {\n        name: 'Gate of Opening',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n      },\n      {\n        name: 'Gate of Healing',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n      },\n      {\n        name: 'Gate of Life',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n      },\n      {\n        name: 'Gate of Pain',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n      },\n      {\n        name: 'Gate of Limit',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n      },\n    ];\n  }\n\n  setNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n      this.currentGate = { ...nextGate };\n    } else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      console.log('next gate index ', nextGateIndex);\n\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n        this.currentGate = { ...nextGate };\n      }\n    }\n    return nextGate;\n  }\n\n  getNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n    } else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      console.log('next gate index ', nextGateIndex);\n\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n      }\n    }\n    return nextGate;\n  }\n}\n\nconst UI = superclass => class extends superclass {\n  constructor({ initiatedBy = null, ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('UI');\n    this.initiatedBy = initiatedBy;\n    this.active = true;\n  }\n\n  hasEnoughEnergy() {\n    return this.active;\n  }\n}\n\nexport const Attacking = superclass => class extends superclass {\n  constructor({attackDamage = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('ATTACKING')\n    this.attackDamage = attackDamage;\n  }\n\n  getAttackDamage (additional = 0) {\n    return this.attackDamage + additional;\n  }\n\n  canAttack (entity) {\n    return true;\n  }\n\n  attack (targetPos, additional = 0) {\n    let success = false;\n    let tile = this.game.map[Helper.coordsToString(targetPos)]\n    if (!tile) { return success }\n    let targets = Helper.getDestructableEntities(tile.entities);\n    if (targets.length > 0) {\n      let target = targets[0];\n      if (this.canAttack(target)) {\n        let damage = this.getAttackDamage(additional);\n        if (this.entityTypes.includes('EQUIPING')) {\n          this.equipment.forEach((slot) => {\n            if (slot.item) {\n              if (slot.item.entityTypes.includes('ATTACKING')) {\n                damage += slot.item.getAttackDamage();\n              }\n            }\n          });\n        }\n        console.log(`${this.name} does ${damage} to ${target.name}`);\n        target.decreaseDurability(damage);\n        success = true;\n      }\n    }\n\n    return success;\n  }\n}\n\nexport const Equipable = superclass => class extends superclass {\n  constructor({name = 'nameless', equipmentType = Constant.EQUIPMENT_TYPES.HAND, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('EQUIPABLE')\n    this.name = name;\n    this.equipmentType = equipmentType;\n  }\n}\n\nconst Acting = superclass => class extends superclass {\n  constructor({name, actions = [], speed = 100, energy = 0, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('ACTING')\n    this.name = name;\n    this.actions = actions;\n    this.speed = speed;\n    this.energy = speed;\n  }\n\n  getAction() {\n    let action = Helper.getRandomInArray(this.actions)\n    if (action) { return action }\n  }\n\n  gainEnergy(value = this.speed) {\n    this.energy += value;\n  }\n\n  hasEnoughEnergy() {\n    return this.energy > 0;\n  }\n}\n\nconst Rendering = superclass => class extends superclass {\n  constructor({pos = {x: 0, y: 0}, renderer, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('RENDERING')\n    this.pos = pos;\n    this.renderer = {...renderer};\n  }\n\n  getPosition () {\n    return this.pos;\n  }\n\n  move (targetPos) {\n    let success = false;\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      let tile = this.game.map[Helper.coordsToString(this.pos)]\n      this.game.map[Helper.coordsToString(this.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.id) }\n      this.pos = targetPos\n      this.game.map[Helper.coordsToString(targetPos)].entities.push(this);\n      success = true;\n    }\n    return success;\n  }\n\n  shove (targetPos, direction) {\n    let success = false;\n    let targetTile = this.game.map[Helper.coordsToString(targetPos)];\n    if (targetTile) {\n      targetTile.entities.map((entity) => { \n        if (!entity.passable) {\n          let newX = entity.pos.x + direction[0];\n          let newY = entity.pos.y + direction[1];\n          let newPos = { x: newX, y: newY };\n          entity.move(newPos);\n        }\n      });\n    }\n    success = this.move(targetPos);\n    return success;\n  }\n}\n\nconst Containing = superclass => class extends superclass {\n  constructor({container = [], ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CONTAINING')\n    this.container = container;\n  }\n\n  contains (itemType) {\n    let container = this.container;\n    let items = container.filter((item) => item.name === itemType);\n    return items.length > 0 ? items[0] : false;\n  }\n\n  addToContainer (item) {\n    this.container.push(item);\n  }\n  \n  removeFromContainer (item) {\n    this.container = this.container.filter((it) => it.id !== item.id);\n  }\n}\n\nconst Equiping = superclass => class extends superclass {\n  constructor({equipment = Constant.EQUIPMENT_LAYOUTS.human(), ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('EQUIPING')\n    this.equipment = equipment;\n  }\n\n  getItemInSlot (slotName) {\n    let openSlots = this.equipment.filter((slot) => {\n      return (slot.item === null && slot.type === slotName)\n    })\n    if (openSlots.length > 0) { return false; }\n    let slot = this.equipment.find((slot) => slot.type === slotName);\n    if (!slot) { return false; }\n    if (!slot.item) { return false; }\n    return slot.item;\n  }\n\n  equip (slotName, item) {\n    let foundSlot = false;\n    this.equipment = this.equipment.map((slot) => {\n      if (!foundSlot && slot.type === slotName && slot.item === null) {\n        slot.item = item;\n        foundSlot = true;\n      }\n      return slot;\n    })\n  }\n  \n  unequip(item) {\n    this.equipment = this.equipment.map((slot) => {\n      if (slot.item) {\n        if (slot.item.id === item.id) {\n          slot.item = null;\n        }\n      }\n      return slot;\n    })\n  }\n}\n\nconst Charging = superclass => class extends superclass {\n  constructor({charge = 10, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHARGING')\n    this.charge = charge;\n    this.chargeMax = charge;\n  }\n\n  decreaseCharge(value) {\n    this.charge = Math.max(0, this.charge - value);\n  }\n  \n  increaseCharge(value) {\n    this.charge = Math.min(this.chargeMax, this.charge + value);\n  }\n}\n\nconst Signing = superclass => class extends superclass {\n  constructor({...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('SIGNING')\n    this.signHistory = [];\n  }\n\n  addSign(sign) {\n    if (this.signHistory.length >= 4) {\n      this.signHistory.shift();\n    }\n    this.signHistory.push(sign);\n  }\n  \n  clearSigns() {\n    this.signHistory = [];\n  }\n}\n\nconst Playing = superclass => class extends superclass {\n  constructor({keymap = {}, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PLAYING')\n    this.nextAction = null;\n    this.keymap = keymap;\n  }\n\n    setNextAction(action) {\n      this.nextAction = action;\n    }\n\n    getAction() {\n      let action = this.nextAction;\n      this.nextAction = null;\n      return action;\n    }\n}\n\nconst Cloning = superclass => class extends superclass {\n  constructor({cloneLimit = 1, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CLONING')\n    this.cloneLimit = cloneLimit;\n    this.clones = [];\n  }\n  \n  // perhaps clones should have a status effect that leeches parent actor's energy or chakra\n  \n  // status effects should be removed from engine when owner is removed.\n  \n  destroy() {\n    // add function to override self destroy funtion \n    // if this actor dies, clones should be destroyed as well\n    if (this.clones) {\n      this.clones.map((clone) => {\n        destroyEntity(clone)\n      });\n    }\n    destroyEntity(this);\n  }\n\n  destroyClone (id) {\n  // overrides clone destroy function\n  // when clone is destroyed, clone count will change accordingly\n    const index = this.clones.findIndex((c) => c.id == id);\n    if (index >= 0) {\n      this.clones[index].super__destroy();\n      this.clones.splice(index, 1);\n    }\n  }\n\n  createClone (cloneArgs) {\n    if (this.clones.length < this.cloneLimit) {\n      let clone = cloneDeep(this);\n      clone.name += ` Clone ${this.clones.length}`\n      clone.game = this.game;\n      clone.id = uuid();\n      delete clone.clones;\n      clone['super__destroy'] = clone.destroy;\n      clone.destroy = () => { this.destroyClone(clone.id) };\n      cloneArgs.forEach((arg) => {\n        clone[arg.attribute] = arg.value\n      });\n      if (this.game.placeActorOnMap(clone)) {\n        this.game.engine.addActorAsNext(clone);\n        this.game.draw();\n        this.clones.push(clone);\n        return true;\n      };\n    }\n    return false;\n  }\n}\n\nconst Projecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      this.path.shift();\n    }\n    return result;\n  }\n}\n\nconst DestructiveProjecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectile({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst GaseousDestructiveProjecting = superclass => class extends superclass {\n  constructor({owner_id = null, path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS_DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n    this.owner_id = owner_id;\n  }\n\n  canAttack (entity) {\n    let success = super.canAttack();\n    if (success) {\n      success = this.owner_id === null || (entity.owner_id !== this.owner_id);\n    }\n    return success\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectileGas({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst Gaseous = superclass => class extends superclass {\n  constructor({\n    isClone = false,\n    cloneCount = 0,\n    clonePattern = Constant.CLONE_PATTERNS.square,\n    ...args\n  }) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS')\n    this.isClone = isClone;\n    this.cloneCount = cloneCount;\n    this.clonePattern = cloneDeep(clonePattern);\n  }\n\n  getAction (game) {\n    let offset = this.clonePattern.positions.find((pos) => !pos.taken);\n    if (!this.isClone && offset) {\n      offset.taken = true\n      let clone = cloneDeepWith(this, (value, key) => {\n        switch (key) {\n          case 'id':\n          case 'game':\n          case 'engine':\n          case 'clones':\n            return null\n            break;\n          default:\n            return undefined\n            break;\n        }\n      });\n      clone.game = game;\n      clone.id = uuid();\n      if (this.hasOwnProperty('pos')) {\n        let referencePos = this.pos\n        clone.pos = {\n          x: referencePos.x + offset.x,\n          y: referencePos.y + offset.y\n        }\n      }\n      if (clone.hasOwnProperty('path')) {\n        clone.path = clone.path.map((pos) => {\n          return {\n            x: pos.x + offset.x,\n            y: pos.y + offset.y\n          }\n        })\n      }\n      clone.isClone = true\n      this.cloneCount += 1\n      game.placeActorOnMap(clone)\n      game.engine.addActor(clone);\n      game.draw();\n    }\n\n    let result = super.getAction(game);\n    return result;\n  }\n}\n\nconst Chasing = superclass => class extends superclass {\n  constructor({targetEntity = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHASING')\n    this.targetEntity = targetEntity;\n  }\n\n  getAction(game) {\n    let path = Helper.calculatePath(game, this.targetEntity.pos, this.pos);\n    let targetPos = path.length > 0 ? path[0] : this.pos;\n\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    return result;\n  }\n}\n\nconst Pushing = superclass => class extends superclass {\n  constructor({ path = false, targetPos = null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('PUSHING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath(game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let direction = [\n      targetPos.x - this.pos.x ,\n      targetPos.y - this.pos.y ,\n    ]\n    if (direction[0] === 0 && direction[1] === 0) {\n      return new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    let result = new Action.Shove({\n      targetPos,\n      direction,\n      game,\n      actor: this,\n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    this.path.shift();\n\n    return result;\n  }\n}\n\nconst Destructable = superclass => class extends superclass {\n  constructor({durability = 1, onDestroy = () => null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DESTRUCTABLE')\n    this.durability = durability;\n    this.onDestroy = onDestroy;\n  }\n\n  decreaseDurability (value) {\n    this.durability -= value\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n\n  increaseDurability (value) {\n    this.durability += value\n  }\n\n  destroy () {\n    this.onDestroy();\n    destroyEntity(this);\n  }\n}\n\nconst IsParticle = superclass => class extends superclass {\n  constructor({\n    pos = { x: 1, y: 1 },\n    direction = { x: 0, y: 0 },\n    life = 1,\n    speed = 1,\n    type = Constant.PARTICLE_TYPE.directional,\n    path = null,\n    ...args\n  }) {\n    super({ ...args })\n    this.pos = pos;\n    this.direction = direction;\n    this.life = life;\n    this.speed = speed;\n    this.type = type;\n    this.path = path;\n    this.entityTypes = this.entityTypes.concat('PARTICLE')\n  }\n\n  getNextPos(step) {\n    switch (this.type) {\n      case Constant.PARTICLE_TYPE.directional:\n        return {\n          x: this.pos.x + (this.direction.x * this.speed) * step,\n          y: this.pos.y + (this.direction.y * this.speed) * step,\n        }\n      case Constant.PARTICLE_TYPE.path:\n        const nextPos = this.path.shift();\n        return nextPos ? {...nextPos} : {...this.pos}\n    }\n  }\n\n  update(step) {\n    this.life -= step;\n    if (this.life > 0) {\n      this.pos = this.getNextPos(step);\n    }\n  }\n}\n\nexport const UI_Actor = pipe(\n  Acting, \n  Rendering, \n  Playing, \n  UI\n)(Entity);\n\nexport const Actor = pipe(\n  Acting, \n  Rendering\n)(Entity);\n\nexport const Wall = pipe(\n  Rendering,\n  Destructable,\n)(Entity);\n\nexport const MovingWall = pipe(\n  Acting,\n  Rendering,\n  Pushing,\n  Destructable,\n)(Entity);\n\nexport const Chaser = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable\n)(Entity);\n\nexport const Bandit = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable,\n  Attacking,\n)(Entity);\n\nexport const Player = pipe(\n  Acting, \n  Rendering, \n  Charging, \n  Signing, \n  Containing, \n  Equiping, \n  Attacking, \n  HasInnerGates,\n  Destructable, \n  Cloning,\n  Playing,\n)(Entity);\n\nexport const Weapon = pipe(\n  Rendering, \n  Equipable, \n  Attacking\n)(Entity);\n\nexport const DestructiveProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  DestructiveProjecting, \n  Destructable\n)(Entity);\n\nexport const DestructiveCloudProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  GaseousDestructiveProjecting, \n  Destructable, \n  Gaseous\n)(Entity);\n\nexport const DestructiveCloudProjectileV2 = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);\n\nexport const Particle = pipe(\n  Acting,\n  Rendering,\n  IsParticle,\n)(Entity);\n\nexport const ParticleEmitter = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);","import * as Helper from '../helper';\nimport { Particle } from './entites';\nimport { PARTICLE_TEMPLATES } from './constants';\n\nexport class Engine {\n  constructor({\n    statusEffects = [],\n    actors = [],\n    currentActor = 0,\n    isRunning = false,\n    game = null,\n  }) {\n    this.statusEffects = statusEffects;\n    this.actors = actors;\n    this.currentActor = currentActor;\n    this.isRunning = isRunning;\n    this.game = game;\n  }\n\n  async processV1 () { // a turn-based system using speed and round-robin\n    let actor = this.actors[this.currentActor]\n    actor.gainEnergy(actor.speed);\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      while (true) {\n        let result = action.perform();\n        this.game.draw();\n        await Helper.delay(action.processDelay);\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    return true\n  }\n\n  async process() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      let timePassed = 0;\n      if (actor.hasEnoughEnergy()) {\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        timePassed += action.energyCost;\n        while (true) {\n          let result = await action.perform();\n          if (!await this.processActionFX(action, result.success)) {\n              await Helper.delay(action.processDelay);\n              this.game.draw();\n          }\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n        this.processStatusEffects(timePassed);\n      } else {\n        actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    return true\n  }\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.process();\n    }\n    let actor = this.actors[this.currentActor]\n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    this.game.updateMode();\n    await this.game.updateReact(this.game);\n  }\n  \n  stop() {\n    this.isRunning = false;\n  }\n\n  addStatusEffect(newEffect) {\n    if (!newEffect.allowDuplicates) {\n      if (this.statusEffects.filter((effect) => (\n        effect.actor.id === newEffect.actor.id &&\n        effect.name === newEffect.name\n      )).length > 0) {\n        console.log(`${newEffect.name} cannot be applied twice to ${newEffect.actor.name}`);\n        return false;\n      };\n    }\n    newEffect.onStart();\n    this.statusEffects.push(newEffect)\n    return true;\n  }\n\n  removeStatusEffectById (id) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.id !== id) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n  \n  removeStatusEffectByActorId (actorId) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.actor.id !== actorId) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n\n  removeDeadStatusEffects() {\n    this.statusEffects = this.statusEffects.filter((effect) =>{\n      if (effect.lifespan >= 0 && effect.timeToLive <= 0) {\n        effect.onStop();\n        return false;\n      }\n      return true;\n    });\n  }\n\n  processStatusEffects (timePassed) {\n    this.statusEffects.forEach((effect) => {\n      effect.timeSinceLastStep += timePassed;\n      effect.timeToLive -= timePassed;\n      if (effect.timeSinceLastStep >= effect.stepInterval) {\n        effect.onStep();\n        effect.timeSinceLastStep = 0;\n      } \n    });\n    this.removeDeadStatusEffects();\n  }\n\n  async processActionFX (action, actionSuccess) {\n    // EASE IN\n    // let time = .8\n    // let nextT = (t) => t *= t; \n    // EASE OUT\n    // let time = .03\n    // let nextT = (t) => t * (2 - t); \n    // EASE IN OUT QUAD\n    // let time = .4\n    // let nextT = (t) => t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t; \n    // EASE IN CUBIC\n    // let time = .8\n    // let nextT = (t) => t * t * t; \n    // EASE OUT CUBIC\n    // let time = .001\n    // let nextT = (t) => (--t) * t * t + 1; \n    if (!actionSuccess) {\n      const particle = new Particle({\n        game: this.game,\n        name: 'particle',\n        passable: true,\n        pos: {...action.actor.pos},\n        renderer: PARTICLE_TEMPLATES.fail.renderer,\n      })\n      this.game.placeActorOnMap(particle);\n      this.game.draw();\n      await Helper.delay(100);\n      this.game.removeActorFromMap(particle);\n      particle.update(1);\n      this.game.draw();\n      return true;\n    }\n    if (action.particles.length) {\n      while (action.particles.length > 0) {\n        action.particles.forEach((particle) => {\n          this.game.placeActorOnMap(particle);\n        })\n        this.game.draw();\n        // await Helper.delay(time * 100);\n        // await Helper.delay(time * action.processDelay);\n        await Helper.delay(action.processDelay);\n        action.particles.forEach((particle) => {\n          this.game.removeActorFromMap(particle);\n          particle.update(1);\n\n        })\n        this.game.draw();\n        action.removeDeadParticles();\n        // time = nextT(time);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  addActor (entity) {\n    this.actors.push(entity);\n  }\n\n  addActorAsPrevious (entity) {\n    this.actors.splice(this.currentActor, 0, entity);\n  }\n\n  addActorAsNext (entity) {\n    this.actors.splice(this.currentActor + 1, 0, entity);\n  }\n\n  setActorToPrevious (entity) {\n    this.currentActor -= 1;\n    if (this.currentActor <= -1) this.currentActor = this.actors.length - 1;\n  }\n\n  setActorToNext (entity) {\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n  }\n\n}\n\n\nexport class CrankEngine extends Engine {\n  async process() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (actor.hasEnoughEnergy()) {\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        while (true) {\n          this.game.draw();\n          let result = await action.perform();\n          await Helper.delay(action.processDelay);\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n      } else {\n        // actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    // this.currentActor = (this.currentActor + 1) % this.actors.length;\n    this.currentActor += 1;\n    if (this.currentActor + 1 >= this.actors.length) {\n      this.currentActor = 0;\n      this.actors.forEach((actor) => actor.gainEnergy(actor.speed));\n      return false;\n    }\n    return true\n  }\n}","import * as Helper from '../../../helper';\nimport { Bandit } from '../../entites';\n\nexport const addActor = (game) => {\n  let targetEntity = game.engine.actors[game.engine.currentActor]\n  let pos = Helper.getRandomPos(game.map).coordinates\n\n  let actor = new Bandit({\n    targetEntity,\n    pos,\n    renderer: {\n      character: Helper.getRandomInArray(['◉', '⛨']),\n      color: 'white',\n      background: '',\n    },\n    name: 'Ross',\n    game,\n    actions: [],\n    durability: Helper.getRandomInArray([1]),\n    // durability: Helper.getRandomInArray([1, 2, 4, 8]),\n    speed: 100,\n  })\n  // game.placeActorOnMap(actor)\n  if (game.randomlyPlaceActorOnMap(actor)) {\n    game.engine.addActor(actor);\n    game.draw();\n  };\n}","import React from 'react';\nimport * as ROT from 'rot-js';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\nimport { addActor as addWaveEnemy } from './Keymap/KeyActions/addActor';\n\nconst GAME_MODE_TYPES = {WAVE: 0};\n\nexport class Game {\n  constructor({\n    engine = null,\n    map = {},\n    display = new ROT.Display({ \n      // forceSquareRatio: true,\n      width: 90,\n      // height: 100,\n      fontSize: 24, \n      bg: '#424242' \n    }),\n    tileKey = Constant.TILE_KEY,\n    mode = {\n      type: GAME_MODE_TYPES.WAVE,\n      data: {\n        level: 1\n      }\n    },\n  }) {\n    this.engine = engine;\n    this.map = map;\n    this.display = display;\n    this.tileKey = tileKey;\n    this.mode = mode;\n  }\n\n  initializeMode () {\n    if (this.mode.type === GAME_MODE_TYPES.WAVE) {\n      for (let i = 0; i < Math.pow(this.mode.data.level, 2); i++) {\n        addWaveEnemy(this);\n      }\n    }\n  }\n  \n  updateMode () {\n    if (this.mode.type === GAME_MODE_TYPES.WAVE) {\n      const nonPlayerCharacters = this.engine.actors.filter((actor) => !actor.entityTypes.includes('PLAYING'));\n      if (!nonPlayerCharacters.length) {\n        this.nextModeLevel();\n        this.initializeMode();\n      }\n    }\n  }\n\n  setModeLevel (level) {\n    this.mode.data.level = level;\n  }\n\n  nextModeLevel () {\n    this.setModeLevel(this.mode.data.level + 1);\n  }\n  \n  resetMode () {\n    this.setModeLevel(1);\n    this.initializeMode();\n  }\n\n  randomlyPlaceActorOnMap(actor) {\n    let kill = 0;\n    let placed = false;\n    while (!placed) {\n      let pos = Helper.getRandomPos(this.map).coordinates\n      if (this.canOccupyPosition(pos, actor)) {\n        console.log(actor.name)\n        let tile = this.map[Helper.coordsToString(pos)]\n        actor.pos = { ...pos }\n        tile.entities.push(actor);\n        placed = true;\n      }\n      kill += 1;\n      console.log(kill);\n      if (kill >= 100) {\n        placed = true;\n      }\n    }\n    return placed;\n  }\n\n  randomlyPlaceAllActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      this.randomlyPlaceActorOnMap(actor);\n    })\n  }\n\n  placeActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      let tile = this.map[Helper.coordsToString(actor.pos)]\n      if (tile) {\n        tile.entities.push(actor);\n      } else {\n        console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      }\n    })\n  }\n\n  placeActorOnMap(actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (tile) {\n      tile.entities.push(actor);\n      return true\n    } else {\n      console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      return false\n    }\n  }\n\n  removeActorFromMap (actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (!tile) return false;\n    this.map[Helper.coordsToString(actor.pos)].entities = tile.entities.filter((ac) => ac.id !== actor.id);\n    return true;\n  }\n\n  createLevel () {\n    // let digger = new ROT.Map.Arena();\n    let digger = new ROT.Map.Rogue();\n    // let digger = new ROT.Map.DividedMaze();\n    // let digger = new ROT.Map.EllerMaze();\n    // let digger = new ROT.Map.Cellular();\n    // let digger = new ROT.Map.Digger();\n    // let digger = new ROT.Map.IceyMaze();\n    // let digger = new ROT.Map.Uniform();\n    let freeCells = [];\n    let digCallback = function (x, y, value) {\n      // if (value) { return; }\n      let key = x + \",\" + y;\n      let type = 'GROUND';\n      let currentFrame = 0;\n      if (value) { \n        // type = 'WALL';\n        type = 'WATER';\n      }\n\n      if (Constant.TILE_KEY[type].animation) {\n        currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n      }\n\n      this.map[key] = {\n        type,\n        currentFrame,\n        entities: [],\n      };\n      freeCells.push(key);\n    }\n    digger.create(digCallback.bind(this));\n    // this.map[`10,10`] = {\n    //   type: 'WIN',\n    //   entities:[],\n    // }\n    this.randomlyPlaceAllActorsOnMap()\n  }\n\n  canOccupyPosition (pos, entity = {passable: false}) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      let hasImpassableEntity = targetTile.entities.filter((entity) => !entity.passable).length > 0;\n      if (!hasImpassableEntity || entity.passable) {\n        let tile = this.map[Helper.coordsToString(pos)];\n        if (this.tileKey[tile.type].passable) {\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  cursorCanOccupyPosition(pos) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  show () {\n    let d = document.getElementById('display')\n    d.appendChild(this.display.getContainer())\n  }\n\n  draw () {\n    for (let key in this.map) {\n      let parts = key.split(\",\");\n      let x = parseInt(parts[0]);\n      let y = parseInt(parts[1]);\n      let tile = this.map[key];\n      let { character, foreground, background } = this.tileKey[tile.type]\n\n      // Proto code to handle tile animations\n      let tileRenderer = this.tileKey[tile.type]\n      if (tileRenderer.animation) {\n        let frame = tileRenderer.animation[tile.currentFrame];\n        \n        character = frame.character;\n        foreground = frame.foreground;\n        background = frame.background;\n        tile.currentFrame = (tile.currentFrame + 1) % tileRenderer.animation.length;\n      }\n\n      if (tile.entities.length > 0) {\n        let entity = tile.entities[tile.entities.length - 1]\n        character = entity.renderer.character\n        foreground = entity.renderer.color\n        if (entity.renderer.background) {\n          background = entity.renderer.background\n        }\n      }\n      this.display.draw(x, y, character, foreground, background);\n    }\n  }\n\n  addActor (actor, engine = this.engine) {\n    let isPlaced = this.placeActorOnMap(actor); // replace with placeActorOnMap\n    if (!isPlaced) { return false }\n    engine.actors.push(actor);\n    this.draw();\n    return true\n  }\n\n  placeAndDrawActor (actor) {\n    this.placeActorsOnMap(); // replace with placeActorOnMap\n    this.draw();\n  }\n\n  removeActor (actor) {\n    this.engine.actors = this.engine.actors.filter((ac) => ac.id !== actor.id);\n    // this.engine.currentActor = this.engine.actors.length - 1; // should remove need for this line\n    // this.engine.currentActor = (this.engine.currentActor) % this.engine.actors.length;\n    // this.engine.currentActor = (this.engine.currentActor + 1) % this.engine.actors.length;\n    this.removeActorFromMap(actor);\n    console.log('remove actor');\n    this.draw();\n  }\n\n  initialize (presserRef) {\n    this.engine.game = this;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this;\n    });\n    this.show();\n    this.createLevel();\n    this.draw();\n    presserRef.current.focus();\n    this.initializeMode();\n  }\n\n  \n}\n\n/************************** UI ********************************/\nexport const handleKeyPress = (event, engine) => {\n  if (!engine.isRunning) {\n    let actor = engine.actors[engine.currentActor];\n    let keymap = actor.keymap;\n    let code = event.key;\n    if (!(code in keymap)) { return; }\n    keymap[code]['activate']();\n    engine.start()\n  }\n  return;\n}\n\nexport const DisplayElement = (presserRef, handleKeyPress, engine) => {\n  return (\n    <div\n      id='display'\n      ref={presserRef}\n      onKeyDown={(event) => handleKeyPress(event, engine)}\n      tabIndex='0'\n    />\n  )\n}\n/************************** UI ********************************/\n","import React from 'react';\n\nfunction Button(props) {\n  let color = props['color'];\n  if (!color) color = 'grey';\n  return (\n    <button\n      onClick={props.onClick}\n      className={`btn ${color} darken-3`}\n    >\n      {props.children}  \n    </button>\n  )\n}\n\nexport default Button;\n","import React from 'react';\nimport Button from './Button';\n\nclass Information extends React.Component {\n  render() {\n    return (\n      <div className=\"Information UI\">\n        <div className='flow-text'>Information</div>\n        {\n          this.props.data && (\n            this.props.data.map((item, index) => {\n              return (\n                <Button key={index} color={item['color']} onClick={() => null}>\n                  {`${item.label}: ${item.value}`}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Information;","import React from 'react';\nimport Button from './Button';\n\nclass Equipment extends React.Component {\n  render() {\n    return (\n      <div className=\"Equipment UI\">\n        <div className='flow-text'>Equipment</div>\n        {\n          this.props.equipment && (\n            this.props.equipment.map((slot, index) => {\n              return (\n                <Button key={index} onClick={() => null}>\n                  {slot.name} {slot.item ? slot.item.renderer.character : ''}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Equipment;","import React from 'react';\nimport Button from './Button';\n\nclass Inventory extends React.Component {\n  render() {\n    return (\n      <div className=\"Inventory UI\">\n        <div className='flow-text'>Inventory</div>\n        {\n          this.props.inventory && (\n            this.props.inventory.map((item, index) => {\n              return (\n                <Button key={index} onClick={() => null}>\n                  {index} {item.name} {item.renderer.character}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Inventory;","import React from 'react';\nimport Button from './Button';\n\nclass Keymap extends React.Component {\n  render() {\n    return (  \n      <div className=\"Keymap UI\">\n        <div className='flow-text'>Keymap</div>\n        {\n          \n          this.props.keymap && (\n            Object.entries(this.props.keymap).map(([key, value], index) => {\n              return (\n                <Button key={index} onClick={() => null}>\n                  {key} {value.label}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Keymap;","import * as Entity from './entites';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\n\nexport const TYPE = {\n  KUNAI: 'Kunai',\n  SWORD: 'Sword',\n  BARRIER: 'Barrier',\n}\n\nconst createProjectileCloud = ({ \n  engine, \n  actor, \n  targetPos, \n  throwDirection,\n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: actor.pos.x + slot.x + (throwDirection.x * structure.x_offset),\n      y: actor.pos.y + slot.y + (throwDirection.y * structure.y_offset)\n    }\n    \n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileSingularity = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + slot.x + structure.x_offset,\n      y: targetPos.y + slot.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x,\n      y: targetPos.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileBurst = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + structure.x_offset,\n      y: targetPos.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nexport const sandTomb = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileSingularity({\n  engine,\n  actor,\n  targetPos,\n  speed: 100,\n  structureType: 'circle',\n  createProjectile: sandShuriken,\n})\n\nexport const sandBurst = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileBurst({\n  engine,\n  actor,\n  targetPos,\n  speed: 500,\n  structureType: 'circle',\n  createProjectile: sandShuriken,\n})\n\nexport const sandWallPulse = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'smallSquare',\n  createProjectile: movingSandWall,\n})\n\nexport const kunaiCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: kunai,\n})\n\nexport const fireballCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: fireball,\n})\n\nexport const kunai = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '🗡️',\n    color: 'white',\n    background: '',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const movingSandWall = (engine, pos, targetPos) => new Entity.MovingWall({\n  game: engine.game,\n  passable: false,\n  pos: { x: pos.x, y: pos.y },\n  targetPos,\n  renderer: {\n    // character: '>',\n    character: ']',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  // name: TYPE.KUNAI,\n  name: TYPE.BARRIER,\n  durability: 3,\n})\n\nexport const sandShuriken = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireball = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '🔥',\n    color: 'wheat',\n    background: 'tomato',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireballGas = (engine, actor, targetPos) => {\n  return new Entity.DestructiveCloudProjectile({\n    game: engine.game,\n    owner_id: actor ? actor.id : null,\n    targetPos,\n    passable: true,\n    pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n    renderer: {\n      // character: '@',\n      character: '🔥',\n      color: 'wheat',\n      background: 'tomato',\n    },\n    name: TYPE.KUNAI,\n    speed: 100,\n    range: 10,\n    clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n    // clonePattern: Constant.CLONE_PATTERNS.square,\n  })\n}\n\nexport const waterball = (engine, actor, targetPos) => new Entity.DestructiveCloudProjectile({\n  game: engine.game,\n  owner_id: actor ? actor.id : null,\n  targetPos,\n  passable: true,\n  pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n  renderer: {\n    // character: '~',\n    character: '🌊',\n    color: 'silver',\n    background: 'lightslategrey',\n  },\n  name: TYPE.KUNAI,\n  speed: 800,\n  range: 10,\n  clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n  // clonePattern: Constant.CLONE_PATTERNS.square,\n})\n\nexport const sword = (engine) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: '',\n  },\n})\n\nexport const test = (engine, pos) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  pos,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: 'lightsteelblue',\n  },\n})\n","import { ALPHABET } from '../constants';\n\nexport const addAlphabeticallyToKeymap = (keymap, obj) => {\n  let alphabetAllowed = ALPHABET.filter((letter) => {\n    return !Object.keys(keymap).includes(letter);\n  });\n  keymap[alphabetAllowed[0]] = obj;\n}\n\nexport const deactivateUIKeymap = (engine, visibleUIKey) => {\n  let currentUiActor = engine.actors[engine.currentActor];\n  engine.game.removeActor(currentUiActor);\n  engine.game[visibleUIKey] = null;\n}","import * as Constant from '../../constants';\nimport { UI_Actor } from '../../entites';\nimport { DropItem } from '../../actions';\nimport { addAlphabeticallyToKeymap, deactivateUIKeymap } from '../helper';\n\nconst keymapDropFromInventory = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      // g: {\n      activate: () => deactivateUIKeymap(engine, 'visibleInventory'),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.container.map((item, index) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to drop ${item.name}`);\n      initiatedBy.setNextAction(new DropItem({\n        item,\n        game: engine.game,\n        actor: initiatedBy,\n        energyCost: Constant.ENERGY_THRESHOLD\n      }));\n      deactivateUIKeymap(engine, 'visibleInventory');\n    }\n    obj['label'] = `Drop ${item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const activateDropItem = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleInventory = currentActor.container;\n\n  let ui = new UI_Actor({\n    initiatedBy: currentActor,\n    pos: { ...currentActor.pos },\n    renderer: {\n      character: 'D',\n      color: 'white',\n      background: '',\n    },\n    name: 'Drop',\n    game: engine.game,\n  })\n  engine.addActorAsPrevious(ui);\n  engine.setActorToPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapDropFromInventory(engine, currentActor);\n}","import { UI_Actor } from '../../entites';\nimport { UnequipItem } from '../../actions';\nimport { addAlphabeticallyToKeymap, deactivateUIKeymap } from '../helper';\n\nconst keymapEquipment = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      activate: () => deactivateUIKeymap(engine, 'visibleEquipment'),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.equipment.filter((slot) => slot.item).map((slot) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to unequip ${slot.item.name}`);\n      initiatedBy.setNextAction(new UnequipItem({\n        item: slot.item,\n        game: engine.game,\n        actor: initiatedBy,\n      }))\n      deactivateUIKeymap(engine, 'visibleEquipment');\n    }\n    obj['label'] = `Unequip ${slot.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const activateEquipment = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleEquipment = currentActor.equipment;\n\n  let ui = new UI_Actor({\n    initiatedBy: currentActor,\n    pos: { ...currentActor.pos },\n    renderer: {\n      character: 'E',\n      color: 'white',\n      background: '',\n    },\n    name: 'Equipment',\n    game: engine.game,\n  })\n  engine.addActorAsPrevious(ui);\n  engine.setActorToPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapEquipment(engine, currentActor);\n}","import { UI_Actor } from '../../entites';\nimport { EquipItemFromContainer } from '../../actions';\nimport { addAlphabeticallyToKeymap, deactivateUIKeymap } from '../helper';\n\nconst keymapEquipFromInventory = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      activate: () => deactivateUIKeymap(engine, 'visibleInventory'),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.container.map((item, index) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to equip ${item.name}`);\n      initiatedBy.setNextAction(new EquipItemFromContainer({\n        item,\n        game: engine.game,\n        actor: initiatedBy,\n      }))\n      deactivateUIKeymap(engine, 'visibleInventory');\n    }\n    obj['label'] = `Equip ${item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const activateInventory = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleInventory = currentActor.container;\n\n  let ui = new UI_Actor({\n    initiatedBy: currentActor,\n    pos: { ...currentActor.pos },\n    renderer: {\n      character: 'I',\n      color: 'white',\n      background: '',\n    },\n    name: 'Inventory',\n    game: engine.game,\n    // keymap: keymapEquipFromInventory(engine, currentActor),\n  })\n  engine.addActorAsPrevious(ui);\n  engine.setActorToPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapEquipFromInventory(engine, currentActor);\n}","import { CursorMove } from '../../actions';\n\nexport const moveCursor = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new CursorMove({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: 0,\n  }))\n}","import * as Action from '../../actions';\nimport * as Item from '../../items';\nimport * as Constant from '../../constants';\nimport { UI_Actor } from '../../entites';\nimport { moveCursor } from './moveCursor';\n\nconst throwKunai = (engine, actor) => {\n  let cursor = engine.actors[engine.currentActor];\n  cursor.active = false;\n  let throwDirection = {\n    x: Math.sign(cursor.pos.x - actor.pos.x),\n    y: Math.sign(cursor.pos.y - actor.pos.y),\n  }\n  engine.game.removeActor(cursor);\n  let kunai = actor.contains(Item.TYPE.KUNAI);\n  if (kunai) {\n    kunai.game = engine.game;\n    kunai.pos = {\n      x: actor.pos.x + throwDirection.x,\n      y: actor.pos.y + throwDirection.y,\n    };\n    kunai.targetPos = { ...cursor.pos };\n    actor.removeFromContainer(kunai);\n    engine.actors.push(kunai);\n    kunai.createPath(engine.game);\n    engine.game.placeActorsOnMap();\n    engine.game.draw();\n    actor.setNextAction(\n      new Action.Say({\n        message: `I'll get you with this kunai!`,\n        game: engine.game,\n        actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    )\n  } else {\n    console.log('I have no kunais left');\n  }\n}\n\nconst throwKunaiCloud = (engine, actor) => {\n  let cursor = engine.actors[engine.currentActor];\n  cursor.active = false;\n  let throwDirection = {\n    x: Math.sign(cursor.pos.x - actor.pos.x),\n    y: Math.sign(cursor.pos.y - actor.pos.y),\n  }\n  engine.game.removeActor(cursor);\n  let cloud = Item.fireballCloud({\n    // let cloud = Item.kunaiCloud({\n    engine,\n    actor,\n    targetPos: { ...cursor.pos },\n    throwDirection,\n  });\n  if (cloud) {\n    cloud.pos = {\n      x: actor.pos.x + throwDirection.x,\n      y: actor.pos.y + throwDirection.y,\n    };\n    engine.actors.push(cloud);\n    actor.setNextAction(\n      new Action.Say({\n        message: `I'll get you with these kunai!`,\n        game: engine.game,\n        actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    )\n  } else {\n    console.log('I have no kunais left');\n  }\n}\n\nconst keymapCursorToThrowItem = (engine, initiatedBy) => {\n  return {\n    w: {\n      activate: () => moveCursor(Constant.DIRECTIONS.N, engine),\n      label: 'move',\n    },\n    d: {\n      activate: () => moveCursor(Constant.DIRECTIONS.E, engine),\n      label: 'move',\n    },\n    s: {\n      activate: () => moveCursor(Constant.DIRECTIONS.S, engine),\n      label: 'move',\n    },\n    a: {\n      activate: () => moveCursor(Constant.DIRECTIONS.W, engine),\n      label: 'move',\n    },\n    t: {\n      activate: () => throwKunaiCloud(engine, initiatedBy),\n      label: 'Throw Cloud',\n    },\n    y: {\n      activate: () => throwKunai(engine, initiatedBy),\n      label: 'Throw Kunai',\n    },\n  };\n}\n\nexport const activateThrow = (engine) => {\n  let game = engine.game;\n  let currentActor = engine.actors[game.engine.currentActor]\n  let pos = currentActor.pos;\n\n  let cursor = new UI_Actor({\n    initiatedBy: currentActor,\n    pos,\n    renderer: {\n      character: '█',\n      color: 'white',\n      background: '',\n    },\n    name: 'Cursor',\n    game,\n    keymap: keymapCursorToThrowItem(engine, currentActor),\n  })\n  engine.addActorAsPrevious(cursor);\n  engine.setActorToPrevious(cursor);\n  engine.game.placeActorOnMap(cursor)\n  engine.game.draw()\n}","import { Move } from '../../actions';\nimport * as Constant from '../../constants';\n\nexport const walk = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Move({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}","import { PickupItem } from '../../actions';\nimport { ENERGY_THRESHOLD } from '../../constants';\nimport { coordsToString, getRandomInArray } from '../../../helper';\n\nexport const pickupRandom = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let entities = engine.game.map[coordsToString(actor.pos)].entities.filter((e) => e.id !== actor.id);\n  if (entities.length > 0) {\n    actor.setNextAction(new PickupItem({\n      item: getRandomInArray(entities),\n      game: engine.game,\n      actor,\n      energyCost: ENERGY_THRESHOLD\n    }));\n  }\n  else {\n    console.log('nothing to pickup.');\n  }\n};","import { Tackle } from '../../actions';\nimport { ENERGY_THRESHOLD, DIRECTIONS, PARTICLE_TEMPLATES } from '../../constants';\n\nconst flyingLotus = (direction, stepCount, energyCost, additionalAttackDamage, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Tackle({\n    direction,\n    stepCount,\n    game: engine.game,\n    actor,\n    additionalAttackDamage,\n    energyCost,\n    particleTemplate: PARTICLE_TEMPLATES.leaf\n  }))\n}\n\nconst keymapFlyingLotus = (engine, initiatedBy, previousKeymap) => {\n  const energyCost = Math.floor(ENERGY_THRESHOLD / 2);\n  const stepCount = Math.floor(initiatedBy.energy / energyCost);\n  const additionalAttackDamage = stepCount;\n  const goToPreviousKeymap = () => initiatedBy.keymap = previousKeymap;\n  return {\n    Escape: {\n      activate: goToPreviousKeymap,\n      label: 'Close',\n    },\n    w: {\n      activate: () => {\n        flyingLotus(DIRECTIONS.N, stepCount, energyCost, additionalAttackDamage, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate N',\n    },\n    d: {\n      activate: () => {\n        flyingLotus(DIRECTIONS.E, stepCount, energyCost, additionalAttackDamage, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate E',\n    },\n    s: {\n      activate: () => {\n        flyingLotus(DIRECTIONS.S, stepCount, energyCost, additionalAttackDamage, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate S',\n    },\n    a: {\n      activate: () => {\n        flyingLotus(DIRECTIONS.W, stepCount, energyCost, additionalAttackDamage, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate W',\n    },\n  };\n}\n\nexport const activateFlyingLotus = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  currentActor.keymap = keymapFlyingLotus(engine, currentActor, { ...currentActor.keymap });\n}","export class Base {\n  constructor({ \n    game, \n    actor, \n    name = 'Effect', \n    lifespan = 100,\n    stepInterval = 100,\n    allowDuplicates = true,\n    onStart = () => null,\n    onStep = () => null,\n    onStop = () => null,\n  }) {\n    this.game = game\n    this.actor = actor\n    this.name = name\n    this.lifespan = lifespan\n    this.timeToLive = lifespan\n    this.stepInterval = stepInterval\n    this.allowDuplicates = allowDuplicates\n    this.timeSinceLastStep = 0;\n    this.onStart = onStart\n    this.onStep = onStep\n    this.onStop = onStop\n  }\n}","import { DIRECTIONS, ENERGY_THRESHOLD } from '../../constants';\nimport * as StatusEffect from '../../statusEffects';\nimport { AddStatusEffect, Move } from '../../actions';\nimport { walk } from './walk';\nimport { getRandomInArray } from '../../../helper';\n\nconst drunkWalk = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let originalDirection = [...direction];\n  let chance = Math.random();\n  if (chance < 0.5) {\n    console.log('drunk misstep');\n    let count = 100\n    while ((direction[0] === originalDirection[0] && direction[1] === originalDirection[1]) || count < 0) {\n      count -= 1;\n      direction = DIRECTIONS[getRandomInArray(Object.keys(DIRECTIONS))];\n    }\n    console.log(count);\n  }\n\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Move({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: ENERGY_THRESHOLD\n  }))\n}\n\nexport const drunkenFist = (engine, damageBuff = 1) => {\n  let currentActor = engine.actors[engine.currentActor];\n\n  let effect = new StatusEffect.Base({\n    game: engine.game,\n    actor: currentActor,\n    name: 'Drunk',\n    lifespan: 1000,\n    stepInterval: 100,\n    allowDuplicates: false,\n    onStart: () => {\n      currentActor.attackDamage += damageBuff;\n      currentActor.renderer.character = '?';\n      console.log(`${currentActor.name} took a sip of sake.`);\n      currentActor.keymap.w = {\n        activate: () => drunkWalk(DIRECTIONS.N, engine),\n        label: 'drunken walk'\n      }\n      currentActor.keymap.a = {\n        activate: () => drunkWalk(DIRECTIONS.W, engine),\n        label: 'drunken walk'\n      }\n      currentActor.keymap.s = {\n        activate: () => drunkWalk(DIRECTIONS.S, engine),\n        label: 'drunken walk'\n      }\n      currentActor.keymap.d = {\n        activate: () => drunkWalk(DIRECTIONS.E, engine),\n        label: 'drunken walk'\n      }\n    },\n    onStop: () => {\n      currentActor.attackDamage -= damageBuff;\n      currentActor.renderer.character = 'R';\n      console.log(`${currentActor.name} recovered from drunkeness.`);\n      currentActor.keymap.w = {\n        activate: () => walk(DIRECTIONS.N, engine),\n        label: 'walk'\n      }\n      currentActor.keymap.a = {\n        activate: () => walk(DIRECTIONS.W, engine),\n        label: 'walk'\n      }\n      currentActor.keymap.s = {\n        activate: () => walk(DIRECTIONS.S, engine),\n        label: 'walk'\n      }\n      currentActor.keymap.d = {\n        activate: () => walk(DIRECTIONS.E, engine),\n        label: 'walk'\n      }\n    },\n  });\n  currentActor.setNextAction(new AddStatusEffect({\n    effect,\n    actor: currentActor,\n    game: engine.game,\n    processDelay: 100,\n    particleTemplate: {\n      renderer: {\n        color: '#c45ffd',\n        background: '#424242',\n        character: '?'\n      }\n    },\n  }));\n}","// import deps\nimport * as Item from '../items';\nimport * as Entity from '../entites';\nimport * as Constant from '../constants';\nimport * as Keymap from '../Keymap';\n\nexport default function (engine) {\n  // define keymap\n  const keymap = (engine) => {\n    return {\n      w: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.N, engine),\n        label: 'walk',\n      },\n      d: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.E, engine),\n        label: 'walk',\n      },\n      s: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.S, engine),\n        label: 'walk',\n      },\n      a: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.W, engine),\n        label: 'walk',\n      },\n      l: {\n        activate: () => Keymap.activateFlyingLotus(engine),\n        label: 'Flying Lotus',\n      },\n      k: {\n        activate: () => Keymap.removeWeights(engine, 200),\n        label: 'Remove wraps',\n      },\n      j: {\n        activate: () => Keymap.drunkenFist(engine),\n        label: 'Sip Sake',\n      },\n      h: {\n        activate: () => Keymap.leafWhirlwind(engine),\n        label: 'Leaf Whirlwind',\n      },\n      o: {\n        activate: () => Keymap.openInnerGate(engine),\n        label: 'Gate of Opening',\n      },\n      i: {\n        activate: () => Keymap.activateInventory(engine),\n        label: 'Open Inventory',\n      },\n      q: {\n        activate: () => Keymap.activateEquipment(engine),\n        label: 'Open Equipment',\n      },\n      g: {\n        activate: () => Keymap.activateDropItem(engine),\n        label: 'Drop Item',\n      },\n      p: {\n        activate: () => Keymap.pickupRandom(engine),\n        label: 'Pickup',\n      },\n      t: {\n        activate: () => Keymap.activateThrow(engine),\n        label: 'Throw',\n      },\n      // DEV KEYS\n      y: {\n        activate: () => Keymap.addActor(engine.game),\n        label: 'Add NPC',\n      },\n    };\n  }\n  // instantiate class\n  let actor = new Entity.Player({\n    pos: { x: 23, y: 7 },\n    renderer: {\n      character: 'R',\n      color: '#e6e6e6',\n      background: '#36635b',\n    },\n    name: 'Rock Lee',\n    actions: [],\n    speed: 400,\n    durability: 3,\n    keymap: keymap(engine),\n  })\n\n  // add default items to container\n  actor.container = [\n    ...Array(10).fill('').map(() => Item.kunai(engine, { ...actor.pos })),\n  ]\n\n  return actor;\n}","import * as StatusEffect from '../../statusEffects';\nimport { AddStatusEffect } from '../../actions';\n\nexport const removeWeights = (engine, speedBoost = 600, damageDebuff = 1) => {\n  let currentActor = engine.actors[engine.currentActor];\n\n  let effect = new StatusEffect.Base({\n    game: engine.game,\n    actor: currentActor,\n    name: 'Removed wraps (weights)',\n    lifespan: 1000,\n    stepInterval: 100,\n    allowDuplicates: false,\n    onStart: () => {\n      currentActor.speed += speedBoost;\n      currentActor.attackDamage = Math.max(0, currentActor.attackDamage - damageDebuff);\n      currentActor.energy += speedBoost;\n      currentActor.renderer.character = '〣'\n      console.log(`${currentActor.name} removed weighted wraps.`);\n    },\n    onStop: () => {\n      currentActor.speed -= speedBoost;\n      currentActor.attackDamage += damageDebuff;\n      currentActor.renderer.character = 'R'\n      console.log(`${currentActor.name} rewrapped weights.`);\n    },\n  });\n  currentActor.setNextAction(new AddStatusEffect({\n    effect,\n    actor: currentActor,\n    game: engine.game,\n    particleTemplate: {\n      renderer: {\n        color: '#424242',\n        background: '#e6e6e6',\n        character: '〣'\n      }\n    }\n  }));\n}","import { MultiTargetAttack} from '../../actions';\nimport { ENERGY_THRESHOLD, PARTICLE_TEMPLATES } from '../../constants';\n\nexport const leafWhirlwind = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let targetPositions = [\n    {\n      x: actor.pos.x - 1,\n      y: actor.pos.y,\n    },\n    {\n      x: actor.pos.x - 1,\n      y: actor.pos.y - 1,\n    },\n    {\n      x: actor.pos.x,\n      y: actor.pos.y - 1,\n    },\n    {\n      x: actor.pos.x + 1,\n      y: actor.pos.y - 1,\n    },\n    {\n      x: actor.pos.x + 1,\n      y: actor.pos.y,\n    },\n    {\n      x: actor.pos.x + 1,\n      y: actor.pos.y + 1,\n    },\n    {\n      x: actor.pos.x,\n      y: actor.pos.y + 1,\n    },\n    {\n      x: actor.pos.x - 1,\n      y: actor.pos.y + 1,\n    },\n  ]\n\n  actor.setNextAction(new MultiTargetAttack({\n    targetPositions,\n    game: engine.game,\n    actor,\n    energyCost: (ENERGY_THRESHOLD * 8),\n    particleTemplate: PARTICLE_TEMPLATES.leaf,\n  }))\n}","import * as StatusEffect from '../../statusEffects';\nimport { AddStatusEffect } from '../../actions';\n\nexport const openInnerGate = (engine) => {\n  let currentActor = engine.actors[engine.currentActor];\n  let nextGate = currentActor.setNextGate();\n  if (nextGate) {\n    let effect = new StatusEffect.Base({\n      game: engine.game,\n      actor: currentActor,\n      name: nextGate.name,\n      lifespan: -1,\n      stepInterval: 100,\n      allowDuplicates: false,\n      onStart: () => {\n        currentActor.speed += nextGate.speedBuff;\n        currentActor.energy += nextGate.speedBuff;\n        currentActor.attackDamage += nextGate.damageBuff;\n        console.log(`${currentActor.name} opened the ${nextGate.name}.`);\n        let nextGateToLabel = currentActor.getNextGate();\n        if (nextGateToLabel) {\n          currentActor.keymap.o.label = nextGateToLabel.name;\n        } else {\n          delete currentActor.keymap.o;\n        }\n      },\n      onStep: () => {\n        currentActor.decreaseDurability(nextGate.durabilityDebuff);\n        currentActor.decreaseDurability(0);\n        console.log(`${currentActor.name} suffers ${nextGate.durabilityDebuff} damage from physical stress.`)\n      },\n    });\n    currentActor.setNextAction(new AddStatusEffect({\n      effect,\n      actor: currentActor,\n      game: engine.game,\n      processDelay: 25,\n      particleTemplate: {\n        renderer: {\n          color: '#3cc2bb',\n          background: '#24fe88',\n          character: '#'\n        }\n      }\n    }));\n  }\n}","// import deps\nimport * as Item from '../items';\nimport * as Entity from '../entites';\nimport * as Constant from '../constants';\nimport * as Keymap from '../Keymap';\n\n// create class\nexport default function (engine) {\n  // define keymap\n  const keymap = (engine) => {\n    return {\n      w: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.N, engine),\n        label: 'walk',\n      },\n      d: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.E, engine),\n        label: 'walk',\n      },\n      s: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.S, engine),\n        label: 'walk',\n      },\n      a: {\n        activate: () => Keymap.walk(Constant.DIRECTIONS.W, engine),\n        label: 'walk',\n      },\n      l: {\n        activate: () => Keymap.sandClone(engine),\n        label: 'Sand Clone',\n      },\n      k: {\n        activate: () => Keymap.sandTomb(engine),\n        label: 'Sand Tomb',\n      },\n      j: {\n        activate: () => Keymap.sandSkin(engine, 10),\n        label: 'Sand Skin',\n      },\n      h: {\n        activate: () => Keymap.sandWall(engine),\n        label: 'Sand Wall',\n      },\n      o: {\n        activate: () => Keymap.sandPulse(engine),\n        label: 'Sand Pulse',\n      },\n      i: {\n        activate: () => Keymap.activateInventory(engine),\n        label: 'Open Inventory',\n      },\n      q: {\n        activate: () => Keymap.activateEquipment(engine),\n        label: 'Open Equipment',\n      },\n      g: {\n        activate: () => Keymap.activateDropItem(engine),\n        label: 'Drop Item',\n      },\n      p: {\n        activate: () => Keymap.pickupRandom(engine),\n        label: 'Pickup',\n      },\n      t: {\n        activate: () => Keymap.activateThrow(engine),\n        label: 'Throw',\n      },\n      // DEV KEYS\n      y: {\n        activate: () => Keymap.addActor(engine.game),\n        label: 'Add NPC',\n      },\n      u: {\n        activate: () => Keymap.die(engine),\n        label: 'Destroy Self',\n      },\n    };\n  }\n\n\n  let actor = new Entity.Player({\n    pos: { x: 23, y: 7 },\n    renderer: {\n      character: 'G',\n      color: '#F0D8C0',\n      background: '#603030',\n    },\n    name: 'Gaara',\n    actions: [],\n    speed: 200,\n    durability: 3,\n    cloneLimit: 3,\n    keymap: keymap(engine),\n  })\n\n  actor.container = [\n    Item.sword(engine),\n    ...Array(10).fill('').map(() => Item.sandShuriken(engine, { ...actor.pos })),\n    // ...Array(10).fill('').map(() => Item.fireballGas(engine, actor)),\n    // ...Array(10).fill('').map(() => Item.movingSandWall(engine, { ...actor.pos })),\n  ]\n\n  return actor;\n}\n// export instance","import React from 'react';\nimport { SCREENS } from './constants';\nimport * as Engine from '../engine';\nimport * as Game from '../game';\nimport Information from '../UI/Information';\nimport Equipment from '../UI/Equipment';\nimport Inventory from '../UI/Inventory';\nimport KeymapUI from '../UI/Keymap';\nimport RockLee from '../Characters/RockLee';\nimport NarutoUzumaki from '../Characters/NarutoUzumaki';\nimport Gaara from '../Characters/Gaara';\n\nclass Level extends React.Component {\n  constructor(props) {\n    super(props);\n    let ENGINE = new Engine.Engine({});\n    // let actor = NarutoUzumaki(ENGINE);\n    let actor = RockLee(ENGINE);\n    // let actor = Gaara(ENGINE);\n    ENGINE.actors.push(actor)\n    let game = new Game.Game({ engine: ENGINE })\n\n    this.state = {\n      game: game,\n    };\n    this.presserRef = React.createRef();\n  }\n\n  async componentDidMount() {\n    this.state.game.initialize(this.presserRef)\n    this.state.game.updateReact = (newGameState) => { this.setState({game: newGameState}) }\n    this.state.game.engine.start()\n  }\n\n  render() {\n    let currentActor = this.state.game.engine.actors[this.state.game.engine.currentActor];\n    let data = [\n      {\n        label: 'Wave',\n        value: this.state.game.mode.data.level,\n      },\n    ];\n\n    data = data.concat(\n      [\n        ...this.state.game.engine.actors.map((actor, index) => {\n          let result = {\n            label: actor.name,\n            value: index,\n            value: `HP: ${actor.durability}, En/Sp: ${actor.energy}/${actor.speed}`,\n          };\n          if (index === this.state.game.engine.currentActor) {\n            result['color'] = 'red';\n          }\n          return result;\n        })\n      ]\n    )\n\n    return (\n      <div className=\"Level\">\n        <div className='flow-text'>Chunin Exams</div>\n        <button className='btn' onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}>Quit</button>\n        <div className='row'>\n          <Information data={data} />\n          <Equipment equipment={this.state.game.visibleEquipment} />\n          <Inventory inventory={this.state.game.visibleInventory} />\n          <KeymapUI keymap={this.state.game.visibleKeymap} />\n          {Game.DisplayElement(this.presserRef, Game.handleKeyPress, this.state.game.engine)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Level;\n","import React from 'react';\nimport { SCREENS } from './constants';\n\nclass Title extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"Title\">\n        <div\n          style={{\n            width: '100vw',\n            height: '100vh',\n            backgroundColor: '#e2e2e2',\n          }}\n        >\n          <div class='flow-text'>Hidden Leaf RL</div>\n          <button class='btn' onClick={() => this.props.setActiveScreen(SCREENS.LEVEL)}>Play</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Title;","import React from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport { SCREENS } from './Screen/constants';\nimport Level from './Screen/Level';\nimport Title from './Screen/Title';\n\nclass Nystrum extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      activeScreen: SCREENS.LEVEL,\n    };\n  }\n\n  setActiveScreen (activeScreen) {\n    this.setState({activeScreen})\n  }\n\n  getActiveScreen () {\n    const titleScreen = <Title \n      key={SCREENS.TITLE} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n    />\n    const levelScreen = <Level \n      key={SCREENS.LEVEL} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n    />\n\n    switch (this.state.activeScreen) {\n      case SCREENS.TITLE:\n        return titleScreen\n      case SCREENS.LEVEL:\n        return levelScreen\n      default:\n        return titleScreen\n    }\n  }\n\n  render() {\n    const activeScreen = this.getActiveScreen();\n    return (\n      <div className=\"Nystrum\">\n        <ReactCSSTransitionGroup\n          transitionName=\"fade\"\n          transitionAppear={true}\n          transitionEnter={true}\n          transitionLeave={true}\n          transitionAppearTimeout={500}\n          transitionEnterTimeout={500}\n          transitionLeaveTimeout={300}\n        >\n          { activeScreen }\n        </ReactCSSTransitionGroup>\n      </div>\n    );\n  }\n}\n\nexport default Nystrum;\n","import * as ROT from 'rot-js';\n\nexport const TILE_KEY = () => {\n  return {\n    'GROUND': {\n      background: '#974',\n      foreground: '#aaa',\n      character: '.',\n      passable: true,\n    }\n  }\n}\n\n// RENDERING\n\nexport const DRAW = (map, display) => {\n  for (let key in map) {\n    let parts = key.split(\",\");\n    let x = parseInt(parts[0]);\n    let y = parseInt(parts[1]);\n    let tile = map[key];\n    let { character, foreground, background } = TILE_KEY()[tile.type]\n    if (tile.entities.length > 0) {\n      let entity = tile.entities[tile.entities.length - 1]\n      character = entity.components.renderer.character\n      foreground = entity.components.renderer.color\n      if (entity.components.renderer.background) {\n        background = entity.components.renderer.background\n      }\n    }\n    display.draw(x, y, character, foreground, background);\n  }\n}\n\n// END RENDERING\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const getImpassableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('impasse') && !e.components.impasse.passable)\n}\n\nexport const getDestructableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('destructible'))\n}\n\nexport const delay = (timeDelayed = 100) => {\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const exampleEngine = () => {\n  let scheduler = new ROT.Scheduler.Simple();\n  let engine = new ROT.Engine(scheduler);\n  let output = [];\n  /* sample actor: pauses the execution when dead */\n  let actor = {\n    lives: 3,\n    act: function () {\n      let done = null;\n      let promise = {\n        then: function (cb) { done = cb; }\n      }\n\n      output.push(\".\");\n      // SHOW(output.join(\"\"));\n      console.log(output.join(\"\"));\n\n      this.lives--;\n\n      /* if alive, wait for 500ms for next turn */\n      if (this.lives) {\n        setTimeout(function () { done(); }, 500);\n      }\n\n      return promise;\n    }\n  }\n  scheduler.add(actor, true);\n  engine.start();\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}","import * as Helper from '../lib/helper';\n\nexport const createEntity = (id = null, name = 'Empty', components = {}, world) => {\n  let entity = {\n    id,\n    name,\n    components,\n    world,\n    sendEvent: (target, eventType, parameters) => sendEvent(target, eventType, parameters, world),\n  };\n  return entity\n}\n\nexport const sendEvent = async (target = null, eventType = null, parameters = null, world = null) => {\n  let success = false;\n  for (let key in target.components) {\n    let component = target.components[key]\n    if (component.hasOwnProperty(eventType)) {\n      console.log('SUCCESSFUL EVENT: ', eventType)\n      success = true\n      if (eventType !== 'PREPARE_RENDER') {\n        await Helper.delay();\n      }\n      component[eventType]({ ...parameters, self: target, component: component });\n      Helper.DRAW(world.map, world.display)\n    }\n  }\n  if (!success) {\n    console.log('FAILED EVENT')\n  }\n};","import * as Helper from '../lib/helper';\n\nexport const receiver = (pos) => {\n  return {\n    responded: false,\n    RECIEVE: (parameters) => {\n      let { self, component, message } = parameters\n      console.log(message, pos.x, pos.y)\n      if (!component.responded) {\n        component.responded = true\n        self.sendEvent(parameters.sender, 'hello', 'RECIEVE', { message: 'copy', sender: self })\n      }\n    }\n  }\n}\n\nexport const impasse = (passable = false) => {\n  return {\n    passable,\n    MAKE_PASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = true;\n    },\n    MAKE_IMPASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = false;\n    }\n  }\n}\n\nexport const body = (world, pos = { x: 0, y: 0 }) => {\n  if (world) {\n    return {\n      pos,\n      MOVE: (parameters) => {\n        let { self, component, currentPos, targetPos } = parameters\n        if (world.canOccupy(world.map, targetPos)) {\n          component.pos = targetPos\n          let tile = world.map[Helper.coordsToString(currentPos)]\n          world.map[Helper.coordsToString(currentPos)] = {...tile, entities: []}\n          self.sendEvent(self, 'PREPARE_RENDER')\n          // Helper.DRAW(world.map, world.display)\n        } else {\n          console.log('can\\'t move there')\n        }\n      }\n    }\n  }\n  console.log('No world to occupy');\n  return {}\n}\n\nexport const destructible = (world, durability = 1) => {\n  return {\n    durability,\n    DECREASE_DURABILITY: (parameters) => {\n      let { self, component, value } = parameters;\n      component.durability -= value\n      if (component.durability <= 0) {\n        self.sendEvent(self, 'DESTROY')\n      }\n    },\n    INCREASE_DURABILITY: (parameters) => {\n      let { component, value } = parameters;\n      component.durability += value\n    },\n    DESTROY: (parameters) => {\n      let { self, component, value } = parameters;\n      let tile = world.map[Helper.coordsToString(self.components.body.pos)];\n      world.map[Helper.coordsToString(self.components.body.pos)].entities = tile.entities.filter((e) => e.id !== self.id);\n      // self.sendEvent(self, 'PREPARE_RENDER')\n      // Helper.DRAW(world.map, world.display)\n    }\n  }\n}\n\nexport const attack = (damage = 1) => {\n  return {\n    damage,\n  }\n}\n\nexport const throwable = (world) => {\n  return {\n    THROW: (parameters) => {\n      let { self, component, direction } = parameters;\n      // if next tile is passable\n        // send move action to self\n        // send throw action to self\n      // else\n        // send decrease_durability to entity next in tile\n        // send decrease_durability to self\n      let currentPos = self.components.body.pos;\n      let nextPos = { x: currentPos.x + direction.x, y: currentPos.y + direction.y }\n      let nextTile = world.map[Helper.coordsToString(nextPos)];\n      if (world.canOccupy(world.map, nextPos)) { // change to check for target entity\n        self.sendEvent(\n          self, 'MOVE', {\n            currentPos: currentPos,\n            targetPos: nextPos\n          }\n        )\n        self.sendEvent(self, 'THROW', {direction});\n      } else {\n        if (world.map.hasOwnProperty(Helper.coordsToString(nextPos))) {\n          let impassable_and_destructable_entities = Helper.getDestructableEntities(Helper.getImpassableEntities(nextTile.entities))\n          if (impassable_and_destructable_entities.length > 0) {\n            self.sendEvent(impassable_and_destructable_entities[0], 'DECREASE_DURABILITY', { value: 1 });\n          }\n        }\n        self.sendEvent(self, 'DECREASE_DURABILITY', { value: 1 });\n      }\n    },\n  }\n}\n\nexport const renderer = (world, character = '', color = 'white', background = false) => {\n  return {\n    character,\n    color,\n    background,\n    PREPARE_RENDER: (parameters) => {\n      let { self } = parameters\n      if (self.components.hasOwnProperty('body')) {\n        world.map[Helper.coordsToString(self.components.body.pos)].entities.push(self)\n      }\n    }\n  }\n}","import React from 'react';\nimport '../App.css';\nimport * as ROT from 'rot-js';\nimport * as Entity from './lib/entity'\nimport * as Helper from './lib/helper'\nimport * as Components from './components/index'\n\nconst SHOW = (canvas) => {\n  let d = document.getElementById('display')\n  d.appendChild(canvas)\n}\n\nconst CREATE_LEVEL = (world) => {\n  let digger = new ROT.Map.Arena();\n  let freeCells = [];\n  let digCallback = function (x, y, value) {\n    if (value) { return; }\n    let key = x + \",\" + y;\n    world.map[key] = {\n      type: 'GROUND',\n      entities: [],\n    };\n    freeCells.push(key);\n  }\n  digger.create(digCallback.bind(this));\n}\n\nlet scheduler = new ROT.Scheduler.Simple()\nlet engine = new ROT.Engine(scheduler)\n\nlet world = {\n  canAct: true,\n  scheduler,\n  engine,\n  map: {},\n  display: new ROT.Display({ fontSize: 24, bg: '#099' }),\n  canOccupy: (map, pos) => {\n    if (map.hasOwnProperty(Helper.coordsToString(pos))) {\n      let tile = map[Helper.coordsToString(pos)];\n      if (Helper.TILE_KEY()[tile.type].passable && Helper.getImpassableEntities(tile.entities).length === 0) {\n        return true\n      }\n    } else {\n      return false\n    }\n  },\n}\n\nlet naruto = {\n  ...Entity.createEntity(1, 'Naruto', {\n    reciever: Components.receiver({ x: 10, y: 30 }),\n    body: Components.body(world, { x: 19, y: 21 }),\n    renderer: Components.renderer(world, 'N', 'orange', 'black'),\n  },\n    world,\n  ),\n}\n\nlet box = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 21 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box2 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 19 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box3 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 17 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet kunai = {\n  ...Entity.createEntity(3, 'Kunai', {\n    body: Components.body(world, { x: 20, y: 21 }),\n    renderer: Components.renderer(world, '<>', 'black'),\n    destructible: Components.destructible(world),\n    attack: Components.attack(),\n    throwable: Components.throwable(world),\n  },\n    world,\n  )\n}\n\nclass Original extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.presserRef = React.createRef();\n  }\n\n  handleKeyPress = (event, world, entity) => {\n    let keymap = {\n      w: 0,\n      d: 1,\n      s: 2,\n      a: 3,\n    };\n\n    let code = event.key;\n    let dir = ROT.DIRS[4][keymap[code]];\n    if (code === 't') {\n      kunai.sendEvent(kunai, 'MOVE', {\n        currentPos: kunai.components.body.pos,\n        targetPos: {\n          x: entity.components.body.pos.x + 1,\n          y: entity.components.body.pos.y,\n        },\n      })\n      return kunai.sendEvent(kunai, 'THROW', { direction: { x: 1, y: 0 } })\n    }\n    if (!(code in keymap)) { return; }\n    let newX = entity.components.body.pos.x + dir[0];\n    let newY = entity.components.body.pos.y + dir[1];\n\n    entity.sendEvent(\n      entity, 'MOVE', {\n        currentPos: entity.components.body.pos,\n        targetPos: {\n          x: newX,\n          y: newY\n        }\n      }\n    )\n\n    return;\n    // return Helper.DRAW(world.map, world.display)\n\n  }\n\n  componentDidMount() {\n    ROT.RNG.setSeed(7);\n    SHOW(world.display.getContainer());\n    CREATE_LEVEL(world);\n    naruto.sendEvent(naruto, 'PREPARE_RENDER')\n    // kunai.sendEvent(kunai, 'PREPARE_RENDER')\n    box.sendEvent(box, 'PREPARE_RENDER')\n    box2.sendEvent(box2, 'PREPARE_RENDER')\n    box3.sendEvent(box3, 'PREPARE_RENDER')\n    Helper.DRAW(world.map, world.display)\n    this.presserRef.current.focus();\n  }\n\n  render() {\n    return (\n      <div className=\"App\" ref={this.presserRef} onKeyDown={(event) => this.handleKeyPress(event, world, naruto)} tabIndex='0'>\n        <div id='display'></div>\n      </div>\n    );\n  }\n}\n\nexport default Original;\n","import React from 'react';\nimport './App.css';\nimport Nystrum from './nystrum/Nystrum';\nimport Original from './original/Original';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <Nystrum />\n        {/* <Original /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}