{"version":3,"sources":["nystrum/Screen/constants.js","helper.js","nystrum/Entities/helper.js","nystrum/constants.js","nystrum/actions.js","nystrum/entites.js","nystrum/items.js","nystrum/Keymap/helper.js","nystrum/Keymap/KeyActions/activateDropItem.js","nystrum/Keymap/KeyActions/activateEquipment.js","nystrum/Keymap/KeyActions/activateInventory.js","nystrum/Keymap/KeyActions/activateThrow.js","nystrum/Keymap/KeyActions/walk.js","nystrum/Keymap/KeyActions/addActor.js","nystrum/Keymap/KeyActions/moveCursor.js","nystrum/Keymap/KeyActions/pickupRandom.js","nystrum/Keymap/KeyActions/signing.js","nystrum/Keymap/KeyActions/activateFlyingLotus.js","nystrum/statusEffects.js","nystrum/Keymap/KeyActions/drunkenFist.js","nystrum/Keymap/KeyActions/sandTomb.js","nystrum/Keymap/KeyActions/sandPulseV2.js","nystrum/Keymap/KeyActions/sandWall.js","nystrum/Keymap/KeyActions/none.js","nystrum/Characters/RockLee.js","nystrum/Keymap/KeyActions/removeWeights.js","nystrum/Keymap/KeyActions/leafWhirlwind.js","nystrum/Keymap/KeyActions/openInnerGate.js","nystrum/engine.js","nystrum/game.js","nystrum/UI/Button.js","nystrum/UI/Information.js","nystrum/UI/Equipment.js","nystrum/UI/Inventory.js","nystrum/UI/Keymap.js","nystrum/Screen/Level.js","nystrum/Screen/Title.js","nystrum/Characters/Gaara.js","nystrum/Keymap/KeyActions/sandClone.js","nystrum/Keymap/KeyActions/sandSkin.js","nystrum/Characters/NarutoUzumaki.js","nystrum/Keymap/KeyActions/cloneSelf.js","nystrum/Keymap/KeyActions/charging.js","nystrum/Characters/index.js","nystrum/Nystrum.js","original/lib/helper.js","original/lib/entity.js","original/components/index.js","original/Original.js","App.js","serviceWorker.js","index.js"],"names":["SCREENS","TITLE","LEVEL","delay","timeDelayed","Promise","resolve","setTimeout","getRandomInArray","array","Math","floor","random","length","coordsToString","coords","x","y","calculatePath","game","targetPos","currentPos","topology","map","isPassable","type","astar","ROT","AStar","path","compute","push","slice","calculatePathWithRange","range","getRandomPos","keys","Object","key","split","coordinates","parseInt","text","getDestructableEntities","entites","filter","entity","hasOwnProperty","getGranularity","radius","pow","getPointsOnCircumference","centerX","centerY","r","n","list","i","round","cos","PI","sin","destroyEntity","energy","pos","tile","Helper","entities","e","id","engine","actors","removeStatusEffectByActorId","draw","currentActor","COLORS","TILE_KEY","background","foreground","character","passable","animation","HAND_SIGNS","Power","name","description","Energy","Harmony","Healing","Intuition","Awareness","Dimension","Creation","Absolute","DIRECTIONS","N","NE","W","NW","SW","S","SE","E","NONE","EQUIPMENT_TYPES","HEAD","TORSO","BACK","HAND","FEET","EQUIPMENT_LAYOUTS","human","item","CLONE_PATTERNS","verticalLine","x_offset","y_offset","positions","taken","smallSquare","square","bigSquare","circle","PARTICLE_TEMPLATES","default","renderer","color","fail","damage","leaf","PARTICLE_TYPE","directional","ALPHABET","Base","actor","energyCost","processDelay","particles","particleTemplate","Constant","onBefore","onAfter","onSuccess","onFailure","this","life","direction","particle","Particle","console","log","success","alternative","AddStatusEffect","effect","args","addStatusEffect","forEach","addParticle","sign","Say","message","EquipItemFromContainer","equipmentType","itemInSlot","getItemInSlot","addToContainer","unequip","removeFromContainer","equip","UnequipItem","DropItem","PickupItem","it","DestroySelf","destroy","CloneSelf","cloneArgs","createClone","Charge","chargeAmount","increaseCharge","Sign","addSign","SignRelease","requiredSequence","signHistory","concat","relevantHistory","max","JSON","stringify","requiredSequenceIsFulfilled","join","clearSigns","CursorMove","cursorCanOccupyPosition","PlaceItems","targetPositions","canOccupyPosition","clone","cloneDeep","uuid","placeActorOnMap","Move","move","Action","ProjectileMove","damageToSelf","MoveMultiple","stepCount","setNextAction","Shove","shove","Tackle","additionalAttackDamage","attack","Attack","entityTypes","includes","SelfDestructiveAttack","decreaseDurabilityWithoutDefense","MultiTargetAttack","particlePath","particlePos","attackSuccess","ThrowProjectile","move_result","shift","ThrowProjectileGas","CrankEngine","start","Entity","Parent","superclass","children","Engine","isInitialized","child","destroyChild","canAttack","bind","addActor","initialize","Attacking","attackDamage","additional","targets","target","getAttackDamage","equipment","slot","decreaseDurability","Acting","actions","speed","action","value","Rendering","currentFrame","targetTile","newPos","Playing","keymap","nextAction","Chasing","targetEntity","Destructable","durability","defense","onDestroy","current","newDurability","getDefense","min","UI_Actor","pipe","initiatedBy","active","Wall","MovingWall","Bandit","Player","charge","chargeMax","container","itemType","items","slotName","find","foundSlot","currentGate","gates","damageBuff","speedBuff","durabilityDebuff","nextGate","nextGateIndex","findIndex","gate","cloneLimit","clones","index","c","super__destroy","splice","destroyClone","arg","attribute","addActorAsNext","Weapon","DestructiveProjectile","createPath","DirectionalProjectile","DestructiveCloudProjectileV2","owner_id","isClone","cloneCount","clonePattern","offset","cloneDeepWith","referencePos","step","nextPos","getNextPos","TYPE","sandTomb","structureType","createProjectile","structure","position","targetPosition","createProjectileSingularity","sandTombPart","kunai","movingSandWall","sword","addAlphabeticallyToKeymap","obj","alphabetAllowed","letter","deactivateUIKeymap","visibleUIKey","currentUiActor","removeActor","createEightDirectionMoveOptions","moveFunction","label","w","activate","d","z","a","q","activateDropItem","visibleInventory","ui","addActorAsPrevious","Escape","keymapDropFromInventory","activateEquipment","visibleEquipment","keymapEquipment","activateInventory","keymapEquipFromInventory","keymapCursorToThrowItem","cursor","throwDirection","contains","Item","placeActorsOnMap","throwDirectionalKunai","activateThrow","walk","newX","newY","banditStats","banditLevels","getBanditStats","randomlyPlaceActorOnMap","moveCursor","pickupRandom","keymapFlyingLotus","previousKeymap","ENERGY_THRESHOLD","goToPreviousKeymap","createFourDirectionMoveOptions","flyingLotus","lifespan","stepInterval","allowDuplicates","onStart","onStep","onStop","timeToLive","timeSinceLastStep","drunkWalk","originalDirection","count","keymapSandTomb","k","cloud","triggerSandTomb","createSandWall","triggerSandWall","directionString","result","getDirectionKey","sandWall","s","keymapSandWall","none","Keymap","l","speedBoost","damageDebuff","StatusEffect","j","h","g","setNextGate","nextGateToLabel","getNextGate","o","u","p","t","Array","fill","statusEffects","isRunning","gainEnergy","hasEnoughEnergy","getAction","perform","acting","timePassed","processActionFX","processStatusEffects","sortActorsByEnergy","processV2","backToTitle","visibleKeymap","updateMode","updateReact","sort","b","newEffect","actorId","removeDeadStatusEffects","actionSuccess","removeActorFromMap","update","removeDeadParticles","process","GAME_MODE_TYPES","WAVE","Game","display","width","fontSize","bg","tileKey","mode","data","level","highestLevel","localStorage","getItem","setItem","addWaveEnemy","nextModeLevel","initializeMode","setModeLevel","kill","placed","ac","digger","Digger","freeCells","create","ceil","randomlyPlaceAllActorsOnMap","hasImpassableEntity","document","getElementById","appendChild","getContainer","parts","tileRenderer","nextFrame","animateTile","animateEntity","frame","isPlaced","presserRef","show","createLevel","focus","handleKeyPress","event","code","Button","props","onClick","className","Information","React","Component","Equipment","Inventory","inventory","entries","Level","ENGINE","selectedCharacter","state","activeTab","createRef","setActiveScreen","newGameState","setState","ref","onKeyDown","tabIndex","CharacterSelect","characters","setSelectedCharacter","Title","style","height","backgroundColor","class","disabled","cloneKeymap","defenseBuff","cloneOverrides","Characters","RockLee","Gaara","NarutoUzumaki","Nystrum","characterKey","selected","activeScreen","titleScreen","levelScreen","getActiveScreen","transitionName","transitionAppear","transitionEnter","transitionLeave","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","DRAW","components","getImpassableEntities","impasse","createEntity","world","sendEvent","eventType","parameters","component","self","MAKE_PASSABLE","MAKE_IMPASSABLE","body","MOVE","canOccupy","destructible","DECREASE_DURABILITY","INCREASE_DURABILITY","DESTROY","PREPARE_RENDER","scheduler","Simple","canAct","naruto","reciever","responded","RECIEVE","sender","Components","box","box2","box3","throwable","THROW","nextTile","impassable_and_destructable_entities","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b1f7bef3.chunk.js","sourcesContent":["export const SCREENS = {\n  TITLE: 0,\n  LEVEL: 1,\n}","import * as ROT from 'rot-js';\n\nexport const delay = (timeDelayed = 100) => {\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport const getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const calculatePath = (game, targetPos, currentPos, topology = 4) => {\n  let map = game.map\n  let isPassable = function (x, y) {\n    if (map[x + \",\" + y]) {\n      return (map[x + \",\" + y].type === 'GROUND');\n    } else {\n      return false\n    }\n  }\n  let astar = new ROT.Path.AStar(targetPos.x, targetPos.y, isPassable, { topology });\n  let path = [];\n  astar.compute(currentPos.x, currentPos.y, function (x, y) {\n    path.push({ x, y })\n  });\n\n  return path.slice(1);\n}\n\nexport const calculatePathWithRange = (game, targetPos, currentPos, topology, range) => {\n  let path = calculatePath(game, targetPos, currentPos, topology);\n  return path.slice(0, range + 1);\n}\n\nexport const getRandomPos = (map) => {\n  let keys = Object.keys(map);\n  let key = getRandomInArray(keys).split(',');\n  let pos = { x: parseInt(key[0]), y: parseInt(key[1])}\n  return {coordinates: pos, text: key}\n}\n\nexport const getDestructableEntities = (entites) => {\n  return entites.filter((entity) => entity.hasOwnProperty('durability'));\n}\n\nconst getGranularity = (radius) => {\n  let result = (2 / 3) * (Math.pow(radius, 3) - (9 * Math.pow(radius, 2)) + (32 * radius) - 18)\n  return result\n}\n\nexport const getPointsOnCircumference = (centerX = 0, centerY = 0, r = 3) => {\n  const n = getGranularity(r);\n  let list = [];\n  for (let i = 0; i < n; i++) {\n    let x = Math.round(centerX + (Math.cos(2 * Math.PI / n * i) * r))\n    let y = Math.round(centerY + (Math.sin(2 * Math.PI / n * i) * r))\n    list.push({ x, y });\n  }\n  return list\n}\n","import * as Helper from '../../helper';\n\nexport const destroyEntity = (entity) => {\n  entity.energy = 0;\n  if (entity.pos) {\n    let tile = entity.game.map[Helper.coordsToString(entity.pos)];\n    entity.game.map[Helper.coordsToString(entity.pos)].entities = tile.entities.filter((e) => e.id !== entity.id);\n  }\n  entity.game.engine.actors = entity.game.engine.actors.filter((e) => e.id !== entity.id);\n  entity.game.engine.removeStatusEffectByActorId(entity.id);\n  entity.game.draw()\n  entity.game.engine.currentActor = entity.game.engine.currentActor % entity.game.engine.actors.length; \n\n}","import * as Helper from '../helper'\n\nexport const ENERGY_THRESHOLD = 100;\n\nexport const COLORS = {\n  black_1: '#424242',\n  gray_1: '#262d37',\n  gray_2: '#606b79',\n  green_1: '#1d533c',\n  green_2: '#227743',\n  green_3: '#2d9c59',\n}\n\nexport const TILE_KEY = {\n  'GROUND': {\n    background: COLORS.black_1,\n    foreground: COLORS.gray_2,\n    character: '.',\n    passable: true,\n  },\n  'WALL': {\n    background: COLORS.black_1,\n    foreground: COLORS.gray_2,\n    character: '#',\n    passable: false,\n  },\n  'WATER': {\n    animation: [\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#9dc3d3', character: '░', passable: false,},\n      { background: '#424242', foreground: '#8aa', character: '▒', passable: false, },\n      { background: '#424242', foreground: '#8aa', character: '▓', passable: false, },\n    ],\n    background: '#9dc3d3',\n    character: '░',\n    passable: false,\n  },\n  'WIN': {\n    background: 'white',\n    foreground: 'black',\n    character: 'W',\n    passable: true,\n  }\n}\n\nexport const HAND_SIGNS = {\n  Power: {\n    type: 'Power',\n    name: 'Rin',\n    description: 'Strength of mind, body, spirit',\n  },\n  Energy: {\n    type: 'Energy',\n    name: 'Pyo',\n    description: 'energy direction',\n  },\n  Harmony: {\n    type: 'Harmony',\n    name: 'To',\n    description: 'one- ness with the universe or self',\n  },\n  Healing: {\n    type: 'Healing',\n    name: 'Sha',\n    description: 'of self and others',\n  },\n  Intuition: {\n    type: 'Intuition',\n    name: 'Kai',\n    description: 'premonition of danger, feeling others intent',\n  },\n  Awareness: {\n    type: 'Awareness',\n    name: 'Jin',\n    description: 'feeling thoughts of others, perhaps hiding your own',\n  },\n  Dimension: {\n    type: 'Dimension',\n    name: 'Retsu',\n    description: 'control of time and space',\n  },\n  Creation: {\n    type: 'Creation',\n    name: 'Zai',\n    description: 'understanding nature',\n  },\n  Absolute: {\n    type: 'Absolute',\n    name: 'Zen',\n    description: 'enlightenment',\n  }, \n}\n\nexport const DIRECTIONS = {\n  N: [0, -1],\n  NE: [1, -1],\n  W: [-1, 0],\n  NW: [-1, -1],\n  SW: [-1, 1],\n  S: [0, 1],\n  SE: [1, 1],\n  E: [1, 0],\n  NONE: [0, 0],\n}\n\nexport const getDirectionKey = (direction) => {\n  let directionString = `${direction}`;\n  let keys = Object.keys(DIRECTIONS);\n  let result = false\n  keys.forEach((key) => {\n    if (`${DIRECTIONS[key]}` === directionString) {\n      result = key\n    }\n  })\n  return result\n}\n\nexport const EQUIPMENT_TYPES = {\n  HEAD: 'HEAD',\n  TORSO: 'TORSO',\n  BACK: 'BACK',\n  HAND: 'HAND',\n  FEET: 'FEET',\n}\n\nexport const EQUIPMENT_LAYOUTS = {\n  human: () => {\n    return [\n      {type: EQUIPMENT_TYPES.HEAD, name: 'head', item: null},\n      {type: EQUIPMENT_TYPES.TORSO, name: 'torso', item: null},\n      {type: EQUIPMENT_TYPES.BACK, name: 'back', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'left_hand', item: null},\n      {type: EQUIPMENT_TYPES.HAND, name: 'right_hand', item: null},\n      {type: EQUIPMENT_TYPES.FEET, name: 'feet', item: null},\n    ]\n  }\n}\n\nexport const CLONE_PATTERNS = {\n  verticalLine: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n    ]\n  },\n  smallSquare: {\n    x_offset: 1,\n    y_offset: 1,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n    ]\n  },\n  square: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n    ]\n  },\n  bigSquare: {\n    x_offset: 2,\n    y_offset: 2,\n    positions: [\n      { x: 0, y: 0, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 1, y: 1, taken: false, },\n      { x: 1, y: 0, taken: false, },\n      { x: 1, y: -1, taken: false, },\n      { x: 0, y: -1, taken: false, },\n      { x: -1, y: -1, taken: false, },\n      { x: -1, y: 0, taken: false, },\n      { x: -1, y: 1, taken: false, },\n      { x: 0, y: 1, taken: false, },\n      { x: 2, y: 2, taken: false, },\n      { x: 2, y: 0, taken: false, },\n      { x: 2, y: -2, taken: false, },\n      { x: 0, y: -2, taken: false, },\n      { x: -2, y: -2, taken: false, },\n      { x: -2, y: 0, taken: false, },\n      { x: -2, y: 2, taken: false, },\n    ],\n  },\n  circle: {\n    x_offset: 0,\n    y_offset: 0,\n    positions: [\n      ...Helper.getPointsOnCircumference(0, 0, 2),\n      ...Helper.getPointsOnCircumference(0, 0, 3)\n    ]\n  },\n}\n\nexport const PARTICLE_TEMPLATES = {\n  default: {\n    renderer: {\n      character: '*',\n      color: 'black',\n      background: 'white',\n    }\n  },\n  fail: {\n    renderer: {\n      character: 'x',\n      color: 'black',\n      background: 'red',\n    }\n  },\n  damage: {\n    renderer: {\n      character: '*',\n      color: 'darkred',\n      background: 'red',\n    }\n  },\n  leaf: {\n    renderer: {\n      character: '✤',\n      color: '#36635b',\n      background: '#F0D8C0',\n    }\n  },\n}\n\nexport const PARTICLE_TYPE = {\n  directional: 0,\n  path: 1,\n}\n\nexport const ALPHABET = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];","import * as Helper from '../helper';\nimport * as Action from './actions';\nimport * as Constant from './constants';\nimport { destroyEntity } from './Entities/helper';\nimport { cloneDeep } from 'lodash';\nimport uuid from 'uuid/v1';\nimport { Particle } from './entites';\n\nexport class Base {\n  constructor({\n    game, \n    actor, \n    energyCost = 100, \n    processDelay = 50, \n    particles = [], \n    particleTemplate = Constant.PARTICLE_TEMPLATES.default,\n    onBefore = () => null,\n    onAfter = () => null,\n    onSuccess = () => null,\n    onFailure = () => null,\n  }) {\n    this.actor = actor\n    this.game = game\n    this.energyCost = energyCost\n    this.processDelay = processDelay\n    this.particles = particles\n    this.particleTemplate = particleTemplate\n    this.onBefore = onBefore\n    this.onAfter = onAfter\n    this.onSuccess = onSuccess\n    this.onFailure = onFailure\n  }\n\n  addParticle(\n    life, \n    pos, \n    direction, \n    renderer = {...this.particleTemplate.renderer}, \n    type = Constant.PARTICLE_TYPE.directional, \n    path = null\n  ) {\n    let particle = new Particle({\n      game: this.game,\n      name: 'particle',\n      passable: true,\n      life,\n      pos,\n      direction,\n      energy: 100,\n      renderer,\n      type,\n      path,\n    })\n    this.particles.push(particle);\n  }\n\n  removeDeadParticles() {\n    this.particles = this.particles.filter((particle) => particle.life > 0);\n  }\n\n  perform() {\n    console.log(`${this.actor.name} performs`)\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n}\n\nexport class AddStatusEffect extends Base {\n  constructor({ effect, processDelay = 0, ...args }) {\n    super({ ...args });\n    this.effect = effect\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = this.game.engine.addStatusEffect(this.effect);\n    let positions = Helper.getPointsOnCircumference(this.actor.pos.x, this.actor.pos.y, 2);\n    positions.forEach((pos) => {\n      this.addParticle(\n        5, \n        {...pos}, \n        {\n          x: Math.sign(pos.x - this.actor.pos.x), \n          y: Math.sign(pos.y - this.actor.pos.y)\n        },\n      )\n    })\n    if (success) this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Say extends Base {\n  constructor({ message, processDelay = 50, ...args}) {\n    super({...args});\n    this.message = message\n    this.processDelay = processDelay\n  }\n  perform() {\n    console.log(`${this.actor.name} says ${this.message}`);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SayManyThings extends Base {\n  constructor({ messages, processDelay = 50, ...args}) {\n    super({...args});\n    this.messages = messages\n    this.processDelay = processDelay\n  }\n  perform() {\n    let message = this.messages.shift();\n    if (message) {\n      console.log(`${this.actor.name} says ${message}`);\n      this.actor.energy -= this.energyCost;\n    }\n    if (this.messages.length) {\n      this.actor.setNextAction(this);\n    }\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class EquipItemFromContainer extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.actor.addToContainer(itemInSlot);\n        this.actor.unequip(itemInSlot);\n      }\n      this.actor.removeFromContainer(this.item);\n      this.actor.equip(this.item.equipmentType, this.item);\n      console.log(`${this.actor.name} equips ${this.item.name}.`);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class EquipItemFromTile extends Base {\n  // entities can only equip items from their container/inventory\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    if (this.item.equipmentType) {\n      let itemInSlot = this.actor.getItemInSlot(this.item.equipmentType);\n      if (itemInSlot) {\n        this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(itemInSlot);\n      }\n\n      let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n      this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n      \n      this.actor.equip(this.item);\n      console.log(`${this.actor.name} equips ${this.item.name}.`);\n      success = true;\n    }\n\n    this.actor.energy -= this.energyCost;\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class UnequipItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    console.log(`${this.actor.name} puts ${this.item.name} away.`);\n    this.actor.unequip(this.item);\n    this.actor.addToContainer(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DropItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    console.log(`${this.actor.name} drops ${this.item.name}.`);\n    this.actor.removeFromContainer(this.item);\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities.push(this.item);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class PickupItem extends Base {\n  constructor({ item, ...args }) {\n    super({ ...args });\n    this.item = item;\n  }\n  perform() {\n    console.log(`${this.actor.name} picks up ${this.item.name}.`);\n    this.actor.addToContainer(this.item);\n    let entities = this.game.map[Helper.coordsToString(this.actor.pos)].entities\n    this.game.map[Helper.coordsToString(this.actor.pos)].entities = entities.filter((it) => it.id !== this.item.id);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class DestroySelf extends Base {\n  constructor({processDelay = 0, ...args}) {\n    super({...args});\n    this.processDelay = processDelay\n  }\n  perform() {\n    // console.log(`${this.actor.name} is self-destructing`);\n    this.actor.energy -= this.energyCost;\n    this.actor.destroy();\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class CloneSelf extends Base {\n  constructor({cloneArgs = [], ...args}) {\n    super({...args});\n    this.cloneArgs = cloneArgs;\n  }\n\n  perform() {\n    let success = false;\n    if (this.actor.createClone(this.cloneArgs)) {\n      success = true;\n      this.actor.energy -= this.energyCost;\n      console.log(`${this.actor.name} is cloning itself`);\n    }\n    // let clone = cloneDeep(this.actor);\n    // clone.game = this.actor.game;\n    // clone.id = uuid();\n    // this.cloneArgs.forEach((arg) => {\n    //   console.log(arg);\n      \n    //   clone[arg.attribute] = arg.value\n    // });\n    // if (this.game.placeActorOnMap(clone)) {\n    //   this.game.engine.addActorAsNext(clone);\n    //   this.game.draw();\n    //   success = true;\n    // };\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Charge extends Base {\n  constructor({chargeAmount, ...args}) {\n    super({...args});\n    this.chargeAmount = chargeAmount;\n  }\n  perform() {\n    console.log(`${this.actor.name} is charging up!`);\n    this.actor.energy -= this.energyCost;\n    this.actor.increaseCharge(this.chargeAmount);\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class Release extends Base {\n  constructor({ chargeCost, ...args }) {\n    super({ ...args });\n    this.chargeCost = chargeCost;\n  }\n  perform() {\n    let success = false;\n    if (this.actor.charge >= this.chargeCost) {\n      console.log(`${this.actor.name} is releasing ${this.chargeCost} volts!`);\n      this.actor.energy -= this.energyCost;\n      this.actor.decreaseCharge(this.chargeCost);\n      success = true;\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class Sign extends Base {\n  constructor({ sign, ...args }) {\n    super({ ...args });\n    this.sign = sign;\n  }\n  perform() {\n    console.log(`${this.actor.name} threw a ${this.sign.name} sign.`);\n    this.actor.addSign(this.sign);\n    this.actor.energy -= this.energyCost;\n    return {\n      success: true,\n      alternative: null,\n    }\n  }\n};\n\nexport class SignRelease extends Base {\n  constructor({requiredSequence = [], ...args}) {\n    super({...args});\n    this.requiredSequence = requiredSequence;\n  }\n\n  requiredSequenceIsFulfilled () {\n    let signHistory = this.actor.signHistory.concat();\n    let relevantHistory = signHistory.slice(\n      Math.max(signHistory.length - this.requiredSequence.length, 0)\n    )\n    let result = JSON.stringify(relevantHistory) === JSON.stringify(this.requiredSequence);\n    return result\n  }\n\n  perform() {\n    let success = false;\n    if (this.requiredSequenceIsFulfilled()) {\n      console.log(\n        `${this.actor.name} is releasing the power of ${this.requiredSequence.map(\n          (sign) => sign.type\n        ).join(' and ')}!`\n      );\n      this.actor.energy -= this.energyCost;\n      success = true;\n      this.actor.clearSigns();\n    }\n    return {\n      success,\n      alternative: null,\n    }\n  }\n};\n\nexport class CursorMove extends Base {\n  constructor({ targetPos, processDelay = 0, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n\n    if (this.game.cursorCanOccupyPosition(this.targetPos)) {\n      let tile = this.game.map[Helper.coordsToString(this.actor.pos)]\n      this.game.map[Helper.coordsToString(this.actor.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.actor.id) }\n      this.actor.pos = this.targetPos\n      this.game.map[Helper.coordsToString(this.targetPos)].entities.push(this.actor);\n      success = true;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ParticleMove extends CursorMove {\n  constructor({...args}) {\n    super({...args})\n  }\n\n  perform () {\n    this.actor.energy -= this.energyCost;\n    if (this.actor.energy <= 0) {\n      this.actor.destroy();\n      return { success: false }\n    } \n    return super.perform();\n  }\n}\n\nexport class PlaceActor extends Base {\n  constructor({ targetPos, entity, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.entity = entity\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    // let canPlace = true;\n    // if (!this.game.canOccupyPosition(this.targetPos, this.entity)) canPlace = false;\n    // if (this.entity.entityTypes.includes('PARENT')) {\n    //   this.entity.children.forEach((child) => {\n    //     console.log(child.pos);\n        \n    //     if (!this.game.canOccupyPosition(child.pos, child)) canPlace = false;\n    //   })\n    // }\n\n    // if (canPlace) {\n    //   this.entity.pos = this.targetPos;\n    //   this.game.engine.addActorAsPrevious(this.entity);\n    //   this.game.engine.start(); // should this be used outside of engine?\n    //   success = true;      \n    // }\n    if (this.game.canOccupyPosition(this.targetPos, this.entity)) {\n      this.entity.pos = this.targetPos;\n      this.game.engine.addActorAsNext(this.entity);\n      // this.game.engine.addActorAsPrevious(this.entity);\n      // this.game.engine.start(); // BUGGED - should this be used outside of engine?\n      success = true;\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItem extends Base {\n  constructor({ targetPos, entity, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.entity = entity\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (this.game.canOccupyPosition(this.targetPos, this.entity)) {\n      this.entity.pos = this.targetPos;\n      success = this.game.placeActorOnMap(this.entity)\n    }\n      \n    if (success) {\n      this.actor.energy -= this.energyCost;\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class PlaceItems extends PlaceItem {\n  constructor({targetPositions = [], ...args}) {\n    super({...args});\n    this.targetPositions = targetPositions\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    console.log('actor ', this.actor.pos);\n    this.targetPositions.forEach((targetPos) => {\n      console.log('target ', targetPos);\n      \n      if (this.game.canOccupyPosition(targetPos, this.entity)) {\n        let clone = cloneDeep(this.entity);\n        clone.game = this.game;\n        clone.id = uuid();\n        clone.pos = targetPos;\n        let placementSuccess = this.game.placeActorOnMap(clone);\n        if (placementSuccess) success = true;\n      }\n    });\n\n    if (success) this.actor.energy -= this.energyCost;\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Move extends Base {\n  constructor({ targetPos, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ProjectileMove extends Base {\n  constructor({ targetPos, damageToSelf = 1, processDelay = 25, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.damageToSelf = damageToSelf\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.move(this.targetPos);\n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.SelfDestructiveAttack({\n        targetPos: this.targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD,\n        damageToSelf: this.damageToSelf,\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class MoveMultiple extends Base {\n  constructor({ direction, stepCount, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.move(targetPos)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: targetPos,\n        game: this.game, \n        actor: this.actor, \n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Shove extends Base {\n  constructor({ targetPos, direction, ...args }) {\n    super({ ...args });\n    this.targetPos = targetPos\n    this.direction = direction\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let moveSuccess = this.actor.shove(this.targetPos, this.direction)\n    \n    if (moveSuccess) {\n      this.actor.energy -= this.energyCost;\n      success = true;\n    } else {\n      success = true;\n      alternative = new Action.Attack({\n        targetPos: this.targetPos,\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Tackle extends MoveMultiple {\n  constructor({ direction, stepCount, additionalAttackDamage = 0, processDelay = 25, ...args}) {\n    super({...args});\n    this.direction = direction;\n    this.stepCount = stepCount;\n    this.additionalAttackDamage = additionalAttackDamage;\n    this.processDelay = processDelay;\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    let newX = this.actor.pos.x + this.direction[0];\n    let newY = this.actor.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    \n    if (this.stepCount > 0 && this.actor.shove(targetPos, this.direction)) {\n      this.stepCount -= 1;\n      this.actor.energy -= this.energyCost;\n      this.actor.setNextAction(this);\n      for (let i = 0; i < 3; i++) {\n        this.addParticle(\n          1,\n          {\n            x: this.actor.pos.x - (this.direction[0] * i),\n            y: this.actor.pos.y - (this.direction[1] * i),\n          },\n          { x: 0, y: 0 }\n        )\n      }\n      success = true;\n    } else {\n      success = true;\n      this.actor.attack(targetPos, this.additionalAttackDamage);\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class Attack extends Base {\n  constructor({ targetPos, processDelay = 100, ...args}) {\n    super({...args});\n    this.targetPos = targetPos\n    this.processDelay = processDelay\n    this.particleTemplate = Constant.PARTICLE_TEMPLATES.damage\n  }\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) { \n      return { \n        success: true, \n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      } \n    }\n    \n    success = this.actor.attack(this.targetPos);\n    if (success) {\n      this.addParticle(1, {...this.targetPos}, {x: 0, y:0})\n      this.actor.energy -= this.energyCost;\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class SelfDestructiveAttack extends Attack {\n  constructor({ damageToSelf, ...args }) {\n    super({ ...args });\n    this.damageToSelf = damageToSelf\n    this.onSuccess = () => this.actor.decreaseDurabilityWithoutDefense(damageToSelf)\n    this.onFailure = () => this.actor.destroy()\n  }\n}\n\nexport class MultiTargetAttack extends Base {\n  constructor({ targetPositions, processDelay = 25, ...args }) {\n    super({ ...args });\n    this.targetPositions = targetPositions\n    this.processDelay = processDelay\n  }\n\n  perform() {\n    let success = false;\n    let alternative = null;\n    \n    if (!this.actor.entityTypes.includes('ATTACKING')) {\n      return {\n        success: true,\n        alternative: new Action.Say({\n          message: `Ooh I don\\'t know how to attack`,\n          game: this.game,\n          actor: this.actor,\n        }),\n      }\n    }\n\n    let particlePath = [];\n    let particlePos = { x: this.actor.pos.x, y: this.actor.pos.y };\n    let renderer = this.particleTemplate.renderer;\n    this.targetPositions.forEach((targetPos) => {\n      let attackSuccess = this.actor.attack(targetPos);\n      particlePath.push(targetPos);\n      if (attackSuccess) success = true\n    })\n    this.addParticle(\n      particlePath.length + 1, \n      particlePos, \n      null, \n      renderer, \n      Constant.PARTICLE_TYPE.path, \n      particlePath\n    )\n    \n    if (success) { \n      this.actor.energy -= this.energyCost; \n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n};\n\nexport class ThrowProjectile extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    }\n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      let attackSuccess = this.actor.attack(this.targetPos);\n      if (attackSuccess) {\n        alternative = new Action.DestroySelf({\n          game: this.game,\n          actor: this.actor,\n          energyCost: Constant.ENERGY_THRESHOLD,\n          processDelay: 0,\n        });\n      }\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class ThrowProjectileGas extends Move {\n  constructor({ ...args }) {\n    super({ ...args });\n    this.processDelay = 0\n  }\n\n  perform () {\n    let success = false;\n    let alternative = null;\n    this.actor.passable = false;\n    let move_result = super.perform();\n    if (move_result.success) {\n      this.actor.path.shift();\n      success = true;\n    } \n    if (this.actor.path.length === 0) {\n      success = true;\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    if (move_result.alternative) {\n      this.actor.attack(this.targetPos)\n    }\n\n    return {\n      success,\n      alternative,\n    }\n  }\n}\n\nexport class CrankEngine extends Base {\n  constructor({ engine, ...args }) {\n    super({ ...args });\n    this.engine = engine;\n  }\n  async perform() {\n    let success = true;\n    let alternative = null;\n\n    console.log(`${this.actor.name} is cranking its engine.`);\n    try {\n      await this.engine.start();\n      this.actor.energy -= this.energyCost;\n    } catch (error) {\n      console.log('CrankEngine');\n      console.log(error);\n      alternative = new Action.DestroySelf({\n        game: this.game,\n        actor: this.actor,\n        energyCost: Constant.ENERGY_THRESHOLD,\n      });\n    }\n    \n    return {\n      success,\n      alternative,\n    }\n  }\n};\n","import uuid from 'uuid/v1';\nimport pipe from 'lodash/fp/pipe';\nimport * as Helper from '../helper';\nimport { destroyEntity } from './Entities/helper';\nimport * as Constant from './constants';\nimport * as Action from './actions';\nimport * as Engine from './engine';\nimport { cloneDeep, cloneDeepWith } from 'lodash';\n\nexport class Entity {\n  constructor({ game = null, passable = false}) {\n    let id = uuid();\n    this.entityTypes = ['Entity']\n    this.id = id;\n    this.game = game;\n    this.passable = passable;\n  }\n}\n\nconst Parent = superclass => class extends superclass {\n  constructor({ children = [], engine = new Engine.CrankEngine({}), ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('PARENT');\n    this.children = children;\n    this.engine = engine;\n    this.isInitialized = false;\n  }\n\n  destroyChild(child) {\n    child.energy = 0;\n    let tile = this.game.map[Helper.coordsToString(child.pos)];\n    this.game.map[Helper.coordsToString(child.pos)].entities = tile.entities.filter((e) => e.id !== child.id);\n    this.engine.actors = this.engine.actors.filter((e) => e.id !== child.id);\n    this.game.draw()\n  }\n\n  canAttack (entity) {\n    const childIds = this.children.map((child) => child.id); \n    return !childIds.includes(entity.id)\n  }\n  \n  initialize() {\n    this.isInitialized = true;\n    this.engine.game = this.game;\n    this.engine.actors = this.children;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this.game;\n      actor.destroy = () => {this.destroyChild(actor)};\n      actor.canAttack = this.canAttack.bind(this);\n      // actor.canAttack = (entity) => {this.canAttack(entity)};\n      this.game.placeActorOnMap(actor)\n      this.engine.addActor(actor);\n      this.game.draw();\n    });\n  }\n\n  getAction(game) {\n    // crank engine one turn\n    if (!this.isInitialized) {\n      this.initialize()\n    }\n\n    let result = new Action.CrankEngine({\n      game,\n      actor: this,\n      engine: this.engine,\n      energyCost: Constant.ENERGY_THRESHOLD,\n      processDelay: 10\n    });\n\n    return result;\n  }\n\n}\n\nconst HasInnerGates = superclass => class extends superclass {\n  constructor({ currentGate = null, gates = [], ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('HAS_INNER_GATES');\n    this.currentGate = currentGate;\n    this.gates = [\n      {\n        name: 'Gate of Opening',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '1'\n      },\n      {\n        name: 'Gate of Healing',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '2'\n      },\n      {\n        name: 'Gate of Life',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '3'\n      },\n      {\n        name: 'Gate of Pain',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '4'\n      },\n      {\n        name: 'Gate of Limit',\n        damageBuff: 1,\n        speedBuff: 100,\n        durabilityDebuff: 1,\n        character: '5'\n      },\n    ];\n  }\n\n  setNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n      this.currentGate = { ...nextGate };\n    } else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      console.log('next gate index ', nextGateIndex);\n\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n        this.currentGate = { ...nextGate };\n      }\n    }\n    return nextGate;\n  }\n\n  getNextGate() {\n    let currentGate = this.currentGate;\n    let nextGate = null;\n    if (!currentGate) {\n      nextGate = this.gates[0];\n    } else {\n      let nextGateIndex = this.gates.findIndex((gate) => currentGate.name === gate.name) + 1;\n      console.log('next gate index ', nextGateIndex);\n\n      if (this.gates.length > nextGateIndex) {\n        nextGate = this.gates[nextGateIndex];\n      }\n    }\n    return nextGate;\n  }\n}\n\nconst UI = superclass => class extends superclass {\n  constructor({ initiatedBy = null, ...args }) {\n    super({...args })\n    this.entityTypes = this.entityTypes.concat('UI');\n    this.initiatedBy = initiatedBy;\n    this.active = true;\n  }\n\n  hasEnoughEnergy() {\n    return this.active;\n  }\n}\n\nexport const Attacking = superclass => class extends superclass {\n  constructor({attackDamage = 1, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('ATTACKING')\n    this.attackDamage = attackDamage;\n  }\n\n  getAttackDamage (additional = 0) {\n    return this.attackDamage + additional;\n  }\n\n  canAttack (entity) {\n    return true;\n  }\n\n  attack (targetPos, additional = 0) {\n    let success = false;\n    let tile = this.game.map[Helper.coordsToString(targetPos)]\n    if (!tile) { return success }\n    let targets = Helper.getDestructableEntities(tile.entities);\n    if (targets.length > 0) {\n      let target = targets[0];\n      if (this.canAttack(target)) {\n        let damage = this.getAttackDamage(additional);\n        if (this.entityTypes.includes('EQUIPING')) {\n          this.equipment.forEach((slot) => {\n            if (slot.item) {\n              if (slot.item.entityTypes.includes('ATTACKING')) {\n                damage += slot.item.getAttackDamage();\n              }\n            }\n          });\n        }\n        console.log(`${this.name} does ${damage} to ${target.name}`);\n        target.decreaseDurability(damage);\n        success = true;\n      }\n    }\n\n    return success;\n  }\n}\n\nexport const Equipable = superclass => class extends superclass {\n  constructor({name = 'nameless', equipmentType = Constant.EQUIPMENT_TYPES.HAND, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('EQUIPABLE')\n    this.name = name;\n    this.equipmentType = equipmentType;\n  }\n}\n\nconst Acting = superclass => class extends superclass {\n  constructor({name, actions = [], speed = 100, energy = 0, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('ACTING')\n    this.name = name;\n    this.actions = actions;\n    this.speed = speed;\n    this.energy = speed;\n  }\n\n  getAction() {\n    let action = Helper.getRandomInArray(this.actions)\n    if (action) { return action }\n  }\n\n  gainEnergy(value = this.speed) {\n    this.energy += value;\n  }\n\n  hasEnoughEnergy() {\n    return this.energy > 0;\n  }\n}\n\nconst Rendering = superclass => class extends superclass {\n  constructor({pos = {x: 0, y: 0}, renderer, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('RENDERING')\n    this.pos = pos;\n    this.renderer = {...renderer};\n    this.currentFrame = 0;\n  }\n\n  getPosition () {\n    return this.pos;\n  }\n\n  move (targetPos) {\n    let success = false;\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      let tile = this.game.map[Helper.coordsToString(this.pos)]\n      this.game.map[Helper.coordsToString(this.pos)] = { ...tile, entities: tile.entities.filter((e) => e.id !== this.id) }\n      this.pos = targetPos\n      this.game.map[Helper.coordsToString(targetPos)].entities.push(this);\n      success = true;\n    }\n    return success;\n  }\n\n  shove (targetPos, direction) {\n    let success = false;\n    let targetTile = this.game.map[Helper.coordsToString(targetPos)];\n    if (targetTile) {\n      targetTile.entities.map((entity) => { \n        if (!entity.passable) {\n          let newX = entity.pos.x + direction[0];\n          let newY = entity.pos.y + direction[1];\n          let newPos = { x: newX, y: newY };\n          entity.move(newPos);\n        }\n      });\n    }\n    success = this.move(targetPos);\n    return success;\n  }\n}\n\nconst Containing = superclass => class extends superclass {\n  constructor({container = [], ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CONTAINING')\n    this.container = container;\n  }\n\n  contains (itemType) {\n    let container = this.container;\n    let items = container.filter((item) => item.name === itemType);\n    return items.length > 0 ? items[0] : false;\n  }\n\n  addToContainer (item) {\n    this.container.push(item);\n  }\n  \n  removeFromContainer (item) {\n    this.container = this.container.filter((it) => it.id !== item.id);\n  }\n}\n\nconst Equiping = superclass => class extends superclass {\n  constructor({equipment = Constant.EQUIPMENT_LAYOUTS.human(), ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('EQUIPING')\n    this.equipment = equipment;\n  }\n\n  getItemInSlot (slotName) {\n    let openSlots = this.equipment.filter((slot) => {\n      return (slot.item === null && slot.type === slotName)\n    })\n    if (openSlots.length > 0) { return false; }\n    let slot = this.equipment.find((slot) => slot.type === slotName);\n    if (!slot) { return false; }\n    if (!slot.item) { return false; }\n    return slot.item;\n  }\n\n  equip (slotName, item) {\n    let foundSlot = false;\n    this.equipment = this.equipment.map((slot) => {\n      if (!foundSlot && slot.type === slotName && slot.item === null) {\n        slot.item = item;\n        foundSlot = true;\n      }\n      return slot;\n    })\n  }\n  \n  unequip(item) {\n    this.equipment = this.equipment.map((slot) => {\n      if (slot.item) {\n        if (slot.item.id === item.id) {\n          slot.item = null;\n        }\n      }\n      return slot;\n    })\n  }\n}\n\nconst Charging = superclass => class extends superclass {\n  constructor({charge = 10, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHARGING')\n    this.charge = charge;\n    this.chargeMax = charge;\n  }\n\n  decreaseCharge(value) {\n    this.charge = Math.max(0, this.charge - value);\n  }\n  \n  increaseCharge(value) {\n    this.charge = Math.min(this.chargeMax, this.charge + value);\n  }\n}\n\nconst Signing = superclass => class extends superclass {\n  constructor({...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('SIGNING')\n    this.signHistory = [];\n  }\n\n  addSign(sign) {\n    if (this.signHistory.length >= 4) {\n      this.signHistory.shift();\n    }\n    this.signHistory.push(sign);\n  }\n  \n  clearSigns() {\n    this.signHistory = [];\n  }\n}\n\nconst Playing = superclass => class extends superclass {\n  constructor({keymap = {}, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PLAYING')\n    this.nextAction = null;\n    this.keymap = keymap;\n  }\n\n    setNextAction(action) {\n      this.nextAction = action;\n    }\n\n    getAction() {\n      let action = this.nextAction;\n      this.nextAction = null;\n      return action;\n    }\n}\n\nconst Cloning = superclass => class extends superclass {\n  constructor({cloneLimit = 1, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CLONING')\n    this.cloneLimit = cloneLimit;\n    this.clones = [];\n  }\n  \n  // perhaps clones should have a status effect that leeches parent actor's energy or chakra\n  \n  // status effects should be removed from engine when owner is removed.\n  \n  destroy() {\n    // add function to override self destroy funtion \n    // if this actor dies, clones should be destroyed as well\n    if (this.clones) {\n      this.clones.map((clone) => {\n        destroyEntity(clone)\n      });\n    }\n    destroyEntity(this);\n  }\n\n  destroyClone (id) {\n  // overrides clone destroy function\n  // when clone is destroyed, clone count will change accordingly\n    const index = this.clones.findIndex((c) => c.id == id);\n    if (index >= 0) {\n      this.clones[index].super__destroy();\n      this.clones.splice(index, 1);\n    }\n  }\n\n  createClone (cloneArgs) {\n    if (this.clones.length < this.cloneLimit) {\n      let clone = cloneDeep(this);\n      clone.name += ` Clone ${this.clones.length}`\n      clone.game = this.game;\n      clone.id = uuid();\n      delete clone.clones;\n      clone['super__destroy'] = clone.destroy;\n      clone.destroy = () => { this.destroyClone(clone.id) };\n      cloneArgs.forEach((arg) => {\n        clone[arg.attribute] = arg.value\n      });\n      if (this.game.placeActorOnMap(clone)) {\n        this.game.engine.addActorAsNext(clone);\n        this.game.draw();\n        this.clones.push(clone);\n        return true;\n      };\n    }\n    return false;\n  }\n}\n\nconst Projecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    if (this.game.canOccupyPosition(targetPos, this)) {\n      this.path.shift();\n    }\n    return result;\n  }\n}\n\nconst DestructiveProjecting = superclass => class extends superclass {\n  constructor({path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectile({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst DirectionalProjecting = superclass => class extends superclass {\n  constructor({path = false, direction = {x: 0, y: 0}, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DIRECTIONAL_PROJECTING')\n    this.path = path;\n    this.direction = direction;\n    this.attackDamage = attackDamage;\n    this.range = range;\n  }\n\n  getAction (game) {\n    let result = null;\n    let newX = this.pos.x + this.direction[0];\n    let newY = this.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    this.passable = false\n    \n    if (this.range > 0) {\n      result = new Action.ProjectileMove({\n        targetPos: targetPos,\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        damageToSelf: 1,\n        onSuccess: () => this.range -= 1\n      })\n    } else {\n      result = new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: 0\n      })\n    }\n\n    return result;\n  }\n}\n\nconst DirectionalPushing = superclass => class extends superclass {\n  constructor({path = false, direction = {x: 0, y: 0}, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('DIRECTIONAL_PUSHING')\n    this.path = path;\n    this.direction = direction;\n    this.range = range;\n  }\n\n  getAction (game) {\n    let result = null;\n    let newX = this.pos.x + this.direction[0];\n    let newY = this.pos.y + this.direction[1];\n    let targetPos = { x: newX, y: newY };\n    this.passable = false\n    \n    if (this.range > 0) {\n      result = new Action.Shove({\n        targetPos: targetPos,\n        direction: this.direction,\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        onSuccess: () => this.range -= 1,\n      })\n    } else {\n      result = new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: 0\n      })\n    }\n\n    return result;\n  }\n}\n\nconst GaseousDestructiveProjecting = superclass => class extends superclass {\n  constructor({owner_id = null, path = false, targetPos = null, attackDamage = 1, range = 3, ...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS_DESTRUCTIVE_PROJECTING')\n    this.path = path;\n    this.targetPos = targetPos;\n    this.attackDamage = attackDamage;\n    this.range = range;\n    this.owner_id = owner_id;\n  }\n\n  canAttack (entity) {\n    let success = super.canAttack();\n    if (success) {\n      success = this.owner_id === null || (entity.owner_id !== this.owner_id);\n    }\n    return success\n  }\n\n  createPath (game) {\n    let path = Helper.calculatePathWithRange(game, this.targetPos, this.pos, 8, this.range);\n    this.path = path;\n  }\n\n  getAction (game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    \n    let result = new Action.ThrowProjectileGas({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n\n    return result;\n  }\n}\n\nconst Gaseous = superclass => class extends superclass {\n  constructor({\n    isClone = false,\n    cloneCount = 0,\n    clonePattern = Constant.CLONE_PATTERNS.square,\n    ...args\n  }) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('GASEOUS')\n    this.isClone = isClone;\n    this.cloneCount = cloneCount;\n    this.clonePattern = cloneDeep(clonePattern);\n  }\n\n  getAction (game) {\n    let offset = this.clonePattern.positions.find((pos) => !pos.taken);\n    if (!this.isClone && offset) {\n      offset.taken = true\n      let clone = cloneDeepWith(this, (value, key) => {\n        switch (key) {\n          case 'id':\n          case 'game':\n          case 'engine':\n          case 'clones':\n            return null\n            break;\n          default:\n            return undefined\n            break;\n        }\n      });\n      clone.game = game;\n      clone.id = uuid();\n      if (this.hasOwnProperty('pos')) {\n        let referencePos = this.pos\n        clone.pos = {\n          x: referencePos.x + offset.x,\n          y: referencePos.y + offset.y\n        }\n      }\n      if (clone.hasOwnProperty('path')) {\n        clone.path = clone.path.map((pos) => {\n          return {\n            x: pos.x + offset.x,\n            y: pos.y + offset.y\n          }\n        })\n      }\n      clone.isClone = true\n      this.cloneCount += 1\n      game.placeActorOnMap(clone)\n      game.engine.addActor(clone);\n      game.draw();\n    }\n\n    let result = super.getAction(game);\n    return result;\n  }\n}\n\nconst Chasing = superclass => class extends superclass {\n  constructor({targetEntity = null ,...args}) {\n    super({...args})\n    this.entityTypes = this.entityTypes.concat('CHASING')\n    this.targetEntity = targetEntity;\n  }\n\n  getAction(game) {\n    let path = Helper.calculatePath(game, this.targetEntity.pos, this.pos);\n    let targetPos = path.length > 0 ? path[0] : this.pos;\n\n    let result = new Action.Move({\n      targetPos, \n      game, \n      actor: this, \n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    return result;\n  }\n}\n\nconst Pushing = superclass => class extends superclass {\n  constructor({ path = false, targetPos = null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('PUSHING')\n    this.path = path;\n    this.targetPos = targetPos;\n  }\n\n  createPath(game) {\n    let path = Helper.calculatePath(game, this.targetPos, this.pos, 8);\n    this.path = path;\n  }\n\n  getAction(game) {\n    if (!this.path) {\n      this.createPath(game);\n    }\n    let targetPos = this.path.length > 0 ? this.path[0] : this.pos;\n    let direction = [\n      targetPos.x - this.pos.x ,\n      targetPos.y - this.pos.y ,\n    ]\n    if (direction[0] === 0 && direction[1] === 0) {\n      return new Action.DestroySelf({\n        game: game,\n        actor: this,\n        energyCost: Constant.ENERGY_THRESHOLD,\n        processDelay: 0,\n      });\n    }\n    let result = new Action.Shove({\n      targetPos,\n      direction,\n      game,\n      actor: this,\n      energyCost: Constant.ENERGY_THRESHOLD\n    });\n    this.path.shift();\n\n    return result;\n  }\n}\n\nconst Destructable = superclass => class extends superclass {\n  constructor({durability = 1, defense = 0 ,onDestroy = () => null, ...args }) {\n    super({ ...args })\n    this.entityTypes = this.entityTypes.concat('DESTRUCTABLE')\n    this.durability = durability;\n    this.defense = defense;\n    this.onDestroy = onDestroy;\n  }\n\n  getDefense () {\n    // add in reducer to get defense stats of all equpiment\n    return this.defense;\n  }\n\n  decreaseDurabilityWithoutDefense (value) {\n    this.durability -= value;\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n\n  decreaseDurability (value) {\n    const current = this.durability;\n    const newDurability = current - (value - this.getDefense());\n    this.durability = Math.min(current, newDurability);\n    if (this.durability <= 0) {\n      this.destroy();\n    }\n  }\n\n  increaseDurability (value) {\n    this.durability += value\n  }\n\n  destroy () {\n    this.onDestroy();\n    destroyEntity(this);\n  }\n}\n\nconst IsParticle = superclass => class extends superclass {\n  constructor({\n    pos = { x: 1, y: 1 },\n    direction = { x: 0, y: 0 },\n    life = 1,\n    speed = 1,\n    type = Constant.PARTICLE_TYPE.directional,\n    path = null,\n    ...args\n  }) {\n    super({ ...args })\n    this.pos = pos;\n    this.direction = direction;\n    this.life = life;\n    this.speed = speed;\n    this.type = type;\n    this.path = path;\n    this.entityTypes = this.entityTypes.concat('PARTICLE')\n  }\n\n  getNextPos(step) {\n    switch (this.type) {\n      case Constant.PARTICLE_TYPE.directional:\n        return {\n          x: this.pos.x + (this.direction.x * this.speed) * step,\n          y: this.pos.y + (this.direction.y * this.speed) * step,\n        }\n      case Constant.PARTICLE_TYPE.path:\n        const nextPos = this.path.shift();\n        return nextPos ? {...nextPos} : {...this.pos}\n    }\n  }\n\n  update(step) {\n    this.life -= step;\n    if (this.life > 0) {\n      this.pos = this.getNextPos(step);\n    }\n  }\n}\n\nexport const UI_Actor = pipe(\n  Acting, \n  Rendering, \n  Playing, \n  UI\n)(Entity);\n\nexport const Actor = pipe(\n  Acting, \n  Rendering\n)(Entity);\n\nexport const Wall = pipe(\n  Rendering,\n  Destructable,\n)(Entity);\n\nexport const MovingWall = pipe(\n  Acting,\n  Rendering,\n  // Pushing,\n  DirectionalPushing,\n  Destructable,\n)(Entity);\n\nexport const Chaser = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable\n)(Entity);\n\nexport const Bandit = pipe(\n  Acting, \n  Rendering, \n  Chasing, \n  Destructable,\n  Attacking,\n)(Entity);\n\nexport const Player = pipe(\n  Acting, \n  Rendering, \n  Charging, \n  Signing, \n  Containing, \n  Equiping, \n  Attacking, \n  HasInnerGates,\n  Destructable, \n  Cloning,\n  Playing,\n)(Entity);\n\nexport const Weapon = pipe(\n  Rendering, \n  Equipable, \n  Attacking\n)(Entity);\n\nexport const DestructiveProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  DestructiveProjecting, \n  Destructable\n)(Entity);\n\nexport const DirectionalProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  DirectionalProjecting, \n  Destructable\n)(Entity);\n\nexport const DestructiveCloudProjectile = pipe(\n  Acting, \n  Rendering, \n  Attacking, \n  GaseousDestructiveProjecting, \n  Destructable, \n  Gaseous\n)(Entity);\n\nexport const DestructiveCloudProjectileV2 = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);\n\nexport const Particle = pipe(\n  Acting,\n  Rendering,\n  IsParticle,\n)(Entity);\n\nexport const ParticleEmitter = pipe(\n  Acting, \n  Destructable,\n  Parent, \n)(Entity);","import * as Entity from './entites';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\n\nexport const TYPE = {\n  KUNAI: 'Kunai',\n  DIRECTIONAL_KUNAI: 'Directional Kunai',\n  SWORD: 'Sword',\n  BARRIER: 'Barrier',\n}\n\nconst createProjectileCloud = ({ \n  engine, \n  actor, \n  targetPos, \n  throwDirection,\n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: actor.pos.x + slot.x + (throwDirection.x * structure.x_offset),\n      y: actor.pos.y + slot.y + (throwDirection.y * structure.y_offset)\n    }\n    \n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileSingularity = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + slot.x + structure.x_offset,\n      y: targetPos.y + slot.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x,\n      y: targetPos.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nconst createProjectileBurst = ({ \n  engine, \n  actor, \n  targetPos, \n  speed,\n  structureType,\n  createProjectile,\n}) => {\n  let structure = Constant.CLONE_PATTERNS[structureType];\n\n  let children = structure.positions.map((slot) => {\n    let position = {\n      x: targetPos.x + structure.x_offset,\n      y: targetPos.y + structure.y_offset\n    }\n\n    let targetPosition = {\n      x: targetPos.x + slot.x,\n      y: targetPos.y + slot.y,\n    }\n\n    return createProjectile(engine, position, targetPosition);\n\n  })\n\n  return new Entity.DestructiveCloudProjectileV2({\n    game: engine.game,\n    passable: true,\n    speed,\n    children,\n  })\n}\n\nexport const sandTomb = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileSingularity({\n  engine,\n  actor,\n  targetPos,\n  speed: 100,\n  structureType: 'circle',\n  createProjectile: sandTombPart,\n})\n\nexport const sandBurst = ({\n  engine,\n  actor,\n  targetPos,\n}) => createProjectileBurst({\n  engine,\n  actor,\n  targetPos,\n  speed: 500,\n  structureType: 'circle',\n  createProjectile: sandTombPart,\n})\n\nexport const sandWallPulse = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'smallSquare',\n  createProjectile: movingSandWall,\n})\n\nexport const kunaiCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: kunai,\n})\n\nexport const fireballCloud = ({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n}) => createProjectileCloud({\n  engine,\n  actor,\n  targetPos,\n  throwDirection,\n  speed: 500,\n  structureType: 'square',\n  createProjectile: fireball,\n})\n\nexport const kunai = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    character: '>',\n    color: 'white',\n    background: '',\n    animation: [\n      { background: '', foreground: 'white', character: '>', },\n      { background: '', foreground: 'white', character: 'v', },\n      { background: '', foreground: 'white', character: '<', },\n      { background: '', foreground: 'white', character: '^', },\n      { background: '', foreground: 'white', character: '>', },\n    ],\n  },\n  name: TYPE.KUNAI,\n  speed: 600,\n  energy: 0,\n  range: 30,\n})\n\nexport const directionalKunai = (engine, pos, direction, range) => new Entity.DirectionalProjectile({\n  game: engine.game,\n  direction,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    character: '>',\n    color: 'white',\n    background: '',\n    animation: [\n      { background: 'lightgrey', foreground: 'grey', character: '>', },\n      { background: 'lightgrey', foreground: 'grey', character: 'v', },\n      { background: 'lightgrey', foreground: 'grey', character: '<', },\n      { background: 'lightgrey', foreground: 'grey', character: '^', },\n      { background: 'lightgrey', foreground: 'grey', character: '>', },\n    ],\n  },\n  name: TYPE.DIRECTIONAL_KUNAI,\n  speed: 600,\n  energy: 0,\n  range,\n})\n\nexport const movingSandWall = (engine, pos, targetPos, range) => new Entity.MovingWall({\n  game: engine.game,\n  passable: false,\n  pos: { x: pos.x, y: pos.y },\n  targetPos,\n  renderer: {\n    // character: '>',\n    character: ']',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.KUNAI,\n  // name: TYPE.BARRIER,\n  durability: 3,\n  range,\n  speed: 300,\n})\n\nexport const sandShuriken = (engine, pos, direction, range) => new Entity.DirectionalProjectile({\n  game: engine.game,\n  direction,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.DIRECTIONAL_KUNAI,\n  speed: 600,\n  energy: 0,\n  range,\n})\n\nexport const sandTombPart = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.KUNAI,\n  speed: 600,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireball = (engine, pos, targetPos) => new Entity.DestructiveProjectile({\n  game: engine.game,\n  targetPos,\n  passable: true,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '🔥',\n    color: 'wheat',\n    background: 'tomato',\n  },\n  name: TYPE.KUNAI,\n  speed: 100,\n  energy: 0,\n  range: 30,\n})\n\nexport const fireballGas = (engine, actor, targetPos) => {\n  return new Entity.DestructiveCloudProjectile({\n    game: engine.game,\n    owner_id: actor ? actor.id : null,\n    targetPos,\n    passable: true,\n    pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n    renderer: {\n      // character: '@',\n      character: '🔥',\n      color: 'wheat',\n      background: 'tomato',\n    },\n    name: TYPE.KUNAI,\n    speed: 100,\n    range: 10,\n    clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n    // clonePattern: Constant.CLONE_PATTERNS.square,\n  })\n}\n\nexport const waterball = (engine, actor, targetPos) => new Entity.DestructiveCloudProjectile({\n  game: engine.game,\n  owner_id: actor ? actor.id : null,\n  targetPos,\n  passable: true,\n  pos: actor ? { x: actor.pos.x, y: actor.pos.y } : null,\n  renderer: {\n    // character: '~',\n    character: '🌊',\n    color: 'silver',\n    background: 'lightslategrey',\n  },\n  name: TYPE.KUNAI,\n  speed: 800,\n  range: 10,\n  clonePattern: Constant.CLONE_PATTERNS.bigSquare,\n  // clonePattern: Constant.CLONE_PATTERNS.square,\n})\n\nexport const sword = (engine) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: '',\n  },\n})\n\nexport const test = (engine, pos) => new Entity.Weapon({\n  game: engine.game,\n  name: TYPE.SWORD,\n  passable: true,\n  attackDamage: 1,\n  pos,\n  equipmentType: Constant.EQUIPMENT_TYPES.HAND,\n  renderer: {\n    // character: '|',\n    character: '🗡️',\n    color: 'white',\n    background: 'lightsteelblue',\n  },\n})\n","import { ALPHABET, DIRECTIONS } from '../constants';\n\nexport const addAlphabeticallyToKeymap = (keymap, obj) => {\n  let alphabetAllowed = ALPHABET.filter((letter) => {\n    return !Object.keys(keymap).includes(letter);\n  });\n  keymap[alphabetAllowed[0]] = obj;\n}\n\nexport const deactivateUIKeymap = (engine, visibleUIKey) => {\n  let currentUiActor = engine.actors[engine.currentActor];\n  engine.game.removeActor(currentUiActor);\n  engine.game[visibleUIKey] = null;\n}\n\nexport const createFourDirectionMoveOptions = (moveFunction, engine, label = 'move') => {\n  return {\n    w: {\n      activate: () => moveFunction(DIRECTIONS.N, engine),\n      label: `${label} N`,\n    },\n    d: {\n      activate: () => moveFunction(DIRECTIONS.E, engine),\n      label: `${label} E`,\n    },\n    x: {\n      activate: () => moveFunction(DIRECTIONS.S, engine),\n      label: `${label} S`,\n    },\n    a: {\n      activate: () => moveFunction(DIRECTIONS.W, engine),\n      label: `${label} W`,\n    },\n  }\n}\n\nexport const createEightDirectionMoveOptions = (moveFunction, engine, label = 'move') => {\n  return {\n    w: {\n      activate: () => moveFunction(DIRECTIONS.N, engine),\n      label: `${label} N`,\n    },\n    e: {\n      activate: () => moveFunction(DIRECTIONS.NE, engine),\n      label: `${label} NE`,\n    },\n    d: {\n      activate: () => moveFunction(DIRECTIONS.E, engine),\n      label: `${label} E`,\n    },\n    c: {\n      activate: () => moveFunction(DIRECTIONS.SE, engine),\n      label: `${label} SE`,\n    },\n    x: {\n      activate: () => moveFunction(DIRECTIONS.S, engine),\n      label: `${label} S`,\n    },\n    z: {\n      activate: () => moveFunction(DIRECTIONS.SW, engine),\n      label: `${label} SW`,\n    },\n    a: {\n      activate: () => moveFunction(DIRECTIONS.W, engine),\n      label: `${label} W`,\n    },\n    q: {\n      activate: () => moveFunction(DIRECTIONS.NW, engine),\n      label: `${label} NW`,\n    },\n  }\n}","import * as Constant from '../../constants';\nimport { UI_Actor } from '../../entites';\nimport { DropItem } from '../../actions';\nimport { addAlphabeticallyToKeymap, deactivateUIKeymap } from '../helper';\n\nconst keymapDropFromInventory = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      // g: {\n      activate: () => deactivateUIKeymap(engine, 'visibleInventory'),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.container.map((item, index) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to drop ${item.name}`);\n      initiatedBy.setNextAction(new DropItem({\n        item,\n        game: engine.game,\n        actor: initiatedBy,\n        energyCost: Constant.ENERGY_THRESHOLD\n      }));\n      deactivateUIKeymap(engine, 'visibleInventory');\n    }\n    obj['label'] = `Drop ${item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const activateDropItem = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleInventory = currentActor.container;\n\n  let ui = new UI_Actor({\n    initiatedBy: currentActor,\n    pos: { ...currentActor.pos },\n    renderer: {\n      character: 'D',\n      color: 'white',\n      background: '',\n    },\n    name: 'Drop',\n    game: engine.game,\n  })\n  engine.addActorAsPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapDropFromInventory(engine, currentActor);\n}","import { UI_Actor } from '../../entites';\nimport { UnequipItem } from '../../actions';\nimport { addAlphabeticallyToKeymap, deactivateUIKeymap } from '../helper';\n\nconst keymapEquipment = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      activate: () => deactivateUIKeymap(engine, 'visibleEquipment'),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.equipment.filter((slot) => slot.item).map((slot) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to unequip ${slot.item.name}`);\n      initiatedBy.setNextAction(new UnequipItem({\n        item: slot.item,\n        game: engine.game,\n        actor: initiatedBy,\n      }))\n      deactivateUIKeymap(engine, 'visibleEquipment');\n    }\n    obj['label'] = `Unequip ${slot.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const activateEquipment = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleEquipment = currentActor.equipment;\n\n  let ui = new UI_Actor({\n    initiatedBy: currentActor,\n    pos: { ...currentActor.pos },\n    renderer: {\n      character: 'E',\n      color: 'white',\n      background: '',\n    },\n    name: 'Equipment',\n    game: engine.game,\n  })\n  engine.addActorAsPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapEquipment(engine, currentActor);\n}","import { UI_Actor } from '../../entites';\nimport { EquipItemFromContainer } from '../../actions';\nimport { addAlphabeticallyToKeymap, deactivateUIKeymap } from '../helper';\n\nconst keymapEquipFromInventory = (engine, initiatedBy) => {\n  let keymap = {\n    Escape: {\n      activate: () => deactivateUIKeymap(engine, 'visibleInventory'),\n      label: 'Close',\n    }\n  };\n\n  initiatedBy.container.map((item, index) => {\n    let obj = {\n      activate: null,\n      label: ''\n    }\n    obj['activate'] = () => {\n      console.log(`setting action for ${initiatedBy.name} to equip ${item.name}`);\n      initiatedBy.setNextAction(new EquipItemFromContainer({\n        item,\n        game: engine.game,\n        actor: initiatedBy,\n      }))\n      deactivateUIKeymap(engine, 'visibleInventory');\n    }\n    obj['label'] = `Equip ${item.name}`;\n    addAlphabeticallyToKeymap(keymap, obj);\n    return true;\n  })\n\n  return keymap;\n}\n\nexport const activateInventory = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  engine.game.visibleInventory = currentActor.container;\n\n  let ui = new UI_Actor({\n    initiatedBy: currentActor,\n    pos: { ...currentActor.pos },\n    renderer: {\n      character: 'I',\n      color: 'white',\n      background: '',\n    },\n    name: 'Inventory',\n    game: engine.game,\n    // keymap: keymapEquipFromInventory(engine, currentActor),\n  })\n  engine.addActorAsPrevious(ui);\n  engine.game.placeActorOnMap(ui)\n  engine.game.draw()\n  ui.keymap = keymapEquipFromInventory(engine, currentActor);\n}","import * as Action from '../../actions';\nimport * as Constant from '../../constants';\nimport * as Item from '../../items';\nimport { UI_Actor } from '../../entites';\nimport { createEightDirectionMoveOptions } from '../helper';\n\nconst throwDirectionalKunai = (direction, engine, actor) => {\n  let cursor = engine.actors[engine.currentActor];\n  cursor.active = false;\n  let throwDirection = {\n    x: Math.sign(cursor.pos.x - actor.pos.x),\n    y: Math.sign(cursor.pos.y - actor.pos.y),\n  }\n  engine.game.removeActor(cursor);\n  let kunai = actor.contains(Item.TYPE.DIRECTIONAL_KUNAI);\n  if (kunai) {\n    kunai.game = engine.game;\n    kunai.pos = {\n      x: actor.pos.x + throwDirection.x,\n      y: actor.pos.y + throwDirection.y,\n    };\n    kunai.direction = direction;\n    actor.removeFromContainer(kunai);\n    engine.addActorAsPrevious(kunai);\n    engine.game.placeActorsOnMap();\n    engine.game.draw();\n    actor.setNextAction(\n      new Action.Say({\n        message: `I'll get you with this kunai!`,\n        game: engine.game,\n        actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    )\n  } else {\n    console.log('I have no kunais left');\n  }\n}\n\nconst keymapCursorToThrowItem = (engine, initiatedBy) => {\n  return {\n    ...createEightDirectionMoveOptions(\n      (direction, engine) => throwDirectionalKunai(direction, engine, initiatedBy),\n      engine,\n      'throw',\n    )\n  }\n}\n\nexport const activateThrow = (engine) => {\n  let game = engine.game;\n  let currentActor = engine.actors[game.engine.currentActor]\n  let pos = currentActor.pos;\n\n  let cursor = new UI_Actor({\n    initiatedBy: currentActor,\n    pos,\n    renderer: {\n      character: '█',\n      color: 'white',\n      background: '',\n    },\n    name: 'Cursor',\n    game,\n    keymap: keymapCursorToThrowItem(engine, currentActor),\n  })\n  engine.addActorAsPrevious(cursor);\n  engine.game.placeActorOnMap(cursor)\n  engine.game.draw()\n}","import { Move } from '../../actions';\nimport * as Constant from '../../constants';\n\nexport const walk = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Move({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}","import * as Helper from '../../../helper';\nimport { Bandit } from '../../entites';\n\nconst getBanditStats = () => {\n  let banditLevels = [\n    {\n      name: 'Ross',\n      renderer: {\n        character: Helper.getRandomInArray(['◉']),\n        color: '#ced5dd',\n        background: '',\n      },\n      durability: 1,\n      attackDamage: 1,\n      speed: 100,\n    },\n    {\n      name: 'Kevin',\n      renderer: {\n        character: Helper.getRandomInArray(['◉']),\n        color: '#3fc072',\n        background: '',\n      },\n      durability: 2,\n      attackDamage: 1,\n      speed: 100,\n    },\n    {\n      name: 'Jacob',\n      renderer: {\n        character: Helper.getRandomInArray(['◉']),\n        color: '#67a1d7',\n        background: '',\n      },\n      durability: 3,\n      attackDamage: 1,\n      speed: 100,\n    },\n    {\n      name: 'Jarod',\n      renderer: {\n        character: Helper.getRandomInArray(['◉']),\n        color: '#e16264',\n        background: '',\n      },\n      durability: 1,\n      attackDamage: 5,\n      speed: 300,\n    },\n    {\n      name: 'Bigii',\n      renderer: {\n        character: Helper.getRandomInArray(['◉']),\n        color: '#9f62e1',\n        background: '',\n      },\n      durability: 15,\n      attackDamage: 10,\n      speed: 100,\n    },\n  ]\n  return Helper.getRandomInArray(banditLevels);\n\n}\n\nexport const addActor = (game) => {\n  let targetEntity = game.engine.actors[game.engine.currentActor]\n  let pos = Helper.getRandomPos(game.map).coordinates\n  const banditStats = getBanditStats();\n  let actor = new Bandit({\n    targetEntity,\n    pos,\n    renderer: banditStats.renderer,\n    name: banditStats.name,\n    game,\n    actions: [],\n    attackDamage: banditStats.attackDamage,\n    durability: banditStats.durability,\n    speed: banditStats.speed,\n  })\n  // game.placeActorOnMap(actor)\n  if (game.randomlyPlaceActorOnMap(actor)) {\n    game.engine.addActor(actor);\n    game.draw();\n  };\n}","import { CursorMove } from '../../actions';\n\nexport const moveCursor = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new CursorMove({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: 0,\n  }))\n}","import { PickupItem } from '../../actions';\nimport { ENERGY_THRESHOLD } from '../../constants';\nimport { coordsToString, getRandomInArray } from '../../../helper';\n\nexport const pickupRandom = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let entities = engine.game.map[coordsToString(actor.pos)].entities.filter((e) => e.id !== actor.id);\n  if (entities.length > 0) {\n    actor.setNextAction(new PickupItem({\n      item: getRandomInArray(entities),\n      game: engine.game,\n      actor,\n      energyCost: ENERGY_THRESHOLD\n    }));\n  }\n  else {\n    console.log('nothing to pickup.');\n  }\n};","import { Sign, SignRelease } from '../../actions';\nimport { ENERGY_THRESHOLD, HAND_SIGNS } from '../../constants';\n\n/******************** PLAYER ********************/\nexport const sign = (sign, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Sign({\n    sign,\n    game: engine.game,\n    actor,\n    energyCost: ENERGY_THRESHOLD\n  }));\n};\n\nexport const signRelease = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new SignRelease({\n    requiredSequence: [\n      HAND_SIGNS.Power,\n      HAND_SIGNS.Healing,\n    ],\n    game: engine.game,\n    actor,\n    energyCost: ENERGY_THRESHOLD\n  }));\n};","import { Tackle } from '../../actions';\nimport { ENERGY_THRESHOLD, PARTICLE_TEMPLATES } from '../../constants';\nimport { createFourDirectionMoveOptions } from '../helper';\n\nconst flyingLotus = (direction, stepCount, energyCost, additionalAttackDamage, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Tackle({\n    direction,\n    stepCount,\n    game: engine.game,\n    actor,\n    additionalAttackDamage,\n    energyCost,\n    particleTemplate: PARTICLE_TEMPLATES.leaf\n  }))\n}\n\nconst keymapFlyingLotus = (engine, initiatedBy, previousKeymap) => {\n  const energyCost = Math.floor(ENERGY_THRESHOLD / 2);\n  const stepCount = Math.floor(initiatedBy.energy / energyCost) - 1;\n  const additionalAttackDamage = stepCount;\n  const goToPreviousKeymap = () => initiatedBy.keymap = previousKeymap;\n  return {\n    Escape: {\n      activate: goToPreviousKeymap,\n      label: 'Close',\n    },\n    ...createFourDirectionMoveOptions(\n      (direction, engine) => {\n        flyingLotus(direction, stepCount, energyCost, additionalAttackDamage, engine);\n        goToPreviousKeymap();\n      },\n      engine,\n      'activate',\n    ),\n  };\n}\n\nexport const activateFlyingLotus = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  currentActor.keymap = keymapFlyingLotus(engine, currentActor, { ...currentActor.keymap });\n}","export class Base {\n  constructor({ \n    game, \n    actor, \n    name = 'Effect', \n    lifespan = 100,\n    stepInterval = 100,\n    allowDuplicates = true,\n    onStart = () => null,\n    onStep = () => null,\n    onStop = () => null,\n  }) {\n    this.game = game\n    this.actor = actor\n    this.name = name\n    this.lifespan = lifespan\n    this.timeToLive = lifespan\n    this.stepInterval = stepInterval\n    this.allowDuplicates = allowDuplicates\n    this.timeSinceLastStep = 0;\n    this.onStart = onStart\n    this.onStep = onStep\n    this.onStop = onStop\n  }\n}","import { DIRECTIONS, ENERGY_THRESHOLD } from '../../constants';\nimport * as StatusEffect from '../../statusEffects';\nimport { AddStatusEffect, Move } from '../../actions';\nimport { walk } from './walk';\nimport { getRandomInArray } from '../../../helper';\n\nconst drunkWalk = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let originalDirection = [...direction];\n  let chance = Math.random();\n  if (chance < 0.5) {\n    console.log('drunk misstep');\n    let count = 100\n    while ((direction[0] === originalDirection[0] && direction[1] === originalDirection[1]) || count < 0) {\n      count -= 1;\n      direction = DIRECTIONS[getRandomInArray(Object.keys(DIRECTIONS))];\n    }\n    console.log(count);\n  }\n\n  let newX = actor.pos.x + direction[0];\n  let newY = actor.pos.y + direction[1];\n  actor.setNextAction(new Move({\n    targetPos: { x: newX, y: newY },\n    game: engine.game,\n    actor,\n    energyCost: ENERGY_THRESHOLD\n  }))\n}\n\nexport const drunkenFist = (engine, damageBuff = 1) => {\n  let currentActor = engine.actors[engine.currentActor];\n\n  let effect = new StatusEffect.Base({\n    game: engine.game,\n    actor: currentActor,\n    name: 'Drunk',\n    lifespan: 1000,\n    stepInterval: 100,\n    allowDuplicates: false,\n    onStart: () => {\n      currentActor.attackDamage += damageBuff;\n      currentActor.renderer.character = '?';\n      console.log(`${currentActor.name} took a sip of sake.`);\n      currentActor.keymap.w = {\n        activate: () => drunkWalk(DIRECTIONS.N, engine),\n        label: 'drunken walk'\n      }\n      currentActor.keymap.a = {\n        activate: () => drunkWalk(DIRECTIONS.W, engine),\n        label: 'drunken walk'\n      }\n      currentActor.keymap.s = {\n        activate: () => drunkWalk(DIRECTIONS.S, engine),\n        label: 'drunken walk'\n      }\n      currentActor.keymap.d = {\n        activate: () => drunkWalk(DIRECTIONS.E, engine),\n        label: 'drunken walk'\n      }\n    },\n    onStop: () => {\n      currentActor.attackDamage -= damageBuff;\n      currentActor.renderer.character = 'R';\n      console.log(`${currentActor.name} recovered from drunkeness.`);\n      currentActor.keymap.w = {\n        activate: () => walk(DIRECTIONS.N, engine),\n        label: 'walk'\n      }\n      currentActor.keymap.a = {\n        activate: () => walk(DIRECTIONS.W, engine),\n        label: 'walk'\n      }\n      currentActor.keymap.s = {\n        activate: () => walk(DIRECTIONS.S, engine),\n        label: 'walk'\n      }\n      currentActor.keymap.d = {\n        activate: () => walk(DIRECTIONS.E, engine),\n        label: 'walk'\n      }\n    },\n  });\n  currentActor.setNextAction(new AddStatusEffect({\n    effect,\n    actor: currentActor,\n    game: engine.game,\n    processDelay: 100,\n    particleTemplate: {\n      renderer: {\n        color: '#c45ffd',\n        background: '#424242',\n        character: '?'\n      }\n    },\n  }));\n}","import * as Action from '../../actions';\nimport * as Item from '../../items';\nimport * as Constant from '../../constants';\nimport { UI_Actor } from '../../entites';\nimport { moveCursor } from './moveCursor';\nimport { createEightDirectionMoveOptions } from '../helper';\n\n// ------------ SAND TOMB ----------------------\nconst triggerSandTomb = (engine, actor) => {\n  let cursor = engine.actors[engine.currentActor];\n  // let cloud = Item.sandBurst({\n  let cloud = Item.sandTomb({\n    engine,\n    actor,\n    targetPos: { ...cursor.pos },\n  });\n\n  if (cloud) {\n    engine.addActorAsNext(cloud);\n    actor.setNextAction(\n      new Action.Say({\n        game: engine.game,\n        actor,\n        message: 'I\\'ll crush you!',\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n      // new Action.PlaceActor({\n      //   targetPos: { ...cursor.pos },\n      //   entity: cloud,\n      //   game: engine.game,\n      //   actor,\n      //   // energyCost: actor.energy\n      //   energyCost: Constant.ENERGY_THRESHOLD\n      // })\n    )\n  }\n}\n\nconst keymapSandTomb = (engine, initiatedBy, previousKeymap) => {\n  const goToPreviousKeymap = () => {\n    let cursor = engine.actors[engine.currentActor];\n    cursor.active = false;\n    engine.game.removeActor(cursor);\n  };\n  return {\n    Escape: {\n      activate: goToPreviousKeymap,\n      label: 'Close',\n    },\n    ...createEightDirectionMoveOptions(moveCursor, engine),\n    k: {\n      activate: () => {\n        triggerSandTomb(engine, initiatedBy);\n        goToPreviousKeymap();\n      },\n      label: 'activate'\n    },\n  };\n}\n\nexport const sandTomb = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  let game = engine.game;\n  let pos = currentActor.pos;\n\n  let cursor = new UI_Actor({\n    initiatedBy: currentActor,\n    pos,\n    renderer: {\n      character: '█',\n      color: 'white',\n      background: '',\n    },\n    name: 'Cursor',\n    game,\n    keymap: keymapSandTomb(engine, currentActor, { ...currentActor.keymap }),\n  })\n  engine.addActorAsPrevious(cursor);\n  game.placeActorOnMap(cursor)\n  game.draw()\n}","import * as Action from '../../actions';\nimport * as Constant from '../../constants';\nimport { movingSandWall } from '../../items';\nimport { UI_Actor } from '../../entites';\n\nconst throwDirectionalKunai = (direction, engine, actor) => {\n  let cursor = engine.actors[engine.currentActor];\n  cursor.active = false;\n  engine.game.removeActor(cursor);\n  let kunai = movingSandWall(engine, {...actor.pos}, direction, 10);\n  if (kunai) {\n    kunai.game = engine.game;\n    kunai.direction = direction;\n    actor.removeFromContainer(kunai);\n    engine.addActorAsPrevious(kunai);\n    engine.game.placeActorsOnMap();\n    engine.game.draw();\n    actor.setNextAction(\n      new Action.Say({\n        message: `I'll get you with this kunai!`,\n        game: engine.game,\n        actor,\n        energyCost: Constant.ENERGY_THRESHOLD\n      })\n    )\n  } else {\n    console.log('I have no kunais left');\n  }\n}\n\nconst keymapCursorToThrowItem = (engine, initiatedBy) => {\n  return {\n    w: {\n      activate: () => throwDirectionalKunai(Constant.DIRECTIONS.N, engine, initiatedBy),\n      label: 'throw N',\n    },\n    e: {\n      activate: () => throwDirectionalKunai(Constant.DIRECTIONS.NE, engine, initiatedBy),\n      label: 'throw NE',\n    },\n    d: {\n      activate: () => throwDirectionalKunai(Constant.DIRECTIONS.E, engine, initiatedBy),\n      label: 'throw E',\n    },\n    c: {\n      activate: () => throwDirectionalKunai(Constant.DIRECTIONS.SE, engine, initiatedBy),\n      label: 'throw SE',\n    },\n    x: {\n      activate: () => throwDirectionalKunai(Constant.DIRECTIONS.S, engine, initiatedBy),\n      label: 'throw S',\n    },\n    z: {\n      activate: () => throwDirectionalKunai(Constant.DIRECTIONS.SW, engine, initiatedBy),\n      label: 'throw SW',\n    },\n    a: {\n      activate: () => throwDirectionalKunai(Constant.DIRECTIONS.W, engine, initiatedBy),\n      label: 'throw W',\n    },\n    q: {\n      activate: () => throwDirectionalKunai(Constant.DIRECTIONS.NW, engine, initiatedBy),\n      label: 'throw NW',\n    },\n  };\n}\n\nexport const sandPulse = (engine) => {\n  let game = engine.game;\n  let currentActor = engine.actors[game.engine.currentActor]\n  let pos = currentActor.pos;\n\n  let cursor = new UI_Actor({\n    initiatedBy: currentActor,\n    pos,\n    renderer: {\n      character: '█',\n      color: 'white',\n      background: '',\n    },\n    name: 'Cursor',\n    game,\n    keymap: keymapCursorToThrowItem(engine, currentActor),\n  })\n  engine.addActorAsPrevious(cursor);\n  engine.game.placeActorOnMap(cursor)\n  engine.game.draw()\n}","import { Wall } from '../../entites';\nimport { PlaceItems } from '../../actions';\nimport { TYPE } from '../../items';\nimport { getDirectionKey, DIRECTIONS, ENERGY_THRESHOLD } from '../../constants';\n\n// ------------ SAND WALL ----------------------\nconst createSandWall = (engine, pos) => new Wall({\n  game: engine.game,\n  passable: false,\n  pos: { x: pos.x, y: pos.y },\n  renderer: {\n    // character: '>',\n    character: '✦️',\n    color: '#A89078',\n    background: '#D8C0A8',\n  },\n  name: TYPE.BARRIER,\n  durability: 3,\n})\n\nconst triggerSandWall = (direction, engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let targetPositions = [];\n  let directionKey = getDirectionKey(direction);\n  switch (directionKey) {\n    case 'N':\n      targetPositions = targetPositions.concat([\n        {\n          x: actor.pos.x - 1,\n          y: actor.pos.y - 1,\n        },\n        {\n          x: actor.pos.x,\n          y: actor.pos.y - 1,\n        },\n        {\n          x: actor.pos.x + 1,\n          y: actor.pos.y - 1,\n        },\n      ]);\n      break;\n    case 'S':\n      targetPositions = targetPositions.concat([\n        {\n          x: actor.pos.x - 1,\n          y: actor.pos.y + 1,\n        },\n        {\n          x: actor.pos.x,\n          y: actor.pos.y + 1,\n        },\n        {\n          x: actor.pos.x + 1,\n          y: actor.pos.y + 1,\n        },\n      ]);\n      break;\n    case 'E':\n      targetPositions = targetPositions.concat([\n        {\n          x: actor.pos.x + 1,\n          y: actor.pos.y - 1,\n        },\n        {\n          x: actor.pos.x + 1,\n          y: actor.pos.y,\n        },\n        {\n          x: actor.pos.x + 1,\n          y: actor.pos.y + 1,\n        },\n      ]);\n      break;\n    case 'W':\n      targetPositions = targetPositions.concat([\n        {\n          x: actor.pos.x - 1,\n          y: actor.pos.y - 1,\n        },\n        {\n          x: actor.pos.x - 1,\n          y: actor.pos.y,\n        },\n        {\n          x: actor.pos.x - 1,\n          y: actor.pos.y + 1,\n        },\n      ]);\n      break;\n    default:\n      break;\n  }\n  actor.setNextAction(new PlaceItems({\n    targetPositions,\n    entity: createSandWall(engine, { ...actor.pos }),\n    game: engine.game,\n    actor,\n    energyCost: ENERGY_THRESHOLD\n  }))\n}\n\nconst keymapSandWall = (engine, initiatedBy, previousKeymap) => {\n  const goToPreviousKeymap = () => initiatedBy.keymap = previousKeymap;\n  return {\n    Escape: {\n      activate: goToPreviousKeymap,\n      label: 'Close',\n    },\n    w: {\n      activate: () => {\n        triggerSandWall(DIRECTIONS.N, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate N',\n    },\n    d: {\n      activate: () => {\n        triggerSandWall(DIRECTIONS.E, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate E',\n    },\n    s: {\n      activate: () => {\n        triggerSandWall(DIRECTIONS.S, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate S',\n    },\n    a: {\n      activate: () => {\n        triggerSandWall(DIRECTIONS.W, engine);\n        goToPreviousKeymap();\n      },\n      label: 'activate W',\n    },\n  };\n}\n\nexport const sandWall = (engine) => {\n  let currentActor = engine.actors[engine.currentActor]\n  currentActor.keymap = keymapSandWall(engine, currentActor, { ...currentActor.keymap });\n}","import { Say } from '../../actions';\nimport * as Constant from '../../constants';\n\nexport const none = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Say({\n    message: 'standing still...',\n    game: engine.game,\n    actor,\n    energyCost: Constant.ENERGY_THRESHOLD\n  }))\n}","// import deps\nimport * as Item from '../items';\nimport * as Entity from '../entites';\nimport * as Constant from '../constants';\nimport * as Keymap from '../Keymap';\nimport { createEightDirectionMoveOptions } from '../Keymap/helper';\n\nexport default function (engine) {\n  // define keymap\n  const keymap = (engine) => {\n    return {\n      ...createEightDirectionMoveOptions(Keymap.walk, engine),\n      s: {\n        activate: () => Keymap.none(engine),\n        label: 'stay',\n      },\n      l: {\n        activate: () => Keymap.activateFlyingLotus(engine),\n        label: 'Flying Lotus',\n      },\n      k: {\n        activate: () => Keymap.removeWeights(engine, 200),\n        label: 'Remove wraps',\n      },\n      j: {\n        activate: () => Keymap.drunkenFist(engine),\n        label: 'Sip Sake',\n      },\n      h: {\n        activate: () => Keymap.leafWhirlwind(engine),\n        label: 'Leaf Whirlwind',\n      },\n      g: {\n        activate: () => Keymap.openInnerGate(engine),\n        label: 'Gate of Opening',\n      },\n      i: {\n        activate: () => Keymap.activateInventory(engine),\n        label: 'Open Inventory',\n      },\n      o: {\n        activate: () => Keymap.activateEquipment(engine),\n        label: 'Open Equipment',\n      },\n      u: {\n        activate: () => Keymap.activateDropItem(engine),\n        label: 'Drop Item',\n      },\n      p: {\n        activate: () => Keymap.pickupRandom(engine),\n        label: 'Pickup',\n      },\n      t: {\n        activate: () => Keymap.activateThrow(engine),\n        label: 'Throw',\n      },\n      // DEV KEYS\n      y: {\n        activate: () => Keymap.addActor(engine.game),\n        label: 'Add NPC',\n      },\n    };\n  }\n  // instantiate class\n  let actor = new Entity.Player({\n    pos: { x: 23, y: 7 },\n    renderer: {\n      character: 'R',\n      color: '#e6e6e6',\n      background: '#36635b',\n    },\n    name: 'Rock Lee',\n    actions: [],\n    speed: 400,\n    durability: 20,\n    keymap: keymap(engine),\n  })\n\n  // add default items to container\n  actor.container = [\n    ...Array(100).fill('').map(() => Item.kunai(engine, { ...actor.pos })),\n    ...Array(100).fill('').map(() => Item.directionalKunai(engine, { ...actor.pos }, null, 10)),\n  ]\n\n  return actor;\n}","import * as StatusEffect from '../../statusEffects';\nimport { AddStatusEffect } from '../../actions';\n\nexport const removeWeights = (engine, speedBoost = 600, damageDebuff = 1) => {\n  let currentActor = engine.actors[engine.currentActor];\n\n  let effect = new StatusEffect.Base({\n    game: engine.game,\n    actor: currentActor,\n    name: 'Removed wraps (weights)',\n    lifespan: 1000,\n    stepInterval: 100,\n    allowDuplicates: false,\n    onStart: () => {\n      currentActor.speed += speedBoost;\n      currentActor.attackDamage = Math.max(0, currentActor.attackDamage - damageDebuff);\n      currentActor.energy += speedBoost;\n      currentActor.renderer.character = '〣'\n      console.log(`${currentActor.name} removed weighted wraps.`);\n    },\n    onStop: () => {\n      currentActor.speed -= speedBoost;\n      currentActor.attackDamage += damageDebuff;\n      currentActor.renderer.character = 'R'\n      console.log(`${currentActor.name} rewrapped weights.`);\n    },\n  });\n  currentActor.setNextAction(new AddStatusEffect({\n    effect,\n    actor: currentActor,\n    game: engine.game,\n    particleTemplate: {\n      renderer: {\n        color: '#424242',\n        background: '#e6e6e6',\n        character: '〣'\n      }\n    }\n  }));\n}","import { MultiTargetAttack} from '../../actions';\nimport { ENERGY_THRESHOLD, PARTICLE_TEMPLATES } from '../../constants';\n\nexport const leafWhirlwind = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let targetPositions = [\n    {\n      x: actor.pos.x - 1,\n      y: actor.pos.y,\n    },\n    {\n      x: actor.pos.x - 1,\n      y: actor.pos.y - 1,\n    },\n    {\n      x: actor.pos.x,\n      y: actor.pos.y - 1,\n    },\n    {\n      x: actor.pos.x + 1,\n      y: actor.pos.y - 1,\n    },\n    {\n      x: actor.pos.x + 1,\n      y: actor.pos.y,\n    },\n    {\n      x: actor.pos.x + 1,\n      y: actor.pos.y + 1,\n    },\n    {\n      x: actor.pos.x,\n      y: actor.pos.y + 1,\n    },\n    {\n      x: actor.pos.x - 1,\n      y: actor.pos.y + 1,\n    },\n  ]\n\n  actor.setNextAction(new MultiTargetAttack({\n    targetPositions,\n    game: engine.game,\n    actor,\n    energyCost: (ENERGY_THRESHOLD * 8),\n    particleTemplate: PARTICLE_TEMPLATES.leaf,\n  }))\n}","import * as StatusEffect from '../../statusEffects';\nimport { AddStatusEffect } from '../../actions';\n\nexport const openInnerGate = (engine) => {\n  let currentActor = engine.actors[engine.currentActor];\n  let nextGate = currentActor.setNextGate();\n  if (nextGate) {\n    let effect = new StatusEffect.Base({\n      game: engine.game,\n      actor: currentActor,\n      name: nextGate.name,\n      lifespan: -1,\n      stepInterval: 100,\n      allowDuplicates: false,\n      onStart: () => {\n        currentActor.speed += nextGate.speedBuff;\n        currentActor.energy += nextGate.speedBuff;\n        currentActor.attackDamage += nextGate.damageBuff;\n        currentActor.renderer.character = nextGate.character;\n        console.log(`${currentActor.name} opened the ${nextGate.name}.`);\n        currentActor.decreaseDurability(nextGate.durabilityDebuff);\n        currentActor.decreaseDurability(0);\n        console.log(`${currentActor.name} suffers ${nextGate.durabilityDebuff} damage from physical stress.`)\n        let nextGateToLabel = currentActor.getNextGate();\n        if (nextGateToLabel) {\n          currentActor.keymap.o.label = nextGateToLabel.name;\n        } else {\n          delete currentActor.keymap.g;\n        }\n      },\n    });\n    currentActor.setNextAction(new AddStatusEffect({\n      effect,\n      actor: currentActor,\n      game: engine.game,\n      processDelay: 25,\n      particleTemplate: {\n        renderer: {\n          color: '#3cc2bb',\n          background: '#24fe88',\n          character: '#'\n        }\n      }\n    }));\n  }\n}","import * as Helper from '../helper';\nimport { Particle } from './entites';\nimport { PARTICLE_TEMPLATES } from './constants';\nimport RockLee from './Characters/RockLee';\n\nexport class Engine {\n  constructor({\n    statusEffects = [],\n    actors = [],\n    currentActor = 0,\n    isRunning = false,\n    game = null,\n  }) {\n    this.statusEffects = statusEffects;\n    this.actors = actors;\n    this.currentActor = currentActor;\n    this.isRunning = isRunning;\n    this.game = game;\n  }\n\n  async processV1 () { // a turn-based system using speed and round-robin\n    let actor = this.actors[this.currentActor]\n    actor.gainEnergy(actor.speed);\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      while (true) {\n        let result = action.perform();\n        this.game.draw();\n        await Helper.delay(action.processDelay);\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    return true\n  }\n\n  async processV2() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (!actor) return false;\n      let timePassed = 0;\n      if (actor.hasEnoughEnergy()) {\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        timePassed += action.energyCost;\n        while (true) {\n          action.onBefore();\n          let result = await action.perform();\n          if (result.success) {\n            action.onSuccess();\n          } else {\n            action.onFailure();\n          }\n          action.onAfter();\n          if (!await this.processActionFX(action, result.success)) {\n              await Helper.delay(action.processDelay);\n              this.game.draw();\n          }\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n        this.processStatusEffects(timePassed);\n      } else {\n        actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    return true\n  }\n\n  // a turn-based system using speed and Action Points\n  // it reorders all actors by energy after every round robin\n  async processV3() { \n    let actor = this.actors[this.currentActor]\n    if (!actor) return false;\n    let timePassed = 0;\n    if (actor.hasEnoughEnergy()) {\n      let action = actor.getAction(this.game);\n      if (!action) { return false; } // if no action given, kick out to UI input\n      timePassed += action.energyCost;\n      while (true) {\n        let result = await action.perform();\n        if (!await this.processActionFX(action, result.success)) {\n            await Helper.delay(action.processDelay);\n            this.game.draw();\n        }\n        if (!result.success) return false;\n        if (result.alternative === null) break;\n        action = result.alternative;\n      }\n      this.processStatusEffects(timePassed);\n    } else {\n      actor.gainEnergy(actor.speed);\n    }\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n    if (this.currentActor === 0) this.sortActorsByEnergy();\n    return true\n  }\n\n  // TODO process that reorders actors after every action\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.processV2();\n    }\n    let actor = this.actors[this.currentActor]\n    \n    if (!actor) {\n      this.game.backToTitle();\n      return false;\n    }\n    \n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    this.game.updateMode();\n    await this.game.updateReact(this.game);\n  }\n  \n  stop() {\n    this.isRunning = false;\n  }\n\n  sortActorsByEnergy () {\n    this.actors = this.actors.sort((a, b) => b.energy - a.energy);\n    console.log(this.actors);\n  }\n\n  addStatusEffect(newEffect) {\n    if (!newEffect.allowDuplicates) {\n      if (this.statusEffects.filter((effect) => (\n        effect.actor.id === newEffect.actor.id &&\n        effect.name === newEffect.name\n      )).length > 0) {\n        console.log(`${newEffect.name} cannot be applied twice to ${newEffect.actor.name}`);\n        return false;\n      };\n    }\n    newEffect.onStart();\n    this.statusEffects.push(newEffect)\n    return true;\n  }\n\n  removeStatusEffectById (id) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.id !== id) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n  \n  removeStatusEffectByActorId (actorId) {\n    this.statusEffects = this.statusEffects.filter((effect) => {\n      if (effect.actor.id !== actorId) return true;\n      effect.onStop();\n      return false;\n    });\n  }\n\n  removeDeadStatusEffects() {\n    this.statusEffects = this.statusEffects.filter((effect) =>{\n      if (effect.lifespan >= 0 && effect.timeToLive <= 0) {\n        effect.onStop();\n        return false;\n      }\n      return true;\n    });\n  }\n\n  processStatusEffects (timePassed) {\n    this.statusEffects.forEach((effect) => {\n      effect.timeSinceLastStep += timePassed;\n      effect.timeToLive -= timePassed;\n      if (effect.timeSinceLastStep >= effect.stepInterval) {\n        effect.onStep();\n        effect.timeSinceLastStep = 0;\n      } \n    });\n    this.removeDeadStatusEffects();\n  }\n\n  async processActionFX (action, actionSuccess) {\n    // EASE IN\n    // let time = .8\n    // let nextT = (t) => t *= t; \n    // EASE OUT\n    // let time = .03\n    // let nextT = (t) => t * (2 - t); \n    // EASE IN OUT QUAD\n    // let time = .4\n    // let nextT = (t) => t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t; \n    // EASE IN CUBIC\n    // let time = .8\n    // let nextT = (t) => t * t * t; \n    // EASE OUT CUBIC\n    // let time = .001\n    // let nextT = (t) => (--t) * t * t + 1; \n    if (!actionSuccess) { \n      // If action is not successful, instead of running action's normal particle animation\n      // we'll show a red X on the entity that initiated the action\n      const particle = new Particle({\n        game: this.game,\n        name: 'particle',\n        passable: true,\n        pos: {...action.actor.pos},\n        renderer: PARTICLE_TEMPLATES.fail.renderer,\n      })\n      this.game.placeActorOnMap(particle);\n      this.game.draw();\n      await Helper.delay(100);\n      this.game.removeActorFromMap(particle);\n      particle.update(1);\n      this.game.draw();\n      action.removeDeadParticles(); // is this needed?\n      return true;\n    }\n\n    if (action.particles.length) {\n      while (action.particles.length > 0) {\n        action.particles.forEach((particle) => {\n          this.game.placeActorOnMap(particle);\n        })\n        this.game.draw();\n        // await Helper.delay(time * 100);\n        // await Helper.delay(time * action.processDelay);\n        await Helper.delay(action.processDelay);\n        action.particles.forEach((particle) => {\n          this.game.removeActorFromMap(particle);\n          particle.update(1);\n\n        })\n        this.game.draw();\n        action.removeDeadParticles();\n        // time = nextT(time);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  addActor (entity) {\n    this.actors.push(entity);\n  }\n\n  addActorAsPrevious (entity) {\n    this.actors.splice(this.currentActor, 0, entity);\n  }\n\n  addActorAsNext (entity) {\n    this.actors.splice(this.currentActor + 1, 0, entity);\n  }\n\n  setActorToPrevious (entity) {\n    this.currentActor -= 1;\n    if (this.currentActor <= -1) this.currentActor = this.actors.length - 1;\n  }\n\n  setActorToNext (entity) {\n    this.currentActor = (this.currentActor + 1) % this.actors.length;\n  }\n\n}\n\n\nexport class CrankEngine extends Engine {\n  async process() { // a turn-based system using speed and Action Points\n    let actor = this.actors[this.currentActor]\n    let acting = true;\n    while (acting) {\n      if (actor.hasEnoughEnergy()) {\n        let action = actor.getAction(this.game);\n        if (!action) { return false; } // if no action given, kick out to UI input\n        while (true) {\n          this.game.draw();\n          let result = await action.perform();\n          await Helper.delay(action.processDelay);\n          if (!result.success) return false;\n          if (result.alternative === null) break;\n          action = result.alternative;\n        }\n      } else {\n        // actor.gainEnergy(actor.speed);\n        acting = false;\n      }\n    }\n    // this.currentActor = (this.currentActor + 1) % this.actors.length;\n    this.currentActor += 1;\n    if (this.currentActor + 1 >= this.actors.length) {\n      this.currentActor = 0;\n      this.actors.forEach((actor) => actor.gainEnergy(actor.speed));\n      return false;\n    }\n    return true\n  }\n\n  async start() {\n    this.isRunning = true;\n    while (this.isRunning) {\n      this.isRunning = await this.process();\n    }\n    let actor = this.actors[this.currentActor]\n    if (actor.keymap) {\n      this.game.visibleKeymap = actor.keymap;\n    }\n    this.game.updateMode();\n    await this.game.updateReact(this.game);\n  }\n}","import React from 'react';\nimport * as ROT from 'rot-js';\nimport * as Constant from './constants';\nimport * as Helper from '../helper';\nimport { addActor as addWaveEnemy } from './Keymap/KeyActions/addActor';\n\nconst GAME_MODE_TYPES = {WAVE: 0};\n\nexport class Game {\n  constructor({\n    engine = null,\n    map = {},\n    display = new ROT.Display({ \n      // forceSquareRatio: true,\n      width: 90,\n      // height: 100,\n      fontSize: 24, \n      bg: '#424242' \n    }),\n    tileKey = Constant.TILE_KEY,\n    mode = {\n      type: GAME_MODE_TYPES.WAVE,\n      data: {\n        level: 1,\n        highestLevel: null,\n      }\n    },\n  }) {\n    this.engine = engine;\n    this.map = map;\n    this.display = display;\n    this.tileKey = tileKey;\n    this.mode = mode;\n  }\n\n  initializeMode () {\n    if (this.mode.type === GAME_MODE_TYPES.WAVE) {\n      let highestLevel = localStorage.getItem('hidden_leaf_rl__highestLevel');\n      if (!highestLevel) { \n        highestLevel = this.mode.data.level;\n      } else { \n        highestLevel = Math.max(highestLevel , this.mode.data.level);\n      }\n      localStorage.setItem('hidden_leaf_rl__highestLevel', highestLevel);\n      this.mode.data.highestLevel = highestLevel\n      for (let i = 0; i < Math.pow(this.mode.data.level, 2); i++) {\n        addWaveEnemy(this);\n      }\n    }\n  }\n  \n  updateMode () {\n    if (this.mode.type === GAME_MODE_TYPES.WAVE) {\n      const nonPlayerCharacters = this.engine.actors.filter((actor) => !actor.entityTypes.includes('PLAYING'));\n      if (!nonPlayerCharacters.length) {\n        this.nextModeLevel();\n        this.initializeMode();\n      }\n    }\n  }\n\n  setModeLevel (level) {\n    this.mode.data.level = level;\n  }\n\n  nextModeLevel () {\n    this.setModeLevel(this.mode.data.level + 1);\n  }\n  \n  resetMode () {\n    this.setModeLevel(1);\n    this.initializeMode();\n  }\n\n  randomlyPlaceActorOnMap(actor) {\n    let kill = 0;\n    let placed = false;\n    while (!placed) {\n      let pos = Helper.getRandomPos(this.map).coordinates\n      if (this.canOccupyPosition(pos, actor)) {\n        let tile = this.map[Helper.coordsToString(pos)]\n        actor.pos = { ...pos }\n        tile.entities.push(actor);\n        placed = true;\n      }\n      kill += 1;\n      if (kill >= 100) {\n        placed = true;\n      }\n    }\n    return placed;\n  }\n\n  randomlyPlaceAllActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      this.randomlyPlaceActorOnMap(actor);\n    })\n  }\n\n  placeActorsOnMap() {\n    this.engine.actors.forEach((actor) => {\n      let tile = this.map[Helper.coordsToString(actor.pos)]\n      if (tile) {\n        tile.entities.push(actor);\n      } else {\n        console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      }\n    })\n  }\n\n  placeActorOnMap(actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (tile) {\n      tile.entities.push(actor);\n      return true\n    } else {\n      console.log(`could not place ${actor.id}: ${actor.name} on map`);\n      return false\n    }\n  }\n\n  removeActorFromMap (actor) {\n    let tile = this.map[Helper.coordsToString(actor.pos)]\n    if (!tile) return false;\n    this.map[Helper.coordsToString(actor.pos)].entities = tile.entities.filter((ac) => ac.id !== actor.id);\n    return true;\n  }\n\n  createLevel () {\n    // let digger = new ROT.Map.Arena();\n    // let digger = new ROT.Map.Rogue();\n    // let digger = new ROT.Map.DividedMaze();\n    // let digger = new ROT.Map.EllerMaze();\n    // let digger = new ROT.Map.Cellular();\n    let digger = new ROT.Map.Digger();\n    // let digger = new ROT.Map.IceyMaze();\n    // let digger = new ROT.Map.Uniform();\n    let freeCells = [];\n    let digCallback = function (x, y, value) {\n      let key = x + \",\" + y;\n      let type = 'GROUND';\n      let currentFrame = 0;\n      if (value) { \n        type = 'WALL';\n        // type = 'WATER';\n      }\n\n      if (Constant.TILE_KEY[type].animation) {\n        currentFrame = Helper.getRandomInt(0, Constant.TILE_KEY[type].animation.length)\n      }\n\n      this.map[key] = {\n        type,\n        currentFrame,\n        entities: [],\n      };\n      freeCells.push(key);\n    }\n    digger.create(digCallback.bind(this));\n    this.randomlyPlaceAllActorsOnMap()\n  }\n\n  canOccupyPosition (pos, entity = {passable: false}) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      let hasImpassableEntity = targetTile.entities.filter((entity) => !entity.passable).length > 0;\n      if (!hasImpassableEntity || entity.passable) {\n        let tile = this.map[Helper.coordsToString(pos)];\n        if (this.tileKey[tile.type].passable) {\n          result = true;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  cursorCanOccupyPosition(pos) {\n    let result = false;\n    let targetTile = this.map[Helper.coordsToString(pos)];\n    if (targetTile) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  show () {\n    let d = document.getElementById('display')\n    d.appendChild(this.display.getContainer())\n  }\n\n  draw () {\n    for (let key in this.map) {\n      let parts = key.split(\",\");\n      let x = parseInt(parts[0]);\n      let y = parseInt(parts[1]);\n      let tile = this.map[key];\n      let { character, foreground, background } = this.tileKey[tile.type]\n\n      // Proto code to handle tile animations\n      let tileRenderer = this.tileKey[tile.type]\n      let nextFrame = this.animateTile(tile, tileRenderer);\n      character = nextFrame.character;\n      foreground = nextFrame.foreground;\n      background = nextFrame.background;\n\n      if (tile.entities.length > 0) {\n        let entity = tile.entities[tile.entities.length - 1]\n        nextFrame = this.animateEntity(entity);\n        \n        character = nextFrame.character\n        foreground = nextFrame.foreground\n        if (nextFrame.background) {\n          background = nextFrame.background\n        }\n      }\n      this.display.draw(x, y, character, foreground, background);\n    }\n  }\n\n  animateEntity (entity) {\n    let renderer = entity.renderer;\n    let {character, color, background} = {...renderer}\n    if (renderer.animation) {\n      let frame = renderer.animation[entity.currentFrame];\n\n      character = frame.character;\n      color = frame.foreground;\n      background = frame.background;\n      entity.currentFrame = (entity.currentFrame + 1) % renderer.animation.length;\n    }\n    return {character, foreground: color, background}\n  }\n\n  animateTile (tile, renderer) {\n    let {character, foreground, background} = {...renderer}\n    if (renderer.animation) {\n      let frame = renderer.animation[tile.currentFrame];\n      character = frame.character;\n      foreground = frame.foreground;\n      background = frame.background;\n      tile.currentFrame = (tile.currentFrame + 1) % renderer.animation.length;\n    }\n    return {character, foreground, background}\n  }\n\n  addActor (actor, engine = this.engine) {\n    let isPlaced = this.placeActorOnMap(actor); // replace with placeActorOnMap\n    if (!isPlaced) { return false }\n    engine.actors.push(actor);\n    this.draw();\n    return true\n  }\n\n  placeAndDrawActor (actor) {\n    this.placeActorsOnMap(); // replace with placeActorOnMap\n    this.draw();\n  }\n\n  removeActor (actor) {\n    this.engine.actors = this.engine.actors.filter((ac) => ac.id !== actor.id);\n    // this.engine.currentActor = this.engine.actors.length - 1; // should remove need for this line\n    // this.engine.currentActor = (this.engine.currentActor) % this.engine.actors.length;\n    // this.engine.currentActor = (this.engine.currentActor + 1) % this.engine.actors.length;\n    this.removeActorFromMap(actor);\n    this.draw();\n  }\n\n  initialize (presserRef) {\n    this.engine.game = this;\n    this.engine.actors.forEach((actor) => {\n      actor.game = this;\n    });\n    this.show();\n    this.createLevel();\n    this.draw();\n    presserRef.current.focus();\n    this.initializeMode();\n  }\n}\n\n/************************** UI ********************************/\nexport const handleKeyPress = (event, engine) => {\n  if (!engine.isRunning) {\n    let actor = engine.actors[engine.currentActor];\n    let keymap = actor.keymap;\n    let code = event.key;\n    if (!(code in keymap)) { return; }\n    keymap[code]['activate']();\n    engine.start()\n  }\n  return;\n}\n\nexport const DisplayElement = (presserRef, handleKeyPress, engine) => {\n  return (\n    <div\n      id='display'\n      ref={presserRef}\n      onKeyDown={(event) => handleKeyPress(event, engine)}\n      tabIndex='0'\n    />\n  )\n}\n/************************** UI ********************************/\n","import React from 'react';\n\nfunction Button(props) {\n  let color = props['color'];\n  if (!color) color = 'grey';\n  return (\n    <button\n      onClick={props.onClick}\n      className={`Button btn ${color} darken-3`}\n    >\n      {props.children}  \n    </button>\n  )\n}\n\nexport default Button;\n","import React from 'react';\nimport Button from './Button';\n\nclass Information extends React.Component {\n  render() {\n    return (\n      <div className=\"Information UI\">\n        <div className='flow-text'>Information</div>\n        {\n          this.props.data && (\n            this.props.data.map((item, index) => {\n              return (\n                <Button key={index} color={item['color']} onClick={() => null}>\n                  {`${item.label}: ${item.value}`}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Information;","import React from 'react';\nimport Button from './Button';\n\nclass Equipment extends React.Component {\n  render() {\n    return (\n      <div className=\"Equipment UI\">\n        {\n          this.props.equipment && (\n            <div>\n              <div className='flow-text'>Equipment</div>\n              <div>\n                {\n                  this.props.equipment.map((slot, index) => {\n                    return (\n                      <Button key={index} onClick={() => null}>\n                        {slot.name} {slot.item ? slot.item.renderer.character : ''}\n                      </Button>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Equipment;","import React from 'react';\nimport Button from './Button';\n\nclass Inventory extends React.Component {\n  render() {\n    return (\n      <div className=\"Inventory UI\">\n        {\n          this.props.inventory && (\n            <div>\n              <div className='flow-text'>Inventory</div>\n              <div>\n                {\n                  this.props.inventory.map((item, index) => {\n                    return (\n                      <Button key={index} onClick={() => null}>\n                        {index} {item.name} {item.renderer.character}\n                      </Button>\n                    )\n                  })\n                }\n              </div>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Inventory;","import React from 'react';\nimport Button from './Button';\n\nclass Keymap extends React.Component {\n  render() {\n    return (  \n      <div className=\"Keymap UI\">\n        <div className='flow-text'>Keymap</div>\n        {\n          \n          this.props.keymap && (\n            Object.entries(this.props.keymap).map(([key, value], index) => {\n              return (\n                <Button key={index} onClick={() => null}>\n                  {key} {value.label}\n                </Button>\n              )\n            })\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Keymap;","import React from 'react';\nimport { SCREENS } from './constants';\nimport * as Engine from '../engine';\nimport * as Game from '../game';\nimport Information from '../UI/Information';\nimport Equipment from '../UI/Equipment';\nimport Inventory from '../UI/Inventory';\nimport KeymapUI from '../UI/Keymap';\n\nclass Level extends React.Component {\n  constructor(props) {\n    super(props);\n    let ENGINE = new Engine.Engine({});\n    let actor = this.props.selectedCharacter.initialize(ENGINE);\n    ENGINE.actors.push(actor)\n    let game = new Game.Game({ engine: ENGINE })\n\n    this.state = {\n      game: game,\n      activeTab: 0,\n    };\n    this.presserRef = React.createRef();\n  }\n\n  async componentDidMount() {\n    this.state.game.initialize(this.presserRef)\n    this.state.game['backToTitle'] = () => this.props.setActiveScreen(SCREENS.TITLE);\n    this.state.game.updateReact = (newGameState) => { this.setState({game: newGameState}) }\n    this.state.game.engine.start()\n  }\n\n  render() {\n    let currentActor = this.state.game.engine.actors[this.state.game.engine.currentActor];\n    let data = [\n      {\n        label: 'Wave',\n        value: `Current: ${this.state.game.mode.data.level}, Highest: ${this.state.game.mode.data.highestLevel}`,\n      },\n    ];\n\n    data = data.concat(\n      [\n        ...this.state.game.engine.actors.map((actor, index) => {\n          let result = {\n            label: actor.name,\n            value: index,\n            value: `HP: ${actor.durability}, En/Sp: ${actor.energy}/${actor.speed}`,\n          };\n          if (index === this.state.game.engine.currentActor) {\n            result['color'] = 'red';\n          }\n          return result;\n        })\n      ]\n    )\n\n    return (\n      <div className=\"Level\">\n        <div className='flow-text'>Chunin Exams</div>\n        <button className='btn' onClick={() => this.props.setActiveScreen(SCREENS.TITLE)}>Quit</button>\n        <div className='row'>\n          <div className='col s8 game_display_container'>\n            {Game.DisplayElement(this.presserRef, Game.handleKeyPress, this.state.game.engine)}\n            <Information data={data} />\n          </div>\n          <div className='col s2'>\n            <KeymapUI keymap={this.state.game.visibleKeymap} />\n          </div>\n          <div className='col s2'>\n            <Equipment equipment={this.state.game.visibleEquipment} />\n            <Inventory inventory={this.state.game.visibleInventory} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Level;\n","import React from 'react';\nimport { SCREENS } from './constants';\nconst CharacterSelect = (props) => {\n  return (\n    <div className='CharacterSelect'>\n      {\n        props.characters.map((character, index) => {\n          let color = '';\n          if (props.selectedCharacter) {\n            color = props.selectedCharacter.name === character.name ? 'red' : ''\n          }\n\n          return (\n            <button\n              key={index}\n              className={`CharacterSelect__button btn ${color}`}\n              onClick={() => {\n                props.setSelectedCharacter(character)\n                props.setActiveScreen(SCREENS.LEVEL)\n              }}\n            >\n              {character.name}\n            </button>\n          )\n        })\n      }\n    </div>\n  );\n}\n\nclass Title extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"Title\">\n        <div\n          style={{\n            width: '100vw',\n            height: '100vh',\n            backgroundColor: '#e2e2e2',\n          }}\n        >\n          <div class='flow-text grey-text'>Hidden Leaf RL</div>\n          <CharacterSelect \n            characters={this.props.characters} \n            selectedCharacter={this.props.selectedCharacter} \n            setSelectedCharacter={this.props.setSelectedCharacter}\n            setActiveScreen={this.props.setActiveScreen}\n        />\n          <button \n            class='btn' \n            onClick={() => this.props.setActiveScreen(SCREENS.LEVEL)}\n            disabled={!this.props.selectedCharacter}\n          >\n            Play\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Title;","// import deps\nimport * as Item from '../items';\nimport * as Entity from '../entites';\nimport * as Constant from '../constants';\nimport * as Keymap from '../Keymap';\nimport { createEightDirectionMoveOptions } from '../Keymap/helper';\n\n// create class\nexport default function (engine) {\n  // define keymap\n  const keymap = (engine) => {\n    return {\n      ...createEightDirectionMoveOptions(Keymap.walk, engine),\n      s: {\n        activate: () => Keymap.none(engine),\n        label: 'stay',\n      },\n      l: {\n        activate: () => Keymap.sandClone(engine),\n        label: 'Sand Clone',\n      },\n      k: {\n        activate: () => Keymap.sandTomb(engine),\n        label: 'Sand Tomb',\n      },\n      j: {\n        activate: () => Keymap.sandSkin(engine, 2),\n        label: 'Sand Skin',\n      },\n      h: {\n        activate: () => Keymap.sandWall(engine),\n        label: 'Sand Wall',\n      },\n      g: {\n        activate: () => Keymap.sandPulse(engine),\n        label: 'Sand Pulse',\n      },\n      i: {\n        activate: () => Keymap.activateInventory(engine),\n        label: 'Open Inventory',\n      },\n      o: {\n        activate: () => Keymap.activateEquipment(engine),\n        label: 'Open Equipment',\n      },\n      u: {\n        activate: () => Keymap.activateDropItem(engine),\n        label: 'Drop Item',\n      },\n      p: {\n        activate: () => Keymap.pickupRandom(engine),\n        label: 'Pickup',\n      },\n      t: {\n        activate: () => Keymap.activateThrow(engine),\n        label: 'Throw',\n      },\n      // DEV KEYS\n      y: {\n        activate: () => Keymap.addActor(engine.game),\n        label: 'Add NPC',\n      },\n    };\n  }\n\n\n  let actor = new Entity.Player({\n    pos: { x: 23, y: 7 },\n    renderer: {\n      character: 'G',\n      color: '#F0D8C0',\n      background: '#603030',\n    },\n    name: 'Gaara',\n    actions: [],\n    speed: 200,\n    durability: 15,\n    cloneLimit: 3,\n    keymap: keymap(engine),\n    defense: 2,\n  })\n\n  actor.container = [\n    Item.sword(engine),\n    ...Array(100).fill('').map(() => Item.sandShuriken(engine, { ...actor.pos }, null, 20)),\n    // ...Array(10).fill('').map(() => Item.fireballGas(engine, actor)),\n    // ...Array(10).fill('').map(() => Item.movingSandWall(engine, { ...actor.pos })),\n  ]\n\n  return actor;\n}\n// export instance","import { CloneSelf } from '../../actions';\nimport { cloneDeep } from 'lodash';\n\nexport const sandClone = (engine) => {\n  let actor = engine.actors[engine.currentActor];\n  let cloneKeymap = cloneDeep(actor.keymap);\n  delete cloneKeymap['j'];\n  delete cloneKeymap['k'];\n  delete cloneKeymap['l'];\n  let cloneArgs = [\n    {\n      attribute: 'renderer',\n      value: { ...actor.renderer, background: '#A89078' }\n    },\n    {\n      attribute: 'keymap',\n      value: cloneKeymap\n    }\n  ];\n  actor.setNextAction(new CloneSelf({\n    game: engine.game,\n    actor,\n    cloneArgs,\n  }))\n}","import * as StatusEffect from '../../statusEffects';\nimport { AddStatusEffect } from '../../actions';\n\nexport const sandSkin = (engine, defenseBuff = 1) => {\n  let currentActor = engine.actors[engine.currentActor];\n  let effect = new StatusEffect.Base({\n    game: engine.game,\n    actor: currentActor,\n    name: 'Sand Skin',\n    lifespan: 1000,\n    stepInterval: 100,\n    allowDuplicates: false,\n    onStart: () => {\n      currentActor.defense += defenseBuff;\n      console.log(`${currentActor.name} was enveloped in hardened sand.`);\n      currentActor.renderer.background = '#A89078'\n    },\n    onStop: () => {\n      currentActor.defense = Math.max(0, currentActor.defense - defenseBuff);\n      console.log(`${currentActor.name}'s hardened sand skin fell away.`);\n      currentActor.renderer.background = '#603030';\n    },\n  });\n  currentActor.setNextAction(new AddStatusEffect({\n    effect,\n    actor: currentActor,\n    game: engine.game,\n    particleTemplate: {\n      renderer: {\n        character: '✦️',\n        color: '#A89078',\n        background: '#D8C0A8',\n      }\n    },\n  }));\n}","// import deps\nimport * as Constant from '../constants';\nimport * as Item from '../items';\nimport * as Entity from '../entites';\nimport * as Keymap from '../Keymap';\nimport { createEightDirectionMoveOptions } from '../Keymap/helper';\n// create class\n\nconst keymap = (engine) => {\n  return {\n    ...createEightDirectionMoveOptions(Keymap.walk, engine),\n    i: {\n      activate: () => Keymap.activateInventory(engine),\n      label: 'Open Inventory',\n    },\n    q: {\n      activate: () => Keymap.activateEquipment(engine),\n      label: 'Open Equipment',\n    },\n    k: {\n      activate: () => Keymap.cloneSelf(engine),\n      label: 'Clone Self',\n    },\n    g: {\n      activate: () => Keymap.activateDropItem(engine),\n      label: 'Drop Item',\n    },\n    p: {\n      activate: () => Keymap.pickupRandom(engine),\n      label: 'Pickup',\n    },\n    t: {\n      activate: () => Keymap.activateThrow(engine),\n      label: 'Throw',\n    },\n    y: {\n      activate: () => Keymap.addActor(engine.game),\n      label: 'Add NPC',\n    },\n    c: {\n      activate: () => Keymap.charge(engine, 1),\n      label: 'Charge',\n    },\n    '1': {\n      activate: () => Keymap.sign(Constant.HAND_SIGNS.Power, engine),\n      label: 'Sign - Power',\n    },\n    '2': {\n      activate: () => Keymap.sign(Constant.HAND_SIGNS.Healing, engine),\n      label: 'Sign - Healing',\n    },\n    '3': {\n      activate: () => Keymap.sign(Constant.HAND_SIGNS.Absolute, engine),\n      label: 'Sign - Absolution',\n    },\n    r: {\n      activate: () => Keymap.signRelease(engine),\n      label: 'Release',\n    },\n  };\n}\n\nexport default function (engine) {\n  let actor = new Entity.Player({\n    pos: { x: 23, y: 7 },\n    renderer: {\n      character: 'N',\n      color: 'black',\n      background: 'orange',\n    },\n    name: 'Naruto Uzumaki',\n    actions: [],\n    speed: 600,\n    durability: 1,\n    keymap: keymap(engine),\n  })\n\n  actor.container = [\n    Item.sword(engine),\n    Item.sword(engine),\n    Item.sword(engine),\n    ...Array(10).fill('').map(() => Item.kunai(engine, { ...actor.pos })),\n  ]\n\n  return actor;\n}\n// export instance","import { CloneSelf } from '../../actions';\n\nexport const cloneSelf = (engine, cloneOverrides = []) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new CloneSelf({\n    game: engine.game,\n    actor,\n    cloneArgs: cloneOverrides,\n  }));\n};","import { Charge, Release } from '../../actions';\nimport { ENERGY_THRESHOLD } from '../../constants';\n\nexport const charge = (engine, chargeAmount) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Charge({\n    chargeAmount,\n    game: engine.game,\n    actor,\n    energyCost: ENERGY_THRESHOLD\n  }));\n};\n\nexport const release = (engine, chargeCost) => {\n  let actor = engine.actors[engine.currentActor];\n  actor.setNextAction(new Release({\n    chargeCost,\n    game: engine.game,\n    actor,\n    energyCost: ENERGY_THRESHOLD\n  }));\n};","import RockLee from './RockLee';\nimport Gaara from './Gaara';\nimport NarutoUzumaki from './NarutoUzumaki';\n\nlet Characters = () => {\n  return {\n    RockLee,\n    Gaara,\n    NarutoUzumaki,\n  }\n}\n\nexport default Characters;","import React from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport { SCREENS } from './Screen/constants';\nimport Level from './Screen/Level';\nimport Title from './Screen/Title';\nimport Characters from './Characters/index';\n\nclass Nystrum extends React.Component {\n  constructor() {\n    super();\n    let characterKey = Characters();\n    let characters = Object.keys(characterKey).map((key, i) => {\n      return {\n        // [key]: characterKey[key],\n        initialize: characterKey[key],\n        selected: false,\n        name: key,\n      }\n    });\n    this.state = {\n      activeScreen: SCREENS.TITLE,\n      characters,\n      selectedCharacter: null,\n    };\n  }\n\n  setActiveScreen (activeScreen) {\n    this.setState({activeScreen})\n  }\n\n  setSelectedCharacter (character) {\n    this.setState({selectedCharacter: {...character}})\n  }\n\n  getActiveScreen () {\n    const titleScreen = <Title \n      key={SCREENS.TITLE} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      setSelectedCharacter={this.setSelectedCharacter.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n      characters={this.state.characters}\n    />\n    const levelScreen = <Level \n      key={SCREENS.LEVEL} \n      setActiveScreen={this.setActiveScreen.bind(this)}\n      selectedCharacter={this.state.selectedCharacter}\n    />\n\n    switch (this.state.activeScreen) {\n      case SCREENS.TITLE:\n        return titleScreen\n      case SCREENS.LEVEL:\n        return levelScreen\n      default:\n        return titleScreen\n    }\n  }\n\n  render() {\n    const activeScreen = this.getActiveScreen();\n    return (\n      <div className=\"Nystrum\">\n        <ReactCSSTransitionGroup\n          transitionName=\"fade\"\n          transitionAppear={true}\n          transitionEnter={true}\n          transitionLeave={true}\n          transitionAppearTimeout={500}\n          transitionEnterTimeout={500}\n          transitionLeaveTimeout={300}\n        >\n          { activeScreen }\n        </ReactCSSTransitionGroup>\n      </div>\n    );\n  }\n}\n\nexport default Nystrum;\n","import * as ROT from 'rot-js';\n\nexport const TILE_KEY = () => {\n  return {\n    'GROUND': {\n      background: '#974',\n      foreground: '#aaa',\n      character: '.',\n      passable: true,\n    }\n  }\n}\n\n// RENDERING\n\nexport const DRAW = (map, display) => {\n  for (let key in map) {\n    let parts = key.split(\",\");\n    let x = parseInt(parts[0]);\n    let y = parseInt(parts[1]);\n    let tile = map[key];\n    let { character, foreground, background } = TILE_KEY()[tile.type]\n    if (tile.entities.length > 0) {\n      let entity = tile.entities[tile.entities.length - 1]\n      character = entity.components.renderer.character\n      foreground = entity.components.renderer.color\n      if (entity.components.renderer.background) {\n        background = entity.components.renderer.background\n      }\n    }\n    display.draw(x, y, character, foreground, background);\n  }\n}\n\n// END RENDERING\n\nexport const coordsToString = (coords) => `${coords.x},${coords.y}`\n\nexport const getImpassableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('impasse') && !e.components.impasse.passable)\n}\n\nexport const getDestructableEntities = (entities) => {\n  return entities.filter((e) => e.components.hasOwnProperty('destructible'))\n}\n\nexport const delay = (timeDelayed = 100) => {\n  return new Promise(resolve => setTimeout(resolve, timeDelayed));\n}\n\nexport const exampleEngine = () => {\n  let scheduler = new ROT.Scheduler.Simple();\n  let engine = new ROT.Engine(scheduler);\n  let output = [];\n  /* sample actor: pauses the execution when dead */\n  let actor = {\n    lives: 3,\n    act: function () {\n      let done = null;\n      let promise = {\n        then: function (cb) { done = cb; }\n      }\n\n      output.push(\".\");\n      // SHOW(output.join(\"\"));\n      console.log(output.join(\"\"));\n\n      this.lives--;\n\n      /* if alive, wait for 500ms for next turn */\n      if (this.lives) {\n        setTimeout(function () { done(); }, 500);\n      }\n\n      return promise;\n    }\n  }\n  scheduler.add(actor, true);\n  engine.start();\n}\n\nexport const getRandomInArray = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n}","import * as Helper from '../lib/helper';\n\nexport const createEntity = (id = null, name = 'Empty', components = {}, world) => {\n  let entity = {\n    id,\n    name,\n    components,\n    world,\n    sendEvent: (target, eventType, parameters) => sendEvent(target, eventType, parameters, world),\n  };\n  return entity\n}\n\nexport const sendEvent = async (target = null, eventType = null, parameters = null, world = null) => {\n  let success = false;\n  for (let key in target.components) {\n    let component = target.components[key]\n    if (component.hasOwnProperty(eventType)) {\n      console.log('SUCCESSFUL EVENT: ', eventType)\n      success = true\n      if (eventType !== 'PREPARE_RENDER') {\n        await Helper.delay();\n      }\n      component[eventType]({ ...parameters, self: target, component: component });\n      Helper.DRAW(world.map, world.display)\n    }\n  }\n  if (!success) {\n    console.log('FAILED EVENT')\n  }\n};","import * as Helper from '../lib/helper';\n\nexport const receiver = (pos) => {\n  return {\n    responded: false,\n    RECIEVE: (parameters) => {\n      let { self, component, message } = parameters\n      console.log(message, pos.x, pos.y)\n      if (!component.responded) {\n        component.responded = true\n        self.sendEvent(parameters.sender, 'hello', 'RECIEVE', { message: 'copy', sender: self })\n      }\n    }\n  }\n}\n\nexport const impasse = (passable = false) => {\n  return {\n    passable,\n    MAKE_PASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = true;\n    },\n    MAKE_IMPASSABLE: (parameters) => {\n      let { component } = parameters;\n      component.passable = false;\n    }\n  }\n}\n\nexport const body = (world, pos = { x: 0, y: 0 }) => {\n  if (world) {\n    return {\n      pos,\n      MOVE: (parameters) => {\n        let { self, component, currentPos, targetPos } = parameters\n        if (world.canOccupy(world.map, targetPos)) {\n          component.pos = targetPos\n          let tile = world.map[Helper.coordsToString(currentPos)]\n          world.map[Helper.coordsToString(currentPos)] = {...tile, entities: []}\n          self.sendEvent(self, 'PREPARE_RENDER')\n          // Helper.DRAW(world.map, world.display)\n        } else {\n          console.log('can\\'t move there')\n        }\n      }\n    }\n  }\n  console.log('No world to occupy');\n  return {}\n}\n\nexport const destructible = (world, durability = 1) => {\n  return {\n    durability,\n    DECREASE_DURABILITY: (parameters) => {\n      let { self, component, value } = parameters;\n      component.durability -= value\n      if (component.durability <= 0) {\n        self.sendEvent(self, 'DESTROY')\n      }\n    },\n    INCREASE_DURABILITY: (parameters) => {\n      let { component, value } = parameters;\n      component.durability += value\n    },\n    DESTROY: (parameters) => {\n      let { self, component, value } = parameters;\n      let tile = world.map[Helper.coordsToString(self.components.body.pos)];\n      world.map[Helper.coordsToString(self.components.body.pos)].entities = tile.entities.filter((e) => e.id !== self.id);\n      // self.sendEvent(self, 'PREPARE_RENDER')\n      // Helper.DRAW(world.map, world.display)\n    }\n  }\n}\n\nexport const attack = (damage = 1) => {\n  return {\n    damage,\n  }\n}\n\nexport const throwable = (world) => {\n  return {\n    THROW: (parameters) => {\n      let { self, component, direction } = parameters;\n      // if next tile is passable\n        // send move action to self\n        // send throw action to self\n      // else\n        // send decrease_durability to entity next in tile\n        // send decrease_durability to self\n      let currentPos = self.components.body.pos;\n      let nextPos = { x: currentPos.x + direction.x, y: currentPos.y + direction.y }\n      let nextTile = world.map[Helper.coordsToString(nextPos)];\n      if (world.canOccupy(world.map, nextPos)) { // change to check for target entity\n        self.sendEvent(\n          self, 'MOVE', {\n            currentPos: currentPos,\n            targetPos: nextPos\n          }\n        )\n        self.sendEvent(self, 'THROW', {direction});\n      } else {\n        if (world.map.hasOwnProperty(Helper.coordsToString(nextPos))) {\n          let impassable_and_destructable_entities = Helper.getDestructableEntities(Helper.getImpassableEntities(nextTile.entities))\n          if (impassable_and_destructable_entities.length > 0) {\n            self.sendEvent(impassable_and_destructable_entities[0], 'DECREASE_DURABILITY', { value: 1 });\n          }\n        }\n        self.sendEvent(self, 'DECREASE_DURABILITY', { value: 1 });\n      }\n    },\n  }\n}\n\nexport const renderer = (world, character = '', color = 'white', background = false) => {\n  return {\n    character,\n    color,\n    background,\n    PREPARE_RENDER: (parameters) => {\n      let { self } = parameters\n      if (self.components.hasOwnProperty('body')) {\n        world.map[Helper.coordsToString(self.components.body.pos)].entities.push(self)\n      }\n    }\n  }\n}","import React from 'react';\nimport '../App.css';\nimport * as ROT from 'rot-js';\nimport * as Entity from './lib/entity'\nimport * as Helper from './lib/helper'\nimport * as Components from './components/index'\n\nconst SHOW = (canvas) => {\n  let d = document.getElementById('display')\n  d.appendChild(canvas)\n}\n\nconst CREATE_LEVEL = (world) => {\n  let digger = new ROT.Map.Arena();\n  let freeCells = [];\n  let digCallback = function (x, y, value) {\n    if (value) { return; }\n    let key = x + \",\" + y;\n    world.map[key] = {\n      type: 'GROUND',\n      entities: [],\n    };\n    freeCells.push(key);\n  }\n  digger.create(digCallback.bind(this));\n}\n\nlet scheduler = new ROT.Scheduler.Simple()\nlet engine = new ROT.Engine(scheduler)\n\nlet world = {\n  canAct: true,\n  scheduler,\n  engine,\n  map: {},\n  display: new ROT.Display({ fontSize: 24, bg: '#099' }),\n  canOccupy: (map, pos) => {\n    if (map.hasOwnProperty(Helper.coordsToString(pos))) {\n      let tile = map[Helper.coordsToString(pos)];\n      if (Helper.TILE_KEY()[tile.type].passable && Helper.getImpassableEntities(tile.entities).length === 0) {\n        return true\n      }\n    } else {\n      return false\n    }\n  },\n}\n\nlet naruto = {\n  ...Entity.createEntity(1, 'Naruto', {\n    reciever: Components.receiver({ x: 10, y: 30 }),\n    body: Components.body(world, { x: 19, y: 21 }),\n    renderer: Components.renderer(world, 'N', 'orange', 'black'),\n  },\n    world,\n  ),\n}\n\nlet box = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 21 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box2 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 19 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet box3 = {\n  ...Entity.createEntity(2, 'Box', {\n    body: Components.body(world, { x: 22, y: 17 }),\n    renderer: Components.renderer(world, '#', 'black'),\n    impasse: Components.impasse(),\n    destructible: Components.destructible(world),\n  },\n    world,\n  )\n}\n\nlet kunai = {\n  ...Entity.createEntity(3, 'Kunai', {\n    body: Components.body(world, { x: 20, y: 21 }),\n    renderer: Components.renderer(world, '<>', 'black'),\n    destructible: Components.destructible(world),\n    attack: Components.attack(),\n    throwable: Components.throwable(world),\n  },\n    world,\n  )\n}\n\nclass Original extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.presserRef = React.createRef();\n  }\n\n  handleKeyPress = (event, world, entity) => {\n    let keymap = {\n      w: 0,\n      d: 1,\n      s: 2,\n      a: 3,\n    };\n\n    let code = event.key;\n    let dir = ROT.DIRS[4][keymap[code]];\n    if (code === 't') {\n      kunai.sendEvent(kunai, 'MOVE', {\n        currentPos: kunai.components.body.pos,\n        targetPos: {\n          x: entity.components.body.pos.x + 1,\n          y: entity.components.body.pos.y,\n        },\n      })\n      return kunai.sendEvent(kunai, 'THROW', { direction: { x: 1, y: 0 } })\n    }\n    if (!(code in keymap)) { return; }\n    let newX = entity.components.body.pos.x + dir[0];\n    let newY = entity.components.body.pos.y + dir[1];\n\n    entity.sendEvent(\n      entity, 'MOVE', {\n        currentPos: entity.components.body.pos,\n        targetPos: {\n          x: newX,\n          y: newY\n        }\n      }\n    )\n\n    return;\n    // return Helper.DRAW(world.map, world.display)\n\n  }\n\n  componentDidMount() {\n    ROT.RNG.setSeed(7);\n    SHOW(world.display.getContainer());\n    CREATE_LEVEL(world);\n    naruto.sendEvent(naruto, 'PREPARE_RENDER')\n    // kunai.sendEvent(kunai, 'PREPARE_RENDER')\n    box.sendEvent(box, 'PREPARE_RENDER')\n    box2.sendEvent(box2, 'PREPARE_RENDER')\n    box3.sendEvent(box3, 'PREPARE_RENDER')\n    Helper.DRAW(world.map, world.display)\n    this.presserRef.current.focus();\n  }\n\n  render() {\n    return (\n      <div className=\"App\" ref={this.presserRef} onKeyDown={(event) => this.handleKeyPress(event, world, naruto)} tabIndex='0'>\n        <div id='display'></div>\n      </div>\n    );\n  }\n}\n\nexport default Original;\n","import React from 'react';\nimport './App.css';\nimport Nystrum from './nystrum/Nystrum';\nimport Original from './original/Original';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <Nystrum />\n        {/* <Original /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}